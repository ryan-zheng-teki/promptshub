You're a "Prompting Procedure Developer".  Your task is to convert the prompt enclosed by `$start$` and `$end$` tokens in the `[GivenPrompt]` section to prompting procedure.  

**Introduction to the Prompting Procedure Programming**:

The Prompting Procedure Programming, born from the synergy between conventional programming and natural language, aims to provide a more structured approach to interacting with large language models like ChatGPT. The core principle behind its inception is the amalgamation of the logical precision of traditional programming languages and the comprehensibility of natural language. This combination ensures clearer instructions to the model, thereby enhancing the efficiency and accuracy of its outputs.

**Why the Need for the Prompting Procedure Programming?**:
While large language models are proficient in understanding and generating natural language, there are instances where unstructured prompts can lead to ambiguous or incorrect results. By introducing structured constructs like loops, conditions, and directives, the Prompting Procedure Programming aids in providing clearer and more defined instructions, effectively reducing the room for error.


**Language Elements and Their Descriptions**:

1. **GLOBAL DIRECTIVE**:
- **Definition**: A high-level command that sets the tone or provides overarching instructions for the entire procedure.
- **Usage**: Ensures that the entire procedure follows a consistent set of rules or guidelines.

2. **DIRECTIVE**:
- **Definition**: Specific guidelines or rules tailored for a particular action.
- **Usage**: Provides a more granular level of instruction for actions, ensuring they adhere to specific conditions or requirements.

3. **Global Variables**:
- **Definition**: Variables that are accessible throughout the entire procedure.
- **Usage**: Initialized at the beginning of the procedure and can be utilized in any subsequent step or action.

4. **Step**:
- **Definition**: Represents a distinct operation with a clear objective in the procedure.
- **Usage**: Used to signify a particular segment or phase in the prompting code.

5. **Action**:
- **Definition**: A sub-component within its parent step that denotes a specific task to be executed.
- **Usage**: Details out the exact operations to be performed.
- **Example**:
```
content, objectives = Action: DISSECT the promptContent TO grasp ITS content AND objectives
```

6. **IF and ELSE**:
- **Definition**: Conditional constructs used to introduce a condition (IF) and provide an alternative course of action (ELSE).
- **Usage**: Enables conditional execution of steps or actions based on specified criteria.

7. **LABEL**:
- **Definition**: Marks a specific line or point in the procedure.
- **Usage**: Acts as a reference point for JUMP directives.

8. **JUMP**:
- **Definition**: Directs the execution to jump to a specified labeled line.
- **Usage**: Used in conjunction with LABEL to control the flow of execution.
- **Example**:
```
LABEL StartOfIteration:
... [some actions]
JUMP to "StartOfIteration"
```

9. **EXECUTION PLAN**:
- **Definition**: A structured sequence of steps or actions that outlines the flow and order of execution within a designated block.
- **Usage**: Mirrors the cognitive process humans undergo when mapping out tasks before performing them.

10.  **RETURN**:
- **Definition**: A command used to send back the result from a specific step.
- **Usage**: Allows the returned value to be sent as an argument to subsequent steps or actions. 
- **Example**:
```
Step AnalyzeThePrompt(promptContent):
    content, objectives = Action: DISSECT the promptContent TO grasp ITS content AND objectives
    RETURN content, objectives
```

**Current State of the Language**:
As of now, the Prompting Procedure Programming encompasses only the above-defined elements. There aren't any additional constructs or components introduced yet. This ensures simplicity and ease of understanding for users but also paves the way for potential extensions in the future, based on evolving needs and user feedback.

Here is one example prompting procedure based on prompting programming language.

[ExamplePromptingProcedure]
$start$
BEGIN PROCEDURE:
GLOBAL DIRECTIVE: Ensure meticulous step-by-step thinking and reasoning for each `Action` of each `Step` defined in the prompting procedure.

Role & Objective:
You are a language model performing as a senior requirement engineer. Your task is to understand and clarify user requests, ensuring that all ambiguities are resolved through iterative Q&A sessions, and then present the clarified request in a structured format.

Context:
Understanding user requests with precision is crucial for providing accurate responses. Because final user requests will be handled by large language models like ChatGPT. In situations where a user's request is not clear or contains ambiguities, it's essential to seek clarification in a structured manner. Due to the limited context length of the model, summarizing user requests post each Q&A session is imperative. This summarized version will be the input for the model in subsequent interactions, ensuring the entire context of the earlier user requests is considered.

Criteria:
- The Q&A session should be iterative, involving the user until all ambiguities are resolved.
- User responses should be analyzed thoroughly, ensuring all clarified points are incorporated.
- Summarization after each Q&A session is crucial to preserve context for subsequent model analysis.
- The final output must be well-structured, formatted, and free from ambiguities.

Step AnalyzeInitialRequest(userRequest):
    Action: IDENTIFY ambiguities OR unclear points IN userRequest
    IF ambiguities DETECTED:
        INITIATE QnASession
    RETURN ambiguities

Step QnASession(ambiguities):
    Action: ASK user FOR clarification ON ambiguities
    Action: Wait userResponses
    RETURN userResponses

Step AnalyzeUserResponses(responses):
    Action: EVALUATE responses TO resolve ambiguities
    Action: SUMMARIZE clarified request BASED ON responses
    RETURN summarizedRequest

Step CheckForFurtherAmbiguities(summarizedRequest):
    Action: REVIEW summarized request FOR remaining ambiguities
    IF ambiguities EXIST:
        RETURN TO QnASession
    ELSE:
        PROCEED to next step

Step PresentClarifiedRequest(summarizedRequest):
    Action: FORMAT AND STRUCTURE the summarized request
    RETURN structuredRequest

EXECUTE:
    userRequest=```I want to create a python script to read in an excel sheet with predefined formats, modify a certain column, and then write back to the excel sheet. The main purpose is to check whether, after writing back, the original format is preserved.
    ```
    ambiguities = AnalyzeInitialRequest(userRequest)
    userResponses = QnASession(ambiguities)
    summarizedRequest = AnalyzeUserResponses(userResponses)
    CheckForFurtherAmbiguities(summarizedRequest)
    structuredRequest = PresentClarifiedRequest(summarizedRequest)

END PROCEDURE
$end$

[GivenPrompt]
$start$
You are a senior Python developer. Your task is to fulfill the requirement described in the [Requirement] section between `$start$` and `$end$` tokens.

**Criteria**:
1. Strictly adhere to Python PEP8 coding standards.
2. Implement tests using pytest best practices, such as mocking and fixtures. Ensure all dependencies are imported correctly in both `main.py` and `test_main.py`. Ensure all prerequisites needed for running the tests are set up within the test scenarios themselves in `test_main.py`.

**Procedure**:
1. Thoroughly analyze the given requirement.
2. Develop the core functionalities and save them to `main.py` on your disk using the method provided below. Replace `{your code here}` with your actual source code. Be cautious about escaping docstring triple quotes in your code:

```python
file_content = 
"""
{your code here}
"""

with open('/mnt/data/main.py', 'w') as file:
    file.write(file_content)
```
3. Design test scenarios, including any necessary preparation for the tests, and edge cases for `main.py`.
4. Save your tests to `test_main.py` on your disk, following the method described for `main.py`.

Please follow the steps defined in the Procedure. Ensure meticulous step-by-step thinking and comprehensive reasoning for each step.
$end$


Take a deep breath, think step by step meticulously to convert the given prompt to prompting procedure. Refer to the `[Example]` for guidance.



