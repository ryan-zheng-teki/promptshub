You are a large language model performing as a software architect tasked with updating an existing module code design example. The original template, from which the example was derived, has undergone changes, and it is crucial to align the example with the updated template while ensuring its functionality.

**Criteria**:
1. Reflect the changes made in the updated template accurately in the example.
2. Preserve the coherence and functionality of the example.
3. Avoid unnecessary overhauls; the primary focus should be alignment with the template.

**Procedure**:
1. Thoroughly study the updated template provided in the `[Template]` section to grasp its format and structure.
2. Cross-check the existing module code design example given in the `[Example]` section against the updated template considering the user feedback given in the `[Feedback]` section.
3. Pinpoint the segments in the example that need adjustments based on the template's updates.
4. Implement the required changes in the example while maintaining its overall coherence. And present the implemented new example in a copiable code block.

Please follow the steps defined in the Procedure. Ensure meticulous step-by-step thinking and comprehensive reasoning for each step.

[Example]:
### Feature Code Design Documentation:

#### 1. Code Architecture Design:

##### 1.1. High-Level Design
The module is focused on representing a template for prompts. The architecture is modular, allowing the template to possess variables that can be filled dynamically. The design prioritizes ease of conversion to dictionary format, which suggests that communication with the frontend or other systems might be a primary goal.

##### 1.2. New Components Specifications

###### 1.2.1. Fully Defined

- **PromptTemplate (New)**
    - **Purpose**: Represents a prompt with potential template variables. Provides functionality for conversion to dictionary format and filling the template with values.
    - **Attributes**:
        - `template`: The raw template string.
        - `variables`: A list of associated `PromptTemplateVariable` instances.
    - **Methods/APIs**:
        - `to_dict()`: Converts the `PromptTemplate` instance to a dictionary representation.
        - `fill(values: dict)`: Fills the template using the provided dictionary of variable values. Raises a `KeyError` if a required variable is missing.
    - **Interactions**: Uses the `to_dict()` method of the `PromptTemplateVariable` for the conversion process.

- **PromptTemplateVariable (New)**
    - **Purpose**: Represents a variable within a prompt template. Each variable can have a source (e.g., dynamically replaced based on the project or provided by user input) and can have capabilities like code context building and LLM refinement.
    - **Attributes**:
        - `name`: The variable name.
        - `source`: The source of the variable. Values can be either `DYNAMIC` or `USER_INPUT`.
        - `allow_code_context_building`: Flag indicating if the variable allows code context building.
        - `allow_llm_refinement`: Flag indicating if the variable allows LLM refinement.
    - **Methods/APIs**:
        - `set_value(value: str)`: Sets the value for this variable.
        - `get_value()`: Retrieves the value of this variable, raising a `ValueError` if the value is not set.
        - `to_dict()`: Converts the `PromptTemplateVariable` instance to a dictionary representation.
    - **Interactions**: Used by the `PromptTemplate` for variable representation and conversion to dictionary format.

##### 1.3. Used-By Dependencies (Unchanged Components)

- None.

##### 1.4. Interactions Overview
- The `PromptTemplate` serves as the primary entity to represent prompts with templated variables. 
- It leverages the `PromptTemplateVariable` to manage its list of associated variables and to facilitate the conversion to dictionary format.

##### 1.5. External Dependencies
- None.

#### 2. UML Diagram

- **UML Legend**:
  - Components marked with `(New)` are to be developed as part of this feature.
  - Components marked with `(Used-By)` are pre-existing and are treated as dependencies.

@startuml

class "PromptTemplate (New)" {
    + template: str
    + variables: List[PromptTemplateVariable]
    + to_dict(): dict
    + fill(values: dict): str
}

class "PromptTemplateVariable (New)" {
    + name: str
    + source: str
    + allow_code_context_building: bool
    + allow_llm_refinement: bool
    + set_value(value: str): None
    + get_value(): str
    + to_dict(): dict
}

"PromptTemplate (New)" --> "PromptTemplateVariable (New)": Uses for variable representation

@enduml


[Template]
### <Title> (Title should be closely related to the module, such as xxx Module Code Specification)

#### 1. Module Architecture Design:

##### 1.1. High-Level Design
- Brief overview of the primary module architecture.
- Design patterns, principles, or structures that will be applied.

##### 1.2. New Components Specifications

###### 1.2.1. Fully Defined
For each component:
  - **Name (New) [extends/relates OtherComponentName]** (if applicable)
    - **Purpose**: Clear description of the component's role and functionality within the module.
    - **Attributes**:
      - `attribute_name`: Short description of the attribute and its significance.
      ... Continue for all attributes.
    - **Methods/APIs**:
      - `method_name()`: Describe the method's purpose, expected input, and output.
      ... Continue for all methods.
    - **Interactions**: Describe how this component interacts with other module components.

... Continue for all fully defined new components.

###### 1.2.2. Part-Of Components (Pending File Provision)
For each component:
  - **Name (Part-Of) [extends/relates OtherComponentName]** (if applicable)
    - **Status Note**: _"This component is part of the module, but its detailed specifications will be supplemented upon provision of the relevant file."_
    - **Tentative Purpose**: A general understanding or assumption about the component's role and tasks based on current knowledge.

... Continue for placeholders.

##### 1.3. Used-By Dependencies (Unchanged Components)

For each component:
  - **Name (Used-By)**
    - **Purpose**: Clear description of the component's role and functionality within the module.
    - **Interactions**: Describe its interactions with new module components, if any.

... Continue for all dependencies.

##### 1.4. Interactions Overview
- A broader perspective on how new module components interact with each other and with existing components.
- Highlight any specific sequence of operations or workflows within the module.

##### 1.5. External Dependencies
- List any third-party libraries, services, or tools that the module will use.
- Specific versions or configurations to be aware of.

#### 2. UML Diagram

- A UML diagram showcasing the relationships and interactions between module components.
- **UML Legend**:
  - Components marked with `(New)` are to be developed as part of this module.
  - Components marked with `(Part-Of)` are identified but not fully defined within the module.
  - Components marked with `(Used-By)` are pre-existing and are treated as dependencies within the module context.

@startuml
... UML content here ...
@enduml


[Feedback]
The template has updated the wording from feature to module. So wording in example should be updated as well.