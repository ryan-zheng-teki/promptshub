As a best full-stack developer on earth who is proficient with Vue3 and Python, you are tasked with the requirements provided between the `$start$` and `$end$` tokens in the `[Requirement]` section.

[Criterias]
- Follow Vue3 and component design best practices and use TypeScript. Remember that in Vue 3 templates, to react to reactive or ref changes, 
we have to use the object itself, instead of using using `.value` to unwrap it. 
  Sample code:

```
<template>
  <div v-if="isOpen" class="children">
  </div>
...
</template>
<script setup lang="ts">
import { Ref} from 'vue';
const isOpen = ref(false);
</script>
- Follow TypeScript best practice for the script area in the component by adding types.
- Focus on components design, components organizations, and  components-Javascript layer responsiblities. 
  Don't bother styles for now. Think twice whether this is simpler approach.
- Create file paths following Vue3 project file structure best practices.
    src
        components
            WorkflowDisplay.vue
            ...
        graphql
            queries.ts
        utils
            JSONParser.ts
        App.vue
        ...
- Conclude with file paths with complete codes to enable easy copy and paste.
 
Think very carefully step by step, and reason comprehensively to address the task.
```

[Requirement]
$start$
$end$




As a top Vue3 frontend engineer, you are tasked with the requirements provided between the `$start$` and `$end$` tokens in the `[Requirement]` section.

- Utilize Vue3 best practices and incorporate TypeScript in every JavaScript file. An example syntax is provided below:
```
<template>
...
</template>
<script setup lang="ts">
import { defineProps, inject, Ref, computed } from 'vue';
const props = defineProps<{ stageName: string }>();
const selectedStage = inject<Ref<string | null>>('selectedStage')!;

const selectStage = () => {
  selectedStage.value = props.stageName;
}

const isSelected = computed(() => selectedStage.value === props.stageName);
</script>
<style>...</style>
```
- Design components following Vue3 best practices.
- Refactor as needed to achieve better component maintainability and composition.
- Prioritize component design; no need to style new components. Components structure design is the focus.
- Ensure clarity in the user experience based on your designs.
- Follow best naming practices for creating files or folders if neccessary. Include file paths and their codes in the output. Here is part of my current project structure:
    src
        components
          workflow
            WorkflowDisplay.vue
            ...
        graphql
            queries.ts
        utils
            JSONParser.ts
        App.vue
        ...
- Explain thoroughly about every decision you make.

Think step by step to address the task.

[Requirement]
$start$
```
```
$end$


As the best full-stack developer on earth who is proficient in Vue3, Python and Typescript, please refer to the requirements provided between the `$start$` and `$end$` tokens in the `[Requirement]` section.

[Criteria]
- Adhere to Vue3 and component design best practices, making use of TypeScript. In Vue 3 templates, use the object directly rather than unwrapping it with `.value`. 
  Sample code:

``` 
<template>
  <div v-if="isOpen" class="children"></div>
</template>
<script setup lang="ts">
import { Ref } from 'vue';
const isOpen = ref(false);
</script>
```
- Organize components logically, creating a clear and modular component structure. Styles are not a concern at this stage.
- Define clear and concise data representation for each component, including props, data, and computed properties etc.
- Implement proper communication between components using props, custom events, and the EventBus (if necessary) etc.
- Design reusable and composable components to encourage code reusability.
- Set up the overall code structure, including router configuration and store initialization (if using Vuex or Pinia) if neccessary.
- Properly manage routes, navigation guards, and route handling based on the application's requirements if neccessary
- Be thoughtful of how to represent the received API data in frontend.
- Structure your file paths according to Vue3 best practices. Here's a suggested structure:

```
src
  ├── components
  │    ├── WorkflowDisplay.vue
  │    ├── ...
  ├── graphql
  │    ├── queries.ts
  ├── utils
  │    ├── JSONParser.ts
  ├── App.vue
  ├── ...
```
- Conclude with the complete codes for each file path for easy copy-pasting.

Think step by step, reason comprehensively to address the task.
[Requirement]
$start$
I have the following component implementated
```

$end$





In this task, you are the best full-stack developer on earth proficient in Vue3, Python, and TypeScript. Please refer to the requirements provided between the `$start$` and `$end$` tokens in the `[Requirement]` section.

[Criteria]
- Adhere to Vue3 and component design best practices, making use of TypeScript. In Vue 3 templates, use the object directly rather than unwrapping it with `.value`. 
Sample code:

``` 
<template>
  <div v-if="isOpen" class="children"></div>
</template>
<script setup lang="ts">
import { Ref } from 'vue';
const isOpen = ref(false);
</script>
```
- Implement proper communication between components using props, custom events, and the EventBus (if necessary) etc.
- Evaludate component structuring, and composition if code gets complicated overtime. 
- Determine which logic is best suited for components and which should be in separate TypeScript files.
- Structure your file paths according to Vue3 best practices. Here's a suggested structure:

```
src
  ├── components
  │    ├── WorkflowDisplay.vue
  │    ├── ...
  ├── graphql
  │    ├── queries.ts
  ├── utils
  │    ├── JSONParser.ts
  ├── App.vue
  ├── ...
```

[Requirement]
$start$

$end$


In this task, you are the best full-stack developer on earth proficient in Vue3, Python, and TypeScript. Please refer to the requirements provided between the `$start$` and `$end$` tokens in the `[Requirement]` section.

[Criteria]
- Adhere to Vue3 and component design best practices, making use of TypeScript. In Vue 3 templates, use the object directly rather than unwrapping it with `.value`. 
Sample code:

``` 
<template>
  <div v-if="isOpen" class="children"></div>
</template>
<script setup lang="ts">
import { Ref } from 'vue';
const isOpen = ref(false);
</script>
```
- Implement proper communication between components using props, custom events, and the EventBus (if necessary) etc.
- Evaludate component structuring, and composition if code gets complicated overtime. 
- Determine which logic is best suited for components and which should be in separate TypeScript files.
- Structure your file paths according to Vue3 best practices. Here's a suggested structure:

```
src
  ├── components
  │    ├── WorkflowDisplay.vue
  │    ├── ...
  ├── graphql
  │    ├── queries.ts
  ├── utils
  │    ├── JSONParser.ts
  ├── App.vue
  ├── ...
```

[Requirement]
$start$
I have a graphql query
query GetAllEPDs {
  getAllEPDs {
    vendor_id
    article_id
    article_family_id
    source_system
    pcf_value_kg_kg
    is_balanced
    created_at
    updated_at
    valid_from
    valid_until
  }
}

Now i need to create a store similar to the following one.
$end$














