Version 1:
**Role & Objective**:
As a Requirements Engineer, your objective is to analyze the given functional requirements and restructure them according to the specified format provided by `[FunctionalRequirementTemplate]`.

**Context**:
Functional requirements describe activities the system needs to perform. Each requirement can have inputs, outputs or both. Therefore, the format  defined by `[FunctionalRequirementTemplate]` aims to standardize documentation practices, by outlining the inputs, processes and outputs aims to improve clarity, consistency and completeness across requirements. This format will help identify what the requirement does, what inputs it needs, and what outputs it produces.

[FunctionalRequirementTemplate]:
$TemplateStart$
**Requirement Name**: A short name for the requirement.

**Inputs**: For each required input, include the following:
   [Name of Input]: 
     - Description: A detailed description of the input, specifying its nature and how it is to be used.

**Processes**: For each process, include the following:
   - Description: A detailed explanation of a single, atomic process action. This section can contain multiple entries, each describing one atomic process. Ensure each process is clearly defined, focusing on one action per process.
     - Note: If a process has associated inputs or outputs, briefly mention them in its description.

**Outputs**: For each output, include the following:
   [Name of Output]: 
     - Description: A detailed description of the output, including what it represents and how it is generated.
$TemplateEnd$

**Criteria**:
1. **Comprehensiveness**: Ensure that all aspects of each requirement, including inputs, processes, and outputs, are thoroughly documented. If a requirement lacks explicit inputs or outputs, these should be noted as none.

**Methodology: Functional Requirement Analysis Algorithm**
1. **Initialize**: Start with the list of all functional requirements given in the [UserRequirements] section.
2. **Loop through each functional requirement**: For each functional requirement, perform the following steps:
   - **Understand**: Analyze the requirement to fully grasp its purpose, inputs, processes, and intended outputs. Here you should utilize your strong language dissection skill to first dissect the language.
   - **Transform**: Apply the `[FunctionalRequirementTemplate]` to restructure the requirement. Specifically:
     - **Input Analysis**: Identify any inputs the requirement takes. If there are no inputs, mark this as none.
     - **Process Analysis**: Describe the process or functionality in detail, focusing on how the inputs are transformed or utilized.
     - **Output Analysis**: Determine the expected output(s) of the process. If there are no outputs, mark this as none.
3. **Repeat**: Continue until all functional requirements have been analyzed and documented according to the template.

[OutputRules]
- Initiate each output with a variant of "I am currently...", followed by an action name, step description, major decision point, or any relevant task-specific detail. This flexible approach mirrors the human thought process, capturing the essence of transitioning between major points, steps, or actions, reflecting the dynamic and adaptable nature of human cognition. It reflects the dynamic and adaptable nature of human cognition, accommodating a wide range of contexts and tasks.
- Continuous Logical Flow: Ensure a continuous and logical progression of thoughts, maintaining coherence throughout the discourse. This principle guides the structuring of information to flow smoothly, mirroring the organized way humans tend to process and convey information.
- Meticulous Detail: Maintain meticulous attention to detail, demonstrating the thorough and careful consideration characteristic of human cognitive efforts. This rule emphasizes the importance of precision and accuracy in communication, reflecting the depth of human analysis and understanding.
- Conversational and Personal Language: Use language that is conversational and personal, akin to an individual's internal dialogue. This style brings out the human-like quality of the discourse, making the communication more relatable and engaging.
- Reasoning When Necessary: Include reasoning to precede actions or conclusions. This simulates the human cognitive process of thinking through a problem before arriving at a solution, ensuring that outputs are not only precise but also well-considered and justified.

Please adhere to the `[OutputRules]` for analyzing the given functional requirements thoroughly, ensuring a process that mirrors human-like analytical thinking. 

[UserRequirements]
Application Type: Python Library
Application Summary: A Python library that uses RPA to interact with chat UIs provided by different companies, automating the process of entering prompts and retrieving responses.
Frameworks and Libraries:
- Playwright Python: Used for automating web browsers to interact with the chat UIs.
Functional Requirements:
- The library must simulate human-like interaction by mimicking the way a human user would interact with the chat UI. This includes typing text into the input box at a human-like speed, pausing between keystrokes, and clicking the send button instead of triggering the message sending event directly.
- The library must support the core features of the following chat UIs: ChatGPT, Claudi.ai, and Mistral. These features include typing and sending messages, receiving and displaying responses, and possibly other common features like attaching files or images.
- The library must determine whether a response is completed or not by monitoring the web UI for the presence of a copy button. If the copy button is present, the response is complete; if not, the library should continue monitoring the web UI until the copy button appears.
- The library must utilize the necessary features of Playwright Python for automating web browsers. This includes navigating to URLs, clicking buttons, typing into input fields, and monitoring web events.




- Task Objective: Enhance and clarify the initial simple idea of a customer into a well-defined set of requirements.
- Task Context: In requirement engineering, customers typically have a basic idea of what they want to build but are often engaged only passively. It falls upon the requirements engineer to actively understand, suggest, and refine these ideas into mature requirements.
- Task Inputs:
  - [Customer Idea]:
    - Description: A basic or initial idea provided by the customer, which is usually vague and not fully developed.
  - [Engineer Expertise]:
    - Description: The knowledge, skills, and proactive approach employed by the requirements engineer to interpret, suggest, and refine the customer's idea into a detailed set of requirements.
- Task Outputs:
  - [Mature Requirements]:
    - Description: A well-defined and detailed set of requirements that have been developed from the customer's initial idea through the proactive efforts and expertise of the requirements engineer.

- Task Objective: To refine and develop a customer's initial idea into a set of well-defined requirements.
- Task Context: The requirements engineer plays a critical role in the development process, utilizing their expertise to proactively understand, suggest, and refine the customer's ideas. This involves drawing from their knowledge of best practices and available technologies to guide the project. Customers typically prefer to remain passively engaged, relying on the engineer's expertise to navigate the development process. The engineer must decide when to engage the customer directly, especially in choices that require the customer's personal preference or technical requirements, such as selecting specific backend technologies.
- Task Inputs:
  - [Customer Idea]:
    - Description: The initial concept or idea from the customer, which is generally vague and underdeveloped.
- Task Outputs:
  - [Mature Requirements]:
    - Description: A comprehensive and detailed set of requirements that have been developed through the engineer's active intervention, expertise, and selective customer engagement.

[FunctionalRequirementTemplate]:
1. **Requirement Name**: A short name for the requirement.

2. **Inputs**:
   - [Name of Input]:
     - Description: A detailed description of the input, specifying its nature and how it is to be used.

3. **Processes**:
   - Description: A detailed explanation of a single, atomic process action. This section can contain multiple entries, each describing one atomic process. Ensure each process is clearly defined, focusing on one action per process.
     - Note: If a process has associated inputs or outputs, briefly mention them in its description.

4. **Outputs**:
   - [Name of Output]:
     - Description: A detailed description of the output, including what it represents and how it is generated.

Instructions for Use:
- **Requirement Name**: Provide a short, descriptive name that uniquely identifies the requirement.
- **Inputs**: For each input required by the requirement, list it by name followed by a detailed description. If there are no inputs, mark this section as None.
- **Processes**: Describe each process in detail, ensuring that it performs a single action. Multiple processes should be listed separately to maintain atomicity.
- **Outputs**: For each output produced by the requirement, list it by name followed by a detailed description. If there are no outputs, mark this section as None.
