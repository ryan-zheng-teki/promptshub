

As a top Vue3 frontend engineer who pushes the aesthetics of UI to limit. You are tasked with the UI improvements requirements provided between the `$start$` and `$end$` tokens in the `[Requirement]` section.

[Criterias]
- Analyse source the code step by step before giving solution.
- Make sure layouts, font, colors etc are aesthetics appleaing and engaging based on the context of the feature.
- Follow Vue3 best practices
- Output should include complete codes, so i can copy paste easily.Do not use placeholders.

Think step by step and reason comprehensively to address the task.

[Requirement]
I have a App.vue defined.
$start$
```
<template>
  <div class="app">
    <WorkspaceSelector class="app-workspace-selector" />

    <div class="app-content">
      <div class="app-row">
        <FileExplorer class="app-file-explorer" />

        <div class="app-panel">
          <TabList :tabs="tabs" @changeTab="activeTab = $event"></TabList>
          
          <component :is="activeTab.component" />
        </div>
      </div>
    </div>

    <div class="clear"></div>
  </div>
</template>

<script setup lang="ts">
import { ref } from "vue";
import WorkspaceSelector from "./components/workspace/WorkspaceSelector.vue";
import FileExplorer from "./components/fileExplorer/FileExplorer.vue";
import ContentViewer from "./components/fileExplorer/FileContentViewer.vue";
import WorkflowDisplay from "./components/workflow/WorkflowDisplay.vue";
import TabList from "./components/tabs/TabList.vue";

const tabs = [
  { name: 'File', component: ContentViewer },
  { name: 'Agent', component: WorkflowDisplay }
];

const activeTab = ref(tabs[0]);
</script>

<style scoped>
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap');

.app {
  font-family: 'Roboto', sans-serif;
  color: #333;
  display: flex;
  flex-direction: column;
  height: 100vh;
  background-color: #f4f4f4;
  padding: 20px;
  width: 100%;
}

h1 {
  margin-bottom: 20px;
}

.app-content {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
}

.app-row {
  display: flex;
  flex-direction: row;
}

.app-workspace-selector {
  background-color: #e9ecef;
  padding: 15px;
  border-radius: 10px;
  margin-bottom: 20px;
}

.app-file-explorer {
  background-color: #fff;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.1);
  min-width: 10%; /* Smallest width allowed */
  max-width: 30%; /* Maximum width allowed */
  height: 100%;
  overflow: auto; /* In case content is larger than the maximum width allowed */
}

.app-panel {
  background-color: #fff;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.1);
  margin-left: 20px;
  flex-grow: 1;
  height: 100%;
}

.clear {
  clear: both;
}
</style>
```
Allow me to expand the file explorer width using mouse. This is very common feature.
$end$


As a top Vue3 frontend engineer who pushes the aesthetics of UI to limit. You are tasked with the UI improvements requirements provided between the `$start$` and `$end$` tokens in the `[Requirement]` section.

[Criterias]
- Analyse source the code step by step before giving solution.
- Make sure layouts, font, colors etc are aesthetics appleaing and engaging based on the context of the feature.
- Follow Vue3 best practices.
- Follow TypeScript coding best practices.
- consider refactoring when neccessary
- Strive to use css instead of javascript to adjust.
- Do not change other behaviors when improving styles.
- Output should include complete codes, so i can copy paste easily.Do not use placeholders.

Think step by step, include comprehensive reasoning to address the task.

[Requirement]
I have a PromptEditor.vue defined.
$start$
```
<template>
  <div class="prompt-editor">
    <Collapsible>
      <textarea 
          class="entire-prompt-editor"
          v-model="entirePrompt"
          @input="resizeTextarea"
      ></textarea>
    </Collapsible>

    <Collapsible>
      <div v-for="placeholder in placeholders" :key="placeholder" class="input-container">
        <label :for="placeholder">{{ placeholder }}</label>
        <textarea 
            :id="placeholder"
            v-model="values[placeholder]" 
            :placeholder="placeholder" 
            class="placeholder-input"
            rows="3"
            @input="resizeTextarea"
        ></textarea>
      </div>
    </Collapsible>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted, nextTick } from 'vue';
import { getPlaceholders } from '../../utils/PromptParser';
import Collapsible from '../Collapsible.vue';

const props = defineProps<{ template: string }>();

const entirePrompt = ref(props.template);
const placeholders = computed(() => getPlaceholders(props.template));
const values: { [key: string]: string } = ref({});

const resizeTextarea = (event: Event) => {
  let textarea: any = event.target;
  textarea.style.height = 'auto';  // Reset height to auto to calculate the new height
  textarea.style.height = textarea.scrollHeight + 'px';
};

onMounted(() => {
  nextTick(() => {
    document.querySelectorAll('textarea').forEach(textarea => {
      resizeTextarea({ target: textarea });
    });
  });
});
</script>

<style>
.prompt-editor {
  font-family: "Roboto", sans-serif;
  background-color: #f4f4f8;
  padding: 15px;
  border-radius: 6px;
  box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
}

.entire-prompt-editor, .placeholder-input {
  box-sizing: border-box; 
  width: 100%;
  border: 1px solid #ccc;
  padding: 10px 15px;
  margin-bottom: 20px;
  border-radius: 4px;
  transition: all 0.3s ease;
  font-size: 16px;
  color: #333;
  white-space: pre-wrap;
  overflow-y: auto;
  resize: vertical;
  overflow: hidden;  /* to avoid scrollbars */
}

.entire-prompt-editor:hover, .placeholder-input:hover {
  border-color: #666;
  transform: scale(1.01);
}

.entire-prompt-editor:focus, .placeholder-input:focus {
  border-color: #007BFF;
  outline: none;
  box-shadow: 0 0 5px rgba(0,123,255,0.6);
  transform: scale(1.03);
}

.input-container {
  margin: 15px 0;
}

.input-container label {
  display: block;
  margin-bottom: 7px;
  font-weight: 600;
  color: #444;
}
</style>



```
Currently the left side of the words are somehow hidden when the tranform effect happening. I think we can remove the tranform effect.
$end$



The following is one of my conversation, but it works better.
excellent improvements. I like it. But can you please make the place holder editor automatically increase its size when user content does not fit in its size anymore? The area should always be big enough to allow user to see its complete input content.

Please think step by step, and follow Vue3 best practice. At the end of thinking and reasoning, make sure output one complete code as well, so i can easily copy and paste