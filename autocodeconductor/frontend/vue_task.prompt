As a top Vue3 frontend engineer, you are tasked with the requirements provided between the `$start$` and `$end$` tokens in the `[Requirement]` section.

[Criterias]
- Follow Vue3 best practices and use TypeScript for any JavaScript file, as shown in the following syntax:
```
<template>
...
</template>
<script setup lang="ts">
import { defineProps, inject, Ref, computed } from 'vue';
const props = defineProps<{ stageName: string }>();
const selectedStage = inject<Ref<string | null>>('selectedStage')!;

const selectStage = () => {
  selectedStage.value = props.stageName;
}

const isSelected = computed(() => selectedStage.value === props.stageName);
</script>
<style>...</style>
```
- Follow Vue3 component design best practice
- Aim to develop a user interface that is both functional and aesthetically appealing. 
- Ensure the user journey is articulable based on the design.
- Follow best naming practices for creating files or folders if neccessary. Here is part of my current project structure:
    src
        components
            WorkflowDisplay.vue
            ...
        graphql
            queries.ts
        utils
            JSONParser.ts
        App.vue
        ...
- Output should updated file paths and their complete codes, do not use placeholders.
 
Examine the given code step by step before proposing solutions.
Think very carefully step by step and reason with very high granule to address the task.

[Requirement]
$start$
I have App.vue component defined 
```
<template>
  <div class="app">
    <WorkspaceSelector class="app-workspace-selector" />

    <div class="app-content">
      <FileExplorer class="app-file-explorer" />

      <TabList :tabs="tabs" @changeTab="activeTab = $event"></TabList>

      <component :is="activeTab.component" />
    </div>

    <div class="clear"></div>
  </div>
</template>

<script setup lang="ts">
import { ref } from "vue";
import WorkspaceSelector from "./components/workspace/WorkspaceSelector.vue";
import FileExplorer from "./components/fileExplorer/FileExplorer.vue";
import ContentViewer from "./components/fileExplorer/FileContentViewer.vue";
import WorkflowDisplay from "./components/workflow/WorkflowDisplay.vue";
import TabList from "./components/tabs/TabList.vue";
import Tab from "./components/tabs/Tab.vue";

const tabs = [
  { name: 'File', component: ContentViewer },
  { name: 'Agent', component: WorkflowDisplay }
];

const activeTab = ref(tabs[0]);
</script>

<style scoped>
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap');

.app {
  font-family: 'Roboto', sans-serif;
  color: #333;
  display: flex;
  flex-direction: column;
  height: 100vh;
  background-color: #f4f4f4;
  padding: 20px;
  width: 100%;
}

h1 {
  margin-bottom: 20px;
}

.app-content {
  display: flex;
  flex-direction: row;
  flex-grow: 1;
}

.app-workspace-selector {
  background-color: #e9ecef;
  padding: 15px;
  border-radius: 10px;
  margin-bottom: 20px;
}

.app-file-explorer {
  background-color: #fff;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.1);
  width: 30%;
  height: 100%;
}

.app-panel {
  background-color: #fff;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.1);
  margin-left: 20px;
  flex-grow: 1;
  height: 100%;
}

.clear {
  clear: both;
}
</style>

```
Here is the TabList.vue
```
<template>
  <div>
    <div class="tab-list">
      <Tab v-for="tab in tabs" :key="tab.name" @click="changeTab(tab)">{{ tab.name }}</Tab>
    </div>
  </div>
</template>

<script setup lang="ts">
import Tab from "./Tab.vue";

const props = defineProps({
  tabs: Array
});

const emit = defineEmits(["changeTab"]);

const changeTab = (tab) => {
  emit('changeTab', tab);
};
</script>
  
  <style scoped>
  .tab-list {
    display: flex;
    border-bottom: 1px solid #ddd;
  }
  
  .tab-content {
    border: 1px solid #ddd;
    padding: 20px;
  }
  </style>
  
```
Here is the Tab.vue
```
<template>
  <div class="tab" @click="emit('click', $event)">
    <slot />
  </div>
</template>

<script setup lang="ts">
const emit = defineEmits(['click']);
</script>

<style scoped>
.tab {
  padding: 10px;
  cursor: pointer;
  border: 1px solid #ddd;
  margin-right: 5px;
  border-bottom: none;
}

.tab.active {
  background-color: white;
  border-top: 3px solid #2d98da;
}
</style>

```
I think the content of the tab should be contained inside the tab container. However, when i click the any tab. The content of the tab are actually on the right side of 
File, Agent. Seems like two elements are located horizontally.
$end$





As a top Vue3 frontend engineer, you are tasked with the requirements provided between the `$start$` and `$end$` tokens in the `[Requirement]` section.

[Criterias]
- Follow Vue3 best practices and use TypeScript for any JavaScript file, as shown in the following syntax:
```
<template>
...
</template>
<script setup lang="ts">
import { defineProps, inject, Ref, computed } from 'vue';
const props = defineProps<{ stageName: string }>();
const selectedStage = inject<Ref<string | null>>('selectedStage')!;

const selectStage = () => {
  selectedStage.value = props.stageName;
}

const isSelected = computed(() => selectedStage.value === props.stageName);
</script>
<style>...</style>
```
- Follow Vue3 component design best practice.
- Aim to develop a user interface that is both functional and aesthetically appealing. 
- Ensure the user journey is articulable based on the design.
- Follow best naming practices for creating files or folders if neccessary. Include file paths and their codes in the output. Here is part of my current project structure:
    src
        components
            WorkflowDisplay.vue
            ...
        graphql
            queries.ts
        utils
            JSONParser.ts
        App.vue
        ...

Think step by step and reason to the very details to address the task.

[Requirement]
$start$
I have src/components/WorkspaceSelector.vue defined.
```
<!-- src/components/WorkspaceSelector.vue -->

<template>
  <div id="workspaceSelector">
    <label for="workspace">Select Workspace:</label>
    <select v-model="selectedWorkspace" v-if="workspaces.length > 0">
        <option v-for="workspace in workspaces" :key="workspace" :value="workspace">
            {{ workspace }}
        </option>
    </select>
    <span v-else>No Workspaces available</span>
    <input type="text" v-model="newWorkspace" placeholder="Enter new workspace path" />
    <button @click="addWorkspace">Add New Workspace</button>
  </div>
</template>

<script setup lang="ts">
import { ref, provide } from 'vue';
import { AddWorkspace } from '../graphql/queries';
import { useMutation } from '@vue/apollo-composable';
import { convertJsonToTreeNode, TreeNode } from '../utils/fileExplorer/TreeNode';

const workspaces = ref([] as string[]);
const selectedWorkspace = ref(null as string | null);
const newWorkspace = ref('');

// This will hold the TreeNode of the current workspace.
// It will be provided for other components to use.
const workspaceTree = ref<TreeNode | null>(null);
provide('workspaceTree', workspaceTree);

const { mutate: addWorkspaceMutation } = useMutation(AddWorkspace, () => ({
  variables: {
    workspaceRootPath: newWorkspace.value,
  },
  update: (_cache, { data }) => {
    if (data?.addWorkspace) {
      workspaceTree.value = convertJsonToTreeNode(data.addWorkspace);
      workspaces.value.push(newWorkspace.value);
      selectedWorkspace.value = newWorkspace.value;
      newWorkspace.value = '';
      console.log('Workspace Tree:', workspaceTree.value);
    } else {
      console.error('Error adding workspace');
    }
  }
}));

const addWorkspace = () => {
  addWorkspaceMutation();
};
</script>
```

and also src/components/FileExplorer.vue component defined 
```
<template>
    <div id="fileExplorer">
        <h2>Files</h2>
        <div v-for="file in files" :key="file.path">
            <a href="#" @click.prevent="selectFile(file)">
                {{ file.name }}
            </a>
        </div>
    </div>
</template>

<script setup lang="ts">
import { inject, Ref, computed } from 'vue';
import { TreeNode } from '../utils/fileExplorer/TreeNode';

// Injecting the workspaceTree ref provided by WorkspaceSelector.vue
const workspaceTree = inject<Ref<TreeNode | null>>('workspaceTree')!;

// Extract file nodes from workspaceTree. This logic can be updated based on your tree structure.
const files = computed(() => {
    return workspaceTree.value ? workspaceTree.value.children.filter(node => node.is_file) : [];
});

const selectFile = (file: TreeNode) => {
    // Logic to handle file selection
    // The selected file can be stored in a shared state like Vuex or provide/inject API
};
</script>

```

My App.vue contains these two components
```
<template>
  <div class="app">
    <WorkspaceSelector class="app-workspace-selector" />

    <div class="app-content">
      <FileExplorer class="app-file-explorer" />

      <TabList v-model="selectedTab" class="app-panel">
        <Tab name="ContentViewer">
          File
        </Tab>
        <Tab name="Agent">
          Agent
        </Tab>

        <template #FileContentViewer>
          <ContentViewer />
        </template>

        <template #WorkflowDisplay>
          <WorkflowDisplay />
        </template>
      </TabList>
    </div>

    <div class="clear"></div>
  </div>
</template>

# Rest of code ...
```
When i add workspace, the TreeNode of the directory is successfully returned in the 
WorkspaceSelector. However, FileExplorer.vue seems not picking up the TreeNode, 
and not rendering anything.

I think it might has something to do with that WorkspaceSelector and FileExplorer are siblings.

Please propose solution to address the problem.
$end$


