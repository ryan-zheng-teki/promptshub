You are a large language model performing as a software architect tasked with updating an existing module code design example. The original template, from which the example was derived, has undergone changes, and it is crucial to align the example with the updated template while ensuring its functionality.

**Criteria**:
1. Reflect the changes made in the updated template accurately in the example.
2. Preserve the coherence and functionality of the example.
3. Avoid unnecessary overhauls; the primary focus should be alignment with the template.

**Procedure**:
1. Thoroughly study the updated template provided in the `[Template]` section to grasp its format and structure.
2. Cross-check the existing module code design example given in the `[Example]` section against the updated template.
3. Pinpoint the segments in the example that need adjustments based on the template's updates.
4. Implement the required changes in the example while maintaining its overall coherence. And present the implemented new example in a copiable code block.


[Template]:
### <Title> (Title should be closely related to the module, such as xxx Module Requirements Specification)

#### 1. Module Description:
Provide a concise description of the module, its purpose, and its technical significance.

#### 2. Module Dependencies:
List and briefly describe any modules or external systems that this module is dependent upon or integrates with.

- **<Dependency_1>**: Brief description of how and why this module depends on or integrates with Dependency_1.
- **<Dependency_2>**: Brief description of how and why this module depends on or integrates with Dependency_2.

<Continue listing dependencies as necessary.>

#### 3. Symbols & Usage:
In this module, specific symbols are used to highlight, classify, or provide additional context to certain items. This section explains the significance of each.

- **[⇌ Dependency_1]**: Denotes functionalities or interactions that directly involve Dependency_1.
- **[⇌ Dependency_2]**: Denotes functionalities or interactions that directly involve Dependency_2.

<Add additional symbols or terminologies as they are introduced in the module.>

#### 4. Specifications:

4.1. **Functional Specifications**:

- **<Category_1>**:
   - <Specification_1.1>
   - <Specification_1.2>
   - ...
   
- **<Category_2>**:
   - <Specification_2.1>
   - <Specification_2.2>
   - ...

<Continue listing categories and their associated specifications as necessary.>

4.2. **Technical Specifications**:

- **<Category_1>**:
   - <Specification_1.1>
   - <Specification_1.2>

<Continue listing categories and their associated specifications as necessary.>



[Example]

### Automated Coding Workflow Module Requirements Specification

#### 1. Module Description:
This module facilitates the definition, management, and execution of a multi-step automated coding workflow. It encompasses functionalities to initialize workflow steps from configurations, convert workflow instances to JSON representations, and execute specific steps or the entire workflow.

#### 2. Module Dependencies:
- **LLM Integration Module**: The steps in "Automated Coding Workflow Module" uses functionalities from the LLM Integration Module to communicate with large language models like ChatGPT.


#### 3. How To Use This Module:
(Empty as the main purpose of this section is to describe how other modules can use the Automated Coding Workflow Module.)

#### 4. Specifications:

4.1. **Functional Specifications**:

- **Workflow Management**:
   - Define and manage a multi-step automated coding workflow.
   - Each step in the workflow can potentially have sub-steps.
   - Integrate with the "LLM Integration Module" to manage llm communications.
   - Initialize steps of the workflow from a given configuration.
   - Convert the workflow instance to a JSON representation.
   - Start the entire workflow process.
   - Execute specific steps within the workflow using their ID.

- **Shared Step Functionalities**:
   - Construct a unique ID for each step instance.
   - Process the response from the "LLM Integration Module" for each step.
   - Define the execution logic for each step.
   - Each step has "Prompt Versioning Capabilities". Refer to "Prompt Versioning Module"
     

- **Requirement Clarification Step**:
   - Represent a step where coding requirements are presented to the user.
   - Process the response from the "LLM Integration Module" for this step.

- **Architecture Design Step**:
   - Represent the design stage in the coding workflow.

4.2. **Technical Specifications**:
(No technical specifications were provided in the initial document. This section can be populated when such specifications are defined.)



Please follow the steps defined in the Procedure. Ensure meticulous step-by-step thinking and comprehensive reasoning for each step.


