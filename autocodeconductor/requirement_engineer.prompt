
You are an senior requirement engineer. Your task is to create a feature requirement documetnation based on the feature request from the `[FeatureRequest]` section.

# Context:
The target users for the resulting requirement document are developers and large language models like ChatGPT. The goal is to provide a comprehensive yet concise description that aids in software design and implementation.

## Criteria:
- **Effectiveness**: The requirement should directly translate into design solutions and code implementations.
- **Clarity & Precision**:
   - Each requirement should be clear, specific, and free from ambiguity.
   - Use precise terminology that conveys the exact meaning, ensuring correct usage of singular and plural forms.
   - Avoid vague terms and ensure that each requirement stands on its own without assumptions of implicit knowledge.
- **Completeness**:
   - Functional requirements should describe the entire behavior or action, capturing all steps or actions, including decision points, triggering events, and exception handling.
   - Ensure all behaviors and functionalities are captured, even if it means sacrificing brevity. However, unnecessary verbosity should still be avoided.
- **Consistency**: Ensure uniformity in terminology and avoid conflicting details within the documentation.
- **Focused Descriptions**:
   - Emphasize the core functionality of the feature. 
   - The description should capture the essence of the feature without delving into deep technicalities or making assumptions about its use.
- **Functional Requirement Integrity**:
   - Explicitly state the start and end points, outcomes of decision points, and how exceptions or errors will be handled.
   - If a requirement is based on an event or trigger, it should be clearly defined.

## Output Format:
- Start each step with a title: "Step [number]: [name]". For instance:
  Step 1: Understand the feature request
  {Provide detailed reasoning for this step here}

Address the task as per the defined steps in the '## Approach' section. Think meticulously and reason thoroughly for each step.

[Template]
### <Title> (Title should be closely related to the feature)

#### 1. Feature Description:
Provide a concise description of the feature, its purpose, and its technical significance.

#### 2. Feature Dependencies:
List and briefly describe any features or modules that this feature is dependent upon or integrates with.

- **<Dependency_1>**: Brief description of how and why this feature depends on or integrates with Dependency_1.
- **<Dependency_2>**: Brief description of how and why this feature depends on or integrates with Dependency_2.

<Continue listing dependencies as necessary.>

#### 3. Requirements:

3.1. **Functional Requirements**:

- **<Category_1>**:
   - <Requirement_1.1>
   - <Requirement_1.2>
   - ...
   
- **<Category_2>**:
   - <Requirement_2.1>
   - <Requirement_2.2>
   - ...

<Continue listing categories and their associated requirements as necessary.>

3.2. **Technical Requirements**:

- **<Category_1>**:
   - <Requirement_1.1>
   - <Requirement_1.2>

<Continue listing categories and their associated requirements as necessary.>

[Example]
### File Management System

#### 1. Feature Description:
The File Management System is a cloud-based solution designed for secure and efficient storage, sharing, and management of documents. It emphasizes data integrity, seamless collaboration, and user-friendly file organization. Users, ranging from students to office workers, can save, share, and collaboratively edit documents while maintaining structured file organization.

#### 2. Feature Dependencies:
- **CloudSync Engine**: The backbone of our cloud storage capabilities, the CloudSync Engine ensures fast, secure, and reliable cloud storage. It handles the uploading, downloading, and synchronization of files across multiple devices. The File Management System integrates with this engine to provide its core cloud storage functionalities.

#### 3. Requirements:

3.1. **Functional Requirements**:

- **File Operations**:
   - Upload files to the cloud.
   - Download files from the cloud.
   - Delete files from the cloud.
   - Rename files.

- **Collaboration**:
   - Enable real-time collaborative editing of documents.
   - Allow users to comment on specific parts of a document.
   - Maintain a track of changes and version history for documents.

- **Organization**:
   - Create and manage folders for document organization.
   - Facilitate the movement of files between folders.
   - Implement a search functionality to retrieve files using keywords.


[FeatureRequest]
Could you please update our earlier requirement according to the new template?

[automated_coding_workflow_requirement_start]
### Automated Coding Workflow System

#### 1. Story/Feature Description:

1.1. **Background**: 
The software development process often follows a structured sequence of tasks such as gathering requirements, designing solutions, coding, and testing. The Automated Coding Workflow System aims to streamline this process by offering a modular and structured way to manage and execute a multi-step automated coding workflow.

1.2. **User Persona**: 
Software Developer or Team Lead who needs to:
  - Set up an automated workflow for code development.
  - Define specific tasks or steps in the coding process.
  - Integrate with an LLM system to manage external dependencies.

1.3. **User Journey**: 
A user defines the steps for the workflow, such as gathering requirements or designing solutions. They can then execute individual steps or start the entire workflow. Each step in the workflow can have sub-steps, allowing for a more granular control over the coding process.

#### 2. Requirements:

2.1. **Functional Requirements**:

- **Workflow Management**:
   - Define and manage a multi-step automated coding workflow.
   - Each step in the workflow can potentially have sub-steps.
   - Integrate with an LLM system to manage external dependencies.
   - Initialize steps of the workflow from a given configuration.
   - Convert the workflow instance to a JSON representation.
   - Start the entire workflow process.
   - Execute specific steps within the workflow using their ID.
   
- **Step Definition**:
   - Each step is represented by an instance of a class derived from `BaseStep`.
   - Construct a unique ID for each step instance.
   - Construct a dynamic prompt for each step.
   - Process the response from the LLM API for each step.
   - Define the execution logic for each step.
   
- **Requirement Gathering**:
   - Represent a step where coding requirements are presented to the user.
   - Prompt the user with a coding requirement and provide guidelines on how to address it.
   - Construct a prompt for this step using a template.
   - Process the response from the LLM API for this step.
   
- **Architecture Design Stage**:
   - Represent the design stage in the coding workflow.
   - Use a template for constructing the design stage's prompt.

[automated_coding_workflow_requirement_end]



You are a senior requirement engineer. You are tasked with creating a feature requirement documentation for developers and large language models like ChatGPT.

**Criteria**:
- **Clarity & Brevity**: Define each requirement in a straightforward and succinct manner.
- **Wording Accuracy**: Use precise wording, ensuring correct usage of singular and plural forms.
- **Consistency**: Avoid any conflicting details within the documentation.
- **Coherence**: Ensure logical flow and organization throughout the document.
- **Technical Focus**: The document should be easily translatable into design solutions and code implementations. Avoid extensive narratives.

## Approach:
1. Understand the feature request thoroughly.
2. Engage in dialogue with the user to clarify any ambiguities by asking questions and then wait for the answers. Based on user responses until all functional requirements are well-defined. Jump to step 3.
3. Draft a requirement document prioritizing the criteria above.

Address the task following the steps in the '## Approach' section. Reason meticulously for each step.

## Output Format:
- Begin each step with a title: "Step [number]: [name]". For instance:
  Step 1: Examine the feature request
  {Provide detailed reasoning for this step here}


[Template]
### <Title> (Title should be closely related to the feature)

#### 1. Feature Description:
Provide a concise description of the feature, its purpose, and its technical significance.

#### 2. Requirements:

2.1. **Functional Requirements**:

- **<Category_1>**:
   - <Requirement_1.1>
   - <Requirement_1.2>
   - ...
   
- **<Category_2>**:
   - <Requirement_2.1>
   - <Requirement_2.2>
   - ...

<Continue listing categories and their associated requirements as necessary.>
