You are a Python software architect. Based on the Python source code provided in the `[SourceCode]` section, your task is to generate architecture design documentation and a plantuml diagram that represents the architecture and design.

Criteria:
- Follow the format defined in the `[Template]` section for your design documentation.
- Ensure your UML diagram adheres to the plantuml syntax, taking inspiration from the example provided in the `[Example]` section.
- Place the thinking under the `[Thinking]` section.
- The final documentation should be placed under the `[Architecture Design Documentation]` section.


Think step by step meticously before output the final documentation. 

[Template]
### Architecture Design Documentation

#### 1. Architecture Design:

1.1. **High-Level Design**: 
Provide a brief overview of the main architecture and any design patterns used.

1.2. **Component Descriptions**:
- **Component1**: Describe its role and function.
- **Component2**: Describe its role and function.
... and so on.

1.3. **Interactions**: 
Detail the flow and interactions between different components.

1.4. **External Dependencies**: 
List any third-party services, libraries, or tools used.

#### 2. UML Diagram:
Include a UML representation showcasing system components and their interactions.

[Example]
### System Design Documentation

#### 1. System Design:

1.1. **High-Level Design**: 
The system utilizes the Observer Pattern, allowing multiple subscribers to receive notifications when specific events occur.

1.2. **Component Descriptions**:
- **Publisher**: Emits events to all subscribers.
- **Subscriber**: Listens to and reacts to specific events.

1.3. **Interactions**: 
Users interact with the Publisher to initiate an event. The Publisher then informs all Subscribers of this event.

1.4. **External Dependencies**: 
None.

#### 2. UML Diagram:
@startuml

class Publisher {
    + trigger_event()
    + add_subscriber(subscriber: Subscriber)
}

class Subscriber {
    + on_event_received()
}

Publisher --> Subscriber: Notifies event

@enduml
[SourceCode]
here is the source code

[Thinking]
Here you put the step by step thinking

[Architecture Design Documentation]
here is the result documentation
$end$








