Version 1: The role is Python architect. 
You are a Python architect. You are tasked with initiating the module code specification documentation for an already-implemented module. Given the context size constraints, you'll only be able to handle one file at a time. Use this file to start the documentation.

### Context:
- "Part-Of" components refer to elements likely part of the same module, but their code isn't provided in the `[SourceCode]` section.
- "Used-By" components describe elements supporting the current module, but their direct contribution might be unclear.

### Criteria:
- Base your documentation on the format defined by the example in the `[Example]` section.
- Present the documentation in a copiable block.

### Procedure:
1. **Review the Source Code**: Identify its main functionalities.
2. **Establish the File's Purpose and Dependencies**:
   - Understand the file's primary purpose within the overarching module.
   - Identify non-third-party dependencies within the same root package and answer:
      - What function might this dependency serve?
      - Does the suspected function of the dependency directly contribute to the module? If its functionality is unclear or its contribution to the module is indirect or not part of the module, label it as `Used-By`. Otherwise, label it as `Part-Of` and state its potential function. The response format should be: 'The dependency's functionality is __, and it serves as __. Label it as `Part-Of`. If its role is uncertain, label it as `Used-By`.

3. **Compose the Documentation**: Draft the design documentation based on previous insights, refer to the `[Example]` section for guidance.

Follow the steps defined in the 'Procedure' section. Take a deep breath, think step by step, and reason comprehensively for each step.



Version 2: The role is language model, but performing as a python software architect.

You are a large language model performing as a Python architect. You are tasked with initiating the module code specification documentation for an already-implemented module. Given the context size constraints, you'll only be able to handle one file at a time. Use this file to start the documentation.

### Context:
- "Part-Of" components refer to elements likely part of the same module, but their code isn't provided in the `[SourceCode]` section.
- "Used-By" components describe elements supporting the current module, but their direct contribution might be unclear.

### Criteria:
- Base your documentation on the format defined by the example between `$start$` and `$end$` tokens in the `[Example]` section
- Present the documentation in a copiable block.

### Procedure:
1. **Review the Source Code**: Identify its main functionalities.
2. **Establish the File's Purpose and Dependencies**:
   - Understand the file's primary purpose within the overarching module.
   - Identify non-third-party dependencies within the same root package and answer:
      - What function might this dependency serve?
      - Does the suspected function of the dependency directly contribute to the module? If its functionality is unclear or its contribution to the module is indirect or not part of the module, label it as `Used-By`. Otherwise, label it as `Part-Of` and state its potential function. The response format should be: 'The dependency's functionality is __, and it serves as __. Label it as `Part-Of`. If its role is uncertain, label it as `Used-By`.

3. **Compose the Documentation**: Draft the design documentation based on previous insights, refer to the `[Example]` section for guidance.

Follow the steps defined in the 'Procedure' section. Take a deep breath, think step by step, and reason comprehensively for each step.



[Example]
$start$
### Event Notification Module Code Specification

#### 1. Module Architecture Design:

##### 1.1. High-Level Design
This module is designed to implement the Observer Pattern, enabling multiple subscribers to be notified of specific events. The architecture ensures that event initiators and responders are decoupled, allowing for modularity and scalability.

##### 1.2. New Components Specifications

###### 1.2.1. Fully Defined

- **Publisher (New)**
    - **Purpose**: Acts as the broadcaster for events. It notifies all subscribers when an event occurs and logs them to the `EventDatabase`.
    - **Attributes**:
        - `subscribers_list`: List storing all the registered subscribers.
    - **Methods/APIs**:
        - `trigger_event()`: Initiates an event, logs it, and notifies subscribers.
        - `add_subscriber(subscriber: Subscriber)`: Adds a new subscriber to the subscribers list.
        - `log_event_to_database(event: Event)`: Logs the event to the `EventDatabase`.
    - **Interactions**: Connects with the `EventDatabase` to log events and communicates with `Subscriber` entities to notify them of events.

- **Subscriber (New) [relates Publisher]**
    - **Purpose**: Monitors and responds to particular events triggered by the `Publisher`.
    - **Attributes**:
        - `event_history`: List to store received events.
    - **Methods/APIs**:
        - `on_event_received(event: Event)`: Handles the event and stores it in `event_history`.
    - **Interactions**: Receives event notifications from the `Publisher`.

###### 1.2.2. Part-Of Components (Pending File Provision)

- **NotificationService (Part-Of) [relates Publisher]**
    - **Status Note**: _"This component is part of the module, but its detailed specifications will be supplemented upon provision of the relevant file."_
    - **Tentative Purpose**: This service might be responsible for sending notifications to external systems or users when specific events are triggered.

##### 1.3. Used-By Dependencies (Unchanged Components)

- **EventDatabase (Used-By)**
    - **Purpose**: A database component designed to store all triggered events.
    - **Interactions**: Stores events triggered by the `Publisher`.

##### 1.4. Interactions Overview
- Users or systems interface with the `Publisher` to initiate events.
- Once an event is triggered, the `Publisher` logs the event to the `EventDatabase`.
- The `Publisher` then notifies all `Subscriber` entities of this event.

##### 1.5. External Dependencies
- None.

#### 2. UML Diagram

- **UML Legend**:
  - Components marked with `(New)` are to be developed as part of this module.
  - Components marked with `(Part-Of)` are identified but not fully defined within the module.
  - Components marked with `(Used-By)` are pre-existing and are treated as dependencies within the module context.

```plaintext
@startuml

class "Publisher (New)" {
    + subscribers_list: List[Subscriber]
    + trigger_event()
    + add_subscriber(subscriber: Subscriber)
    + log_event_to_database(event: Event)
}

class "Subscriber (New)" {
    + event_history: List[Event]
    + on_event_received(event: Event)
}

class "EventDatabase (Used-By)" {
    + save_event(event: Event)
}

class "NotificationService (Part-Of)"

"Publisher (New)" --> "Subscriber (New)": Event notification
"Publisher (New)" --> "EventDatabase (Used-By)": Logs event
"Publisher (New)" --> "NotificationService (Part-Of)": Possible notification

@enduml
```
$end$


[SourceCode]
$start$
"""
base_llm_integration.py: Contains the BaseLLMIntegration abstract base class for Language Model integrations.
The BaseLLMIntegration class now supports an optional project configuration (a dictionary) as an attribute.
"""

from abc import ABC, abstractmethod


class BaseLLMIntegration(ABC):
    """
    BaseLLMIntegration is an abstract base class that defines the common interface for all LLM integrations.
    It now includes an optional config attribute for providing project configurations.
    """
    
    @abstractmethod
    def process_input_messages(self, input_messages):
        """
        Process a list of input messages and return the LLM's responses.

        :param input_messages: List of input messages to be processed.
        :type input_messages: list
        """
        pass
$end$


Second Prompt: Refining and Expanding the Design Documentation

You are a Python architect. Your task is to refine and expand the feature code design documentation provided in the `[InitialFeatureCodeDesign]` for an already-implemented feature. Given the context size constraints, you can handle one file at a time. Use the provided file to update the initial documentation. The code is given in the `[SourceCode]` section.

### Context:
- The goal is to further develop the documentation, potentially transitioning components from the "Placeholder" section to "Fully Defined" if the associated code is now provided.
- Ensure the updated documentation maintains consistency with the initial one.

### Criteria:
- The revised documentation must adhere to the `Feature Code Design Documentation Template` provided in the `[Template]` section.
- The updated documentation should be presented in a copiable code block.

### Procedure:
1. **Review the Source Code**:
   - Scrutinize the code file in the `[SourceCode]` section, identifying primary functionalities and structures.

2. **Determine the File's Main Component**:
   - Establish the main role of the file within the feature's broader context.
   - If the main component of the file matches a "Part-Of" in the given documentation, move it to the "Fully Defined" section and supply its complete details.

3. **Assess Dependencies**:
   - Identify non-third-party dependencies within the same root package and answer:
      - Is the component already defined as "Fully Defined" in the given documentation. If yes, no further action is needed.
      - What function might this dependency serve?
      - Does the suspected function of the dependency directly contribute to the feature? If its functionality is unclear or its contribution to the feature is indirect or not part of the feature, label it as `Used-By`. Otherwise, label it as `Part-Of` and state its potential function. The response format should be: 'The dependency's functionality is __, and it serves as __. Label it as `Part-Of`. If its role is uncertain, label it as `Used-By`.
4. **Update and Refine the Documentation**: Based on the insights from previous analysis, update the existing design documentation, refer to the `[Example]` section for guidance.


You are a Python architect. You're tasked with refining a given initial feature code design documentation in the `[InitialFeatureDesign]` based on the additional given source code in the `[SourceCode]` section.

### Criteria:
- Ensure the refined documentation aligns with the initial one.
- Follow the `Feature Code Design Documentation Template` provided in the `[Template]` section.
- Present the refined documentation in a copiable code block. Do not use placeholders to ensure easy direct overritting.

1. **Review the `[SourceCode]` Section**: Understand its primary functionalities.
2. **Identify the File's Role**: If it aligns with any "Part-Of" in the documentation, move it to "Fully Defined" and detail it.
3. **Check Dependencies**: For non-third-party dependencies:
   - If it's already "Fully Defined", skip.
   - Otherwise, determine its function.
   - Label as `Part-Of` if it directly contributes to the feature, detailing its function. If unclear, label as `Used-By`.
4. **Refine the Documentation**: Update the given design documentation with the insights gained from previous steps. Use example provided by `[Example]` for guidance.

Follow the steps defined in 'Procedure' section. Take a deep breath, think step by step and reason comprehensively for each step.


[Template]


[Example]


[InitialFeatureDesign]


[SourceCode]


Well done. Thank you. Could you please give me back the complete updated documentation, so that the Agent program can directly override the existing one 
in database?





