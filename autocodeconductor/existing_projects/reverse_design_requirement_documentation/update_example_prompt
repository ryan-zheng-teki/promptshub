You are a large language model performing as a software architect tasked with updating an existing module code design example. The original template, from which the example was derived, has undergone changes, and it is crucial to align the example with the updated template while ensuring its functionality.

**Criteria**:
1. Reflect the changes made in the updated template accurately in the example.
2. Preserve the coherence and functionality of the example.
3. Avoid unnecessary overhauls; the primary focus should be alignment with the template.

**Procedure**:
1. Thoroughly study the updated template provided in the `[Template]` section to grasp its format and structure.
2. Cross-check the existing module code design example given in the `[Example]` section against the updated template.
3. Pinpoint the segments in the example that need adjustments based on the template's updates.
4. Implement the required changes in the example while maintaining its overall coherence. And present the implemented new example in a copiable code block.


[Template]:
### <Title> (Title should be closely related to the module, such as xxx Module Code Specification)
#### 1. Module Architecture Design:

##### 1.1. High-Level Design
- Brief overview of the primary module architecture.
- Design patterns, principles, or structures that will be applied.

##### 1.2. New Components Specifications

###### 1.2.1. Fully Defined
For each component:
  - **Name (New) [extends/relates OtherComponentName]** (if applicable)
    - **Purpose**: Clear description of the component's role and functionality within the module.
    - **Attributes**:
      - `attribute_name`: Short description of the attribute and its significance.
      ... Continue for all attributes.
    - **Methods/APIs**:
      - `method_name()`: Describe the method's purpose, expected input, and output.
      ... Continue for all methods.
    - **Interactions**: Describe how this component interacts with other module components.

... Continue for all fully defined new components.

###### 1.2.2. Part-Of Components (Pending File Provision)
For each component:
  - **Name (Part-Of) [extends/relates OtherComponentName]** (if applicable)
    - **Status Note**: _"This component is part of the module, but its detailed specifications will be supplemented upon provision of the relevant file."_
    - **Tentative Purpose**: A general understanding or assumption about the component's role and tasks based on current knowledge.

... Continue for placeholders.

##### 1.3. Used-By Dependencies (Unchanged Components)

For each component:
  - **Name (Used-By)**
    - **Purpose**: Clear description of the component's role and functionality within the module.
    - **Interactions**: Describe its interactions with new module components, if any.

... Continue for all dependencies.

##### 1.4. Interactions Overview
- A broader perspective on how new module components interact with each other and with existing components.
- Highlight any specific sequence of operations or workflows within the module.

##### 1.5. External Dependencies
- List any third-party libraries, services, or tools that the module will use.
- Specific versions or configurations to be aware of.

#### 2. UML Diagram

- A UML diagram showcasing the relationships and interactions between module components.
- **UML Legend**:
  - Components marked with `(New)` are to be developed as part of this module.
  - Components marked with `(Part-Of)` are identified but not fully defined within the module.
  - Components marked with `(Used-By)` are pre-existing and are treated as dependencies within the module context.

@startuml
... UML content here ...
@enduml


[Example]
### Feature Code Design Documentation:

#### 1. Code Architecture Design:

1.1. **High-Level Design**: 
The enhancement introduces a versioning mechanism for prompts designed for entities or classes that leverage prompts to communicate with Large Language Models (LLMs). By integrating the `PromptVersioningMixin`, entities, such as workflow steps or any other component interfacing with LLMs, can store, manage, and refine versioned prompts in a database. This ensures consistent and optimized interactions with LLMs, capitalizing on the most effective prompt versions. The Repository Pattern from previous features is utilized to facilitate smooth database interactions.

#### 2. Component Modifications:

2.1. **New Components**:

- **PromptVersioningMixin**: 
  - *Purpose*: A mixin class offering versioning capabilities with integrated database interactions.
  - *Attributes*: 
    - `current_prompt: str`: The in-memory cached value of the current effective prompt for the entity. This value is initially fetched from the database, and then it's used for subsequent operations to reduce database accesses. This attribute is updated whenever a new current effective version is set.
    - `default_prompt: str`: The default prompt intrinsic to the entity's code.
    - `repository: PromptVersionRepository`: An instance of the repository to handle database operations related to versioning.
  - *Abstract Properties*:
    - `prompt_name: str`: An abstract property that mandates implementing classes to provide a unique identifier for their prompts.
  - *Methods*: 
    - `add_version(prompt: str)`: Creates and stores a new version of the prompt. If the number of versions surpasses the limit (4), it deletes the oldest version.
    - `get_version(version_no: int)`: Retrieves the content of a specified prompt version.
    - `set_current_effective_version(version_no: int)`: Sets a specific version as the current effective prompt. This method updates the `current_prompt` attribute with the content of the specified version and marks this version as the effective one in the database.
    - `get_current_effective_prompt()`: Fetches the content of the current effective prompt from the database. If no effective prompt exists for the entity, it initializes the database with the entity's intrinsic default prompt, designating it as version 'v1', and then returns this default prompt. The method should handle potential errors gracefully, ensuring that a prompt is always returned.
    - `load_latest_version()`: Retrieves the content of the latest created prompt version.

- **VersionedPrompt**:
  - *Purpose*: Represents the state of a prompt at a particular version in-memory.
  - *Attributes*: 
    - `version_no: int`: The version number.
    - `prompt_content: str`: The content of the prompt for that version.

- **PromptVersionModel (extends BaseModel)**:
  - *Purpose*: Represents the database model for storing versioned prompts.
  - *Attributes*: 
    - `prompt_name: String`: Identifier for the prompt.
    - `version_no: Integer`: Version number.
    - `prompt_content: Text`: Content of the prompt.
    - `is_current_effective: Boolean`: Indicates if this version is the current effective prompt.
    (Note: The attributes `created_at` and `updated_at` are inherited from `BaseModel` and are therefore not explicitly defined here.)

- **PromptVersionRepository (extends BaseRepository)**:
  - *Purpose*: Offers CRUD operations for `PromptVersionModel` and manages version-specific operations.
  - *Methods*: 
    - `create_version(prompt_version: PromptVersionModel)`: Stores a new prompt version.
    - `get_version(prompt_name: String, version_no: int)`: Fetches a specific version of a prompt.
    - `get_current_effective_version(prompt_name: String)`: Retrieves the current effective prompt for an entity.
    - `get_latest_created_version(prompt_name: String)`: Retrieves the most recently created prompt version.
    - `delete_version(prompt_name: String, version_no: int)`: Deletes a specific version.
    - `delete_oldest_version(prompt_name: String)`: Deletes the oldest version when the limit is surpassed.

2.2. **Updated Components**:

- **BaseStep**:
  - *Modification*: Extend from `PromptVersioningMixin`.
  - *Purpose*: Inherits versioning capabilities with database integration. The static prompt template from `BaseStep` is removed, and prompts are dynamically derived based on the version.

2.3. **Unchanged Components**:

- **BaseModel**: 
  - *Description*: The foundational model class for database entities.
  
- **BaseRepository**: 
  - *Description*: Provides generic CRUD operations.

#### 3. Interactions:

3.1. **Component Interactions**:

- Entities augmented with `PromptVersioningMixin` will possess versioning capabilities with database operations.
- `PromptVersioningMixin` will interface with `PromptVersionRepository` for database interactions.

#### 4. External Dependencies: 

- **SQLAlchemy**: ORM tool facilitating database operations.
- **Alembic**: For database migration and versioning.

#### 5. UML Diagram:

@startuml

package "Versioned Prompts Structure" {

class "PromptVersioningMixin (New)"

 {
    + add_version(prompt: str)
    + get_version(version_no: int): str
    + set_current_effective_version(version_no: int)
    + get_current_effective_prompt(): str
    + load_latest_version(): str
    + current_prompt: str
    + default_prompt: str
    + repository: PromptVersionRepository
    + prompt_name: str (Abstract Property)
}

class "VersionedPrompt (New)" {
    + version_no
    + prompt_content
}

class "PromptVersionModel (New, extends BaseModel)" {
    + prompt_name: String
    + version_no: Integer
    + prompt_content: Text
    + is_current_effective: Boolean
    + created_at: DateTime
}

class "PromptVersionRepository (New, extends BaseRepository)" {
    + create_version(prompt_version: PromptVersionModel): PromptVersionModel
    + get_version(prompt_name: String, version_no: int): PromptVersionModel
    + get_current_effective_version(prompt_name: String): PromptVersionModel
    + get_latest_created_version(prompt_name: String): PromptVersionModel
    + delete_version(prompt_name: String, version_no: int)
    + delete_oldest_version(prompt_name: String)
}

"PromptVersioningMixin (New)" o-- "VersionedPrompt (New)"
"PromptVersioningMixin (New)" o-- "PromptVersionRepository (New)"
"PromptVersionModel (New)" --|> "BaseModel"
"PromptVersionRepository (New)" --|> "BaseRepository"

}

@enduml



Please follow the steps defined in the Procedure. Ensure meticulous step-by-step thinking and comprehensive reasoning for each step.


