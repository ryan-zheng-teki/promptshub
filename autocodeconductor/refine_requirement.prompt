You are a senior requirements engineer. An existing requirement is provided in the `[Requirement]` section, marked by the `$start$` and `$end$` tokens. Additionally, a user request will be available in the `[Request]` section. Your task is to refine the given requirement according to the user request.

# Context:
The target users for the resulting requirement document are developers and large language models like ChatGPT. The goal is to provide a comprehensive yet concise description that aids in direct code design and implementation. If no other explicit feature dependencies are stated, use "None" for the feature dependencies.

## Criteria:
- **Effectiveness**: The requirement should directly translate into design solutions and code implementations.
  
- **Clarity & Precision**:
   - Each requirement should be clear, specific, and free from ambiguity.
   - Use precise terminology that conveys the exact meaning, ensuring correct usage of singular and plural forms.
   - Avoid vague terms and ensure that each requirement stands on its own without assumptions of implicit knowledge.

- **Completeness**:
   - Functional requirements should describe the entire behavior or action, capturing all steps or actions, including decision points, triggering events, and exception handling.
   - Ensure all behaviors and functionalities are captured, even if it means sacrificing brevity. However, unnecessary verbosity should still be avoided.

- **Consistency**: Ensure uniformity in terminology and avoid conflicting details within the documentation.

- **Focused Descriptions**:
   - Emphasize the core functionality of the feature. 
   - The description should capture the essence of the feature without delving into deep technicalities or making assumptions about its use.

- **Functional Requirement Integrity**:
   - Explicitly state the start and end points, outcomes of decision points, and how exceptions or errors will be handled.
   - If a requirement is based on an event or trigger, it should be clearly defined.

## Approach:
1. Understand the provided requirement.
2. Evaluate the user's request against the existing requirement. Analyze if the request is already covered. If not, proceed to the next step.
3. Check for ambiguities or unclear aspects in the user's request. If there are any, ask questions to clarify them.
4. Wait for the user's answer to ensure all questions and ambiguities are addressed.
5. Refine the requirement based on the user's clarified request.

## Output Format:
- Format each step with: "Step [number]: [name]". Example:
  Step 1: Analyze the existing requirement
  {Provide output for this step here}


[Requirement]
$start$
### Automated Coding Workflow System

#### 1. Feature Description:
The Automated Coding Workflow System offers a modular and structured way to manage and execute a multi-step automated coding workflow. The primary users are Software Developers or Team Leads, aiming to streamline the software development process that typically includes tasks like gathering requirements, designing solutions, coding, and testing.

#### 2. Feature Dependencies:
- **LLM System**: The Automated Coding Workflow System integrates with an LLM system to manage external dependencies.

#### 3. Requirements:

3.1. **Functional Requirements**:

- **Workflow Management**:
   - Define and manage a multi-step automated coding workflow.
   - Each step in the workflow can potentially have sub-steps.
   - Integrate with an LLM system to manage external dependencies.
   - Initialize steps of the workflow from a given configuration.
   - Convert the workflow instance to a JSON representation.
   - Start the entire workflow process.
   - Execute specific steps within the workflow using their ID.
   
- **Step Definition**:
   - Each step is represented by an instance of a class derived from `BaseStep`.
   - Construct a unique ID for each step instance.
   - Construct a dynamic prompt for each step.
   - Process the response from the LLM API for each step.
   - Define the execution logic for each step.
   
- **Requirement Gathering**:
   - Represent a step where coding requirements are presented to the user.
   - Prompt the user with a coding requirement and provide guidelines on how to address it.
   - Construct a prompt for this step using a template.
   - Process the response from the LLM API for this step.
   
- **Architecture Design Stage**:
   - Represent the design stage in the coding workflow.
   - Use a template for constructing the design stage's prompt.

3.2. **Technical Requirements**:

(No technical requirements were provided in the initial document. This section can be populated when such requirements are defined.)
$end$

[Request]
$start$
We have updated our requriement template. The original requirement should be updated as well. 
$end$



[Template]
### <Title> (Title should be closely related to the feature)

#### 1. Feature Description:
Provide a concise description of the feature, its purpose, and its technical significance.

#### 2. Feature Dependencies:
List and briefly describe any features or modules that this feature is dependent upon or integrates with.

- **<Dependency_1>**: Brief description of how and why this feature depends on or integrates with Dependency_1.
- **<Dependency_2>**: Brief description of how and why this feature depends on or integrates with Dependency_2.

<Continue listing dependencies as necessary.>

#### 3. How To Use This Feature:
Detail the steps or guidelines on how other entities or components can utilize or integrate with this feature.

- <Step/Guideline 1>
- <Step/Guideline 2>
- ...

<Continue listing steps/guidelines as necessary.>

#### 4. Requirements:

4.1. **Functional Requirements**:

- **<Category_1>**:
   - <Requirement_1.1>
   - <Requirement_1.2>
   - ...
   
- **<Category_2>**:
   - <Requirement_2.1>
   - <Requirement_2.2>
   - ...

<Continue listing categories and their associated requirements as necessary.>

4.2. **Technical Requirements**:

- **<Category_1>**:
   - <Requirement_1.1>
   - <Requirement_1.2>

<Continue listing categories and their associated requirements as necessary.>
