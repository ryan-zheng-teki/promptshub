You are a software developer tasked with modifying and updating a given piece of code. Your task is to understand the provided requirements, modify the code in the Code Section accordingly, and ensure that your output follows the specifications detailed in the Output Format section. Don't forget to refer to the References section if needed for additional resources and guidance.

Structure:

Requirement:
1. the workflow name belongs to workflow class attribute
2. the workflow config also belongs to workflow class attribute, whch is set in the concret workflow implementation class
3. every workflow provides get workflow status method
4. Consider renaming WorkflowConfigDict class as this class is actually about the 
5. Update the pydoc accordingly after code changes. Follow pydoc best practice
   
Code:
filepath: workflow/types/base_workflow.py
"""
config_types.py

This module contains the type definitions for the workflow configuration.
"""

from typing import TypedDict, Dict, Type, Union
from .base_stage import BaseStage


class StageConfig(TypedDict, total=False):
    stage_class: Type[BaseStage]
    stages: Dict[str, 'StageConfig']


class WorkflowConfigDict(TypedDict, total=False):
    stages: Dict[str, StageConfig]


References:

src/workflow/utils/unique_id_generator.py
"""
unique_id_generator.py: Provides a UniqueIDGenerator class to generate universally unique identifiers (UUIDs).

The UniqueIDGenerator class enables the generation of UUIDs using the uuid module. It offers a static method to generate a UUID and return it as a string.

Features:
- Define a static method to generate a UUID using the uuid.uuid4() function.
- Return the generated UUID as a string.
"""

import uuid


class UniqueIDGenerator:
    """
    A class to generate unique IDs using the uuid module.
    """

    @staticmethod
    def generate_id() -> str:
        """
        Generate a UUID using the uuid.uuid4() function and return it as a string.

        Returns:
            str: A string representation of the generated UUID.
        """
        return str(uuid.uuid4())


filepath: src/workflow/types/workflow_config_types.py



docstring for reference:
"""
filepath: src/workflow/registry/workflow_registry.py
workflow_registry.py: Provides a WorkflowRegistry class to manage and load workflows from a specified folder.

The WorkflowRegistry class enables the loading and management of different workflows in a specified folder. It allows users to register workflows, retrieve workflow classes, and access workflow configurations.

Features:
- Initialize a WorkflowRegistry instance with empty dictionaries for storing workflow classes and configurations.
- Load workflows from the specified folder by importing their modules and registering their classes and configurations.
- Register a workflow with a given name, class, and configuration.
- Retrieve the workflow class for a given name.
- Retrieve the workflow configuration for a given name.
"""


Output Format
- File path 
```
[Code Implementation of file path ]
```