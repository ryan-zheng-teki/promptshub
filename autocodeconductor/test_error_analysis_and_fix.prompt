You are a top python software engineer. In this task, you will perform an in-depth analysis of a provided error message and the associated source code. Your task is to identify the root cause of the error, propose a solution, and then present the corrected version of the code. 

Please follow these standards:

1. Start by examining the error message, which you will find in the `[Error]` section. Use your analysis of this error message to generate an initial hypothesis about its cause. 

2. Subsequently, refer to the `[CodeReferences]` section, examine the referenced codes step by step. Locate where might be causing the error.

3. In your response, clearly articulate the reasoning process behind each step of your analysis. Use the following structure as a guide: 

    "The error message indicates that the issue is caused by ____. Looking at the source code, we can see that the code performs ____, ____, and ____. These actions result in ____ , which is likely the cause of the reported error."

4. After identifying the source of the error, propose and implement a solution within the source code. Explaining why each change is necessary and how it resolves the identified issue.

5. Finally, present the modified code in a copyable code block. Follow Python docstring best practices for all updated codes. Always include a file-level docstring at the beginning of the file.


Ensure your explanation is thorough and that the reasoning process behind your analysis is clearly conveyed. 

Think step by step, reason comphrehensively to approach the task.

[Error]
```
=================================== FAILURES ===================================
____________________ test_should_add_workspace_successfully ____________________

    def test_should_add_workspace_successfully():
        """
        Test the add_workspace method should add workspace successfully.
        """
        # Arrange
        temp_dir = tempfile.mkdtemp()
        os.mkdir(os.path.join(temp_dir, 'test_directory'))  # Create a subdirectory in the temporary directory
    
        service = WorkspaceService()
    
        # Act
>       tree = service.add_workspace(temp_dir)

tests/unit_tests/workspaces/test_workspace_service.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.workspaces.workspace_service.WorkspaceService object at 0x7f7c523fbd90>
workspace_root_path = '/tmp/tmp50mq40cn'

    def add_workspace(self, workspace_root_path: str) -> TreeNode:
        """
        Adds a workspace setting to the workspace settings and builds the directory tree of the workspace.
    
        Args:
            workspace_root_path (str): The root path of the workspace.
    
        Returns:
            TreeNode: The root TreeNode of the directory tree.
        """
        workspace_setting = self.add_workspace_setting(workspace_root_path)
        directory_tree = self.build_workspace_directory_tree(workspace_root_path)
>       workspace_setting.set_directory_tree(WorkspaceDirectoryTree(directory_tree))
E       AttributeError: 'WorkspaceSetting' object has no attribute 'set_directory_tree'

src/workspaces/workspace_service.py:87: AttributeError
```

[CodeReferences]
File: src/workspaces/workspace_setting.py
```


        


Verion 2: Only think step by step
You are senior python software engineer. In this task, you will perform an in-depth analysis of a provided error message in the `[Error]` section and the associated source code in the `[Codes]` section. 

Follow the standards:

1. Start by examining the errors in the `[Error]` section. Use your analysis of this error message to generate an initial hypothesis about its cause.

2. Subsequently, refer to the `[Codes]` section, explain the referenced codes step by step, and try to identify where in the source code might be causing the error. 

3. In your response, clearly articulate the reasoning process behind each step of your analysis. Use the following structure as a guide:

  Case 1: Able to find where the errors are after analysis:
    "The error message indicates that the issue is possibly caused by ____. Looking at the source code, we can see that the code performs ____, ____, and ____. These actions result in ____, which is likely the cause of the reported error." 
  Case 2: Not able to find out where errors are:
    "The error message indicates that the issue is possibly caused by ____. Looking at the source code, we can see that the code performs ____, ____, and ____. The source code seems to be working correctly. I will need to add additional debug messages to for further analysis.

4. Based on the different case from step 3. For case 1: if confidently identifying the source of the error, propose and implement a solution. Explaining why each change is necessary and how it resolves the identified issue. 
  For Case 2: add your suggested logging to source code for further analaysis

Think step by step, ensure your explanation is thorough, and that the reasoning process behind your analysis is comprehensive. Conclude with the complete updated code in a code block.


[Error]
```
--host 127.0.0.1 --port 8000
Traceback (most recent call last):
  File "/home/ryan/miniHDD/Learning/chatgpt/autobyteus/src/app.py", line 29, in <module>
    from src.startup_mode.graphql_server_mode import graphql_server_mode
  File "/home/ryan/miniHDD/Learning/chatgpt/autobyteus/src/startup_mode/graphql_server_mode.py", line 4, in <module>
    from src.api.graphql.schema import schema
  File "/home/ryan/miniHDD/Learning/chatgpt/autobyteus/src/api/graphql/schema.py", line 13, in <module>
    class Query(workspace_queries):
TypeError: module() takes at most 2 arguments (3 given)

```

[Codes]
```
"""
Module: workspace_queries

This module provides GraphQL queries related to workspace operations.
"""

import json
import logging
from typing import List
import strawberry
from strawberry.scalars import JSON
from src.automated_coding_workflow.automated_coding_workflow import AutomatedCodingWorkflow
from src.semantic_code.search.search_result import SearchResult
from src.semantic_code.search.search_service import SearchService
from src.workspaces.workspace_manager import WorkspaceManager
from src.workspaces.workspace_tools_service import WorkspaceToolsService

# Singleton instances
workspace_manager = WorkspaceManager()
workspace_tools_service = WorkspaceToolsService()
search_service = SearchService()  # Instantiate SearchService

logger = logging.getLogger(__name__)

@strawberry.type
class WorkspaceTool:
    name: str
    prompt_template: str

@strawberry.type
class Query:
    @strawberry.field
    def workflow_config(self, workspace_root_path: str) -> JSON:
        """
        Fetches the configuration for the workflow associated with the provided workspace.

        Args:
            workspace_root_path (str): The root path of the workspace.

        Returns:
            JSON: The configuration of the workflow.
        """
        workflow: AutomatedCodingWorkflow = workspace_manager.workflows.get(workspace_root_path)
        if not workflow:
            return json.dumps({"error": "Workspace not found or workflow not initialized"})

        return workflow.to_json()

    @strawberry.field
    def search_code_entities(self, query: str) -> JSON:
        """
        Searches for relevant code entities based on the provided query.

        Args:
            query (str): The search query.

        Returns:
            JSON: The search results.
        """
        try:
            search_result: SearchResult = search_service.search(query)
            return search_result.to_json()
        except Exception as e:
            error_message = f"Error while searching code entities: {str(e)}"
            logger.error(error_message)
            return json.dumps({"error": error_message})



    @strawberry.field
    def get_available_workspace_tools(self, workspace_root_path: str) -> List[WorkspaceTool]:
        try:
            tools_data = workspace_tools_service.get_available_tools(workspace_root_path)
            return [WorkspaceTool(name=tool_data.name, prompt_template=tool_data.prompt_template) for tool_data in tools_data]
        except Exception as e:
            raise Exception(f"Failed to fetch available workspace tools: {str(e)}")
```
