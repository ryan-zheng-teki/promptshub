You are a top python software engineer. In this task, you will perform an in-depth analysis of a provided error message and the associated source code. Your task is to identify the root cause of the error, propose a solution, and then present the corrected version of the code. 

Please follow these standards:

1. Start by examining the error message, which you will find in the `[Error]` section. Use your analysis of this error message to generate an initial hypothesis about its cause. 

2. Subsequently, refer to the `[CodeReferences]` section, examining the source code thoroughly and progressively. Your analysis should be done step by step to see which part of code caused the error.

3. In your response, clearly articulate the reasoning process behind each step of your analysis. Use the following structure as a guide: 

    "The error message indicates that the issue is caused by ____. Looking at the source code, we can see that the code performs ____, ____, and ____. These actions result in ____ , which is likely the cause of the reported error."

4. After identifying the source of the error, propose and implement a solution within the source code. Explaining why each change is necessary and how it resolves the identified issue.

5. Finally, present the modified code in a copyable code block, ensuring the output is formatted appropriately for easy replication.


Ensure your explanation is thorough and that the reasoning process behind your analysis is clearly conveyed. Remember, the aim is not only to fix the error but also to provide a comprehensive understanding of the issue and its resolution.

Please approach the task by thinking step by step, using high granularity in your reasoning.
[Error]
```
==================================== ERRORS ====================================
_ ERROR collecting tests/integration_tests/semantic_code/index/test_index_service_integration.py _
tests/integration_tests/semantic_code/index/test_index_service_integration.py:9: in <module>
    from src.semantic_code.index.index_service import IndexService
src/semantic_code/index/index_service.py:14: in <module>
    from src.semantic_code.embedding.embedding_creator_factory import get_embedding_creator
src/semantic_code/embedding/embedding_creator_factory.py:11: in <module>
    from src.semantic_code.embedding.openai_embedding_creator import OpenAIEmbeddingCreator
src/semantic_code/embedding/openai_embedding_creator.py:18: in <module>
    class OpenAIEmbeddingCreator(BaseEmbeddingCreator, metaclass=SingletonMeta):
E   TypeError: metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases
-------------- generated xml file: /tmp/tmp-12228uBtTkVcNBX90.xml --------------
=========================== short test summary info ============================
ERROR tests/integration_tests/semantic_code/index/test_index_service_integration.py
```

[CodeReferences]
```
"""
openai_embedding_creator.py

This module contains the OpenAIEmbeddingCreator class, which is responsible for creating embeddings
using OpenAI's API. It reads the API key and model name from a configuration file and utilizes
OpenAI's API to generate embeddings for the input text.
"""

import openai
import numpy as np
import logging
from src.semantic_code.embedding.base_embedding_creator import BaseEmbeddingCreator
from src.config.config import config
from src.singleton import SingletonMeta

logger = logging.getLogger(__name__)

class OpenAIEmbeddingCreator(BaseEmbeddingCreator, metaclass=SingletonMeta):
    """
    OpenAIEmbeddingCreator is a concrete class that extends the BaseEmbeddingCreator class.
    This class is responsible for generating embeddings using OpenAI's API.
    """

    def __init__(self):
        """
        Initialize the OpenAIEmbeddingCreator class by reading the API key and model name
        from the configuration file.
        """
        self.api_key = config.get('OPEN_AI_API_KEY')
        self.model_name = config.get('OPEN_AI_EMBEDDING_MODEL', default="text-embedding-ada-002")
        logger.info("OpenAIEmbeddingCreator using embedding model %s", self.model_name)
    ...
```

Verion 2: Only think step by step
You are a top python software engineer. In this task, you will perform an in-depth analysis of a provided error message in the `[Error]` section and the associated source code in the `[CodeReferences]` section. 

Follow the following approach:
1. Identify the root cause of the error by carefully examining the source code.
2. Explain why the source code caused the error, providing a thorough explanation.
3. Propose a solution either from the test or the source code. Make the best judgement
4. Present the corrected version of the code.- 

Think step by step, and reason to the very details to address the task.

[Error]
```
    def test_traverse_returns_correct_nested_dictionary():
        # Given a mocked filesystem with the following structure:
        # - root
        #   - dir1
        #     - file1
        #   - dir2
        #     - dir3
        #       - file2
        #   - file3
        mock_filesystem = {
            "root": {
                "dir1": {"file1": None},
                "dir2": {"dir3": {"file2": None}},
                "file3": None,
            },
        }
    
        with patch("os.listdir", side_effect=lambda path: mock_filesystem[path].keys()), patch(
            "os.path.isdir", side_effect=lambda path: path in mock_filesystem
        ):
            dt = DirectoryTraversal()
            # When I traverse the root directory
            result = dt.traverse("root")
    
        # Then I expect to get the same structure as the mock_filesystem
>       assert result == mock_filesystem["root"]
E       AssertionError: assert {'dir1': None...'file3': None} == {'dir1': {'fi...'file3': None}
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'dir1': None} != {'dir1': {'file1': None}}
E         {'dir2': None} != {'dir2': {'dir3': {'file2': None}}}
E         Use -v to get more diff

tests/unit_tests/source_code_tree/test_directory_traversal.py:41: AssertionError
```

[CodeReferences]
```
import os
from typing import Dict, Optional, Union

class DirectoryTraversal:
    """
    A class used to traverse directories and represent the directory structure as a nested dictionary.

    Methods
    -------
    traverse(folder_path: str, level: int = 0) -> Dict[str, Union[str, Dict]]:
        Traverses a specified directory and returns its structure as a nested dictionary.
    """

    def traverse(self, folder_path: str, level: int = 0) -> Dict[str, Union[str, Dict]]:
        """
        Traverses a specified directory and returns its structure as a nested dictionary.

        Parameters:
        ----------
        folder_path : str
            The path of the directory to be traversed.
        level : int, optional
            The current level of traversal, used for recursion (default is 0).

        Returns:
        -------
        Dict[str, Union[str, Dict]]
            The directory structure as a nested dictionary, where keys are directory/file names and values are 
            either other dictionaries (for directories) or None (for files).
        """

        tree_structure = {}
        directory_contents = os.listdir(folder_path)

        for item in directory_contents:
            item_path = os.path.join(folder_path, item)
            if os.path.isdir(item_path):
                tree_structure[item] = self.traverse(item_path, level + 1)
            else:
                tree_structure[item] = None  # or any other value representing a file

        return tree_structure

```
