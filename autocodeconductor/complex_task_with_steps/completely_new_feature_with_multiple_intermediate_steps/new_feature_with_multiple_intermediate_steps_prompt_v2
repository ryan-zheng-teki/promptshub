As a top python software developer, you are tasked with create code designs for the requirement described in the `[Requirement]` section.

Follow the steps below, each accompanied by a title and potentially a description:

1. **Articulate Thoroughly Your Understanding Of The Requirement**

2. **Identify Key Components:**
    Identify the main components or entities needed to fulfill the requirements. Don't worry about specific classes or functions yet, just think in terms of high-level components or services.

3. **Define Component Interactions:**
    Once you've identified the key components, think about how they will interact with each other, as interactions serves for interfaces design later on. 
   
4. **Recall From Existing Knowledge**
   - Consider your past experience and knowledge of similar tasks. Think what kind of design patterns are typically used in such cases.
  
5. **Create The Initial Code Designs:**
   - Combine the potential design patterns from Step 4 with the interactions identified in Step 3 to create an initial code design.Only outline files paths, classes, services, functions etc you will create, don't bother with detailed implementations at this stage. Follow the best naming practices for files as well. Each interface should contain detailed docstring.
  
6. **Simulate Data Flow with Examples:**
    - Create a realistic example to simulate the execution of your code design from Step 5. This example tries to validate the code designs via real data flow.For instance:
    ```
    Example:

    // First, create a dummy user object to simulate user input.
    User user = new User("JohnDoe", "john.doe@example.com");

    // Now, create an authentication component and pass the user object to it.
    AuthenticationComponent authComponent = new AuthenticationComponent();
    authComponent.authenticate(user);

    // Once authenticated, simulate interaction with other components such as retrieving data.
    DataRetrievalComponent dataComponent = new DataRetrievalComponent();
    Data data = dataComponent.getDataForUser(user);

    // This provides insight into how components would interact and data would flow in a real-world scenario.
    ```
7. **Check the current code design with SOLID principles and best practices**
   - At this stage, you need to first share your knowledge of clean code best practices, then judge whether the code design follows best practices. If no, then propose potential improvements.

8.  ** Create Subtasks for implmeentation **
   - As we didn't provide the implmentation of interfaces. In this step, create subtasks for implementation.
  
Think very carefully for each step to progressively reach high quality code designs.

[Requirement]
```
II want to create different tools. One tool is crawl the content given URL.
Another tool is to search the web using google by using pupperteer given the query

How it works: User gives a query and use the google search tool. Open the link by one by one. And get the content on that page. No need for deep crawling.

This task is only about creating code design of the tools.Not about creating the agent program.
```