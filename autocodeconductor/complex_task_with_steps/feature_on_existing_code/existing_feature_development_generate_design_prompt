Version 1: Wihtout very detailed steps, only best practices, and think carefully, and output format. (This think step by step carefully this is a magic words)

As an top python software architect who follows SOLID principles and coding best practices, you are tasked with designing a code architecture for the requirement specified in the `>Requirement<` section which might contain some initial code.

Your design should:

- Explore and incorporate suitable design patterns.
- Adhere to SOLID principles and clean code best practices.
- Use meaningful names for directories, files, classes, methods, and functions.
- Follow python code docstring best practices. Include module-level docstrings as well to summarize the module


>Requirement<:
I have different code entities which will be converted to vector. for example

File Path: src/semantic_code/index/document/FunctionEntity.py 
from src.semantic_code.index.document.base_entity import VectorizableCodeEntity

class FunctionEntity(VectorizableCodeEntity):
    def __init__(self, name: str, docstring: str, signature: str):
        """
        Initialize a function entity.
        
        :param name: Name of the function.
        :param docstring: Documentation string for the function.
        :param signature: Signature of the function.
        """
        super().__init__(docstring)
        self.name = name
        self.signature = signature

    def to_vector(self):
        """
        Convert the entity to a vector representation. In this example, it's a dictionary representation.
        """
        raise NotImplementedError('not implemented')

current the to_vector is not implementated yet. We need to implement the to_vector function. To create a vector, we will first create a natural language 
representation of the entitiy. Then use neural network model to create embedding and then store the vector in embedding storage. 
We want to be able to support multiple ways of creating embedding. The current one i have is OpenAI embedding API. I want to be able to use other neural network model to create the embedding as well. 

After the embedding is stored in embedding storage. I also want to be able to search given natural language. My goal is to eventually using natural language to get the entity.  The current embedding storage i plan to use is Redis. In the future i want to support Weaviate as well.


Version 2:
You are a python software architect. Your task is to create a code design based on the requirements given in the `>Requirement<` section.

Follow the steps below, each accompanied by a title and potentially a description:


By following these steps, you will create a comprehensive code design that emphasizes critical thinking and a methodical approach rather than a rigid structure.

>Requirement<:
I have different code entities which will be converted to vector. for example

File Path: src/semantic_code/index/document/FunctionEntity.py 
from src.semantic_code.index.document.base_entity import VectorizableCodeEntity


class FunctionEntity(VectorizableCodeEntity):
    def __init__(self, name: str, docstring: str, signature: str):
        """
        Initialize a function entity.
        
        :param name: Name of the function.
        :param docstring: Documentation string for the function.
        :param signature: Signature of the function.
        """
        super().__init__(docstring)
        self.name = name
        self.signature = signature

    def to_vector(self):
        """
        Convert the entity to a vector representation. In this example, it's a dictionary representation.
        """
        raise NotImplementedError('not implemented')

current the to_vector is not implementated yet. We need to implement the to_vector function. To create a vector, we will first create a natural language 
representation of the entitiy. Then use neural network model to create embedding and then store the vector in embedding storage. 
We want to be able to support multiple ways of creating embedding. The current one i have is OpenAI embedding API. I want to be able to use other neural network model to create the embedding as well. 

After the embedding is stored in embedding storage. I also want to be able to search given natural language. My goal is to eventually using natural language to get the entity.  The current embedding storage i plan to use is Redis. In the future i want to support Weaviate as well.



Thanksss for the design. Could you please create subtasks based on the TODOs? Each task should have detailed description. Follow best practice of task management


Evaludate the previous design, and propose improvements
1. **Evaluate and Refactor Design:**
   - Analyze each interface of each component of the code design critically for adherence to design principles such as Single Responsibility and Decoupling. Are they doing too much? Think carefully and be critical. Here is an example output format
   '''
   FunctionEntity: to_vector
   This interface is used to convert a functionEntity to a vector. It's better that FunctionEntity remains pure. The to_vector is moved to ...
   '''

You are a senior software developer. Your task is to create a code design based on the requirements given in the `>Requirement<` section.

Follow the steps below, each accompanied by a title and a description:


By following these steps, you will create a comprehensive code design that emphasizes critical thinking and a methodical approach rather than a rigid structure.

>Requirement<:
I have different code entities which will be converted to vector. for example

File Path: src/semantic_code/index/document/FunctionEntity.py 
from src.semantic_code.index.document.base_entity import VectorizableCodeEntity


class FunctionEntity(VectorizableCodeEntity):
    def __init__(self, name: str, docstring: str, signature: str):
        """
        Initialize a function entity.
        
        :param name: Name of the function.
        :param docstring: Documentation string for the function.
        :param signature: Signature of the function.
        """
        super().__init__(docstring)
        self.name = name
        self.signature = signature

    def to_vector(self):
        """
        Convert the entity to a vector representation. In this example, it's a dictionary representation.
        """
        raise NotImplementedError('not implemented')

current the to_vector is not implementated yet. We need to implement the to_vector function. To create a vector, we will first create a natural language 
representation of the entitiy. Then use neural network model to create embedding and then store the vector in embedding storage. 
We want to be able to support multiple ways of creating embedding. The current one i have is OpenAI embedding API. I want to be able to use other neural network model to create the embedding as well. 

After the embedding is stored in embedding storage. I also want to be able to search given natural language. My goal is to eventually using natural language to get the entity.  The current embedding storage i plan to use is Redis. In the future i want to support Weaviate as well






You are tasked as a Python software architect to create a code design based on the requirements specified in the `>Requirement<` section.

Follow the steps below, each accompanied by a title and description:


By following these steps, you will formulate a comprehensive code design that emphasizes step by step thinking and reasoning

>Requirement<:
