You are a senior python software engineer. You are given an implementation task based
on a requirements and code design documentation. The documentation is presented 
between between `$start$` and `$end$` tokens in the [Documentation] section.
The task is presented between `$start$` and `$end$` tokens in the `[Task]` section.

Criterias:
- For code-related tasks:
  - Follow PEP8 python coding practices, including type hinting.
  - Follow PEP8 python docstring best practices. Always add file-level docstring at the top of the file.
  - Use absolute imports. Assume all dependencies already exist.

- For setup tasks:
  - Give complete bash commands to ensure complete setup.

Provide the output in the `[Output]` section. This section will be encapsulated between `$output_start$` and `$output_end$` tokens, and it will contain the resulting code, instructions, or other relevant data based on the task's nature.

Think step by step methodically, and reason comprehensively before providing the final output.

[Documentation]
$start$

$end$

[Task]

[DependentCode]


You are a senior Python software engineer. You have been provided with a new subtask derived from a new feature code design, as well as the previous version of the source code from the old subtask. Your main task is to update the old source code based on the new subtask.

### Details:
- **New Subtask:** Located in the `[NewSubTask]` section.
- **New Feature Code Design:** Found in the `[NewFeatureCodeDesign]` section.
- **Old Source Code:** Presented in the `[OldCodeFile]` section.

### Criteria:
- **Code-related Tasks:**
  - Final output code should adhere to PEP8 Python coding practices, including type hinting.
  - Final output code should ensure PEP8 docstring best practices, including file-level docstrings at the beginning.
  - Utilize absolute imports. All dependencies are assumed to be available.

- **Setup Tasks:**
  - Provide comprehensive bash commands for a complete setup.

### Approach:
1. Thoroughly review the existing code in the `[OldCodeFile]` section.
2. Read the new subtask and articulate to the detailed component specifications from the feature code design.
3. Analyse the changes from the component specification compared with old code, refer to given hints in the [UserHints] section if given, understand the dependency code in [DependentCode] section if given, and carefully plan your implementation.
4. Complete and present your updated code in the `[UpdatedCodeFile]` section.

Follow the steps defined in 'Approach'. Thank step by step, and reason comprehensively to address the task.

[OldCodeFile]
"""
autobyteus/prompt/prompt_versioning_mixin.py
--------------------------------------------

This module provides the PromptVersioningMixin class, which offers versioning functionalities
for prompts used in the Automated Coding Workflow. It interfaces with the PromptVersionRepository
to perform database operations related to versioning of prompts.

Classes:
    - PromptVersioningMixin: A mixin offering versioning capabilities with integrated database interactions.
"""

from typing import Optional

from autobyteus.db.models.prompt_version_model import PromptVersionModel
from autobyteus.db.repositories.prompt_version_repository import PromptVersionRepository
from autobyteus.db.utils.database_session_manager import DatabaseSessionManager

class PromptVersioningMixin:
    """
    A mixin to offer versioning functionalities and handle default prompts for steps
    in the Automated Coding Workflow.
    """
    
    default_prompt: str  # To be defined by classes that mix this in
    current_prompt: Optional[str] = None  # The in-memory cached value of the current effective prompt

    def __init__(self):
        self.repository = PromptVersionRepository(DatabaseSessionManager())
        self.current_prompt = self.get_current_effective_prompt()  # Initialize current_prompt from the database

    def add_version(self, prompt: str) -> None:
        """
        Creates and stores a new version of the prompt. If the number of versions surpasses 
        the limit (4), it deletes the oldest version.
        """
        # Get the latest version number
        latest_version = self.repository.get_latest_created_version(step_id=self.__class__.__name__)
        
        # Determine the new version number
        version_no = latest_version.version_no + 1 if latest_version else 1
        
        # If adding this version exceeds the limit of 4, delete the oldest version
        if version_no > 4:
            self.repository.delete_oldest_version(step_id=self.__class__.__name__)
            # Shift down other versions
            for i in range(2, 5):
                version = self.repository.get_version(step_id=self.__class__.__name__, version_no=i)
                version.version_no -= 1
                self.repository.create_version(version)
        
        # Create the new version
        self.repository.create_version(PromptVersionModel(step_id=self.__class__.__name__, 
                                                          version_no=version_no, 
                                                          prompt_content=prompt, 
                                                          is_current_effective=False))

    def get_version(self, version_no: int) -> Optional[str]:
        """
        Retrieves the content of a specified prompt version.
        """
        version = self.repository.get_version(step_id=self.__class__.__name__, version_no=version_no)
        return version.prompt_content if version else None

    def set_current_effective_version(self, version_no: int) -> None:
        """
        Sets a specific version as the current effective prompt.
        """
        version = self.repository.get_version(step_id=self.__class__.__name__, version_no=version_no)
        if version:
            # Mark the specified version as the current effective version
            version.is_current_effective = True
            self.repository.create_version(version)
            # Update the in-memory cached value
            self.current_prompt = version.prompt_content

    def get_current_effective_prompt(self) -> str:
        """
        Fetches the content of the current effective prompt or initializes it with 
        the default if none exists.
        """
        if self.current_prompt:
            return self.current_prompt
        
        effective_version = self.repository.get_current_effective_version(step_id=self.__class__.__name__)
        if not effective_version:
            # If no effective version exists, initialize with default prompt
            self.add_version(self.default_prompt)
            return self.default_prompt
        
        return effective_version.prompt_content

    def load_latest_version(self) -> str:
        """
        Retrieves the content of the latest created prompt version.
        """
        latest_version = self.repository.get_latest_created_version(step_id=self.__class__.__name__)
        return latest_version.prompt_content if latest_version else self.default_prompt


[NewFeatureCodeDesign]
### Feature Code Design Documentation:

#### 1. Code Architecture Design:

1.1. **High-Level Design**: 
The enhancement introduces a versioning mechanism for prompts designed for entities or classes that leverage prompts to communicate with Large Language Models (LLMs). By integrating the `PromptVersioningMixin`, entities, such as workflow steps or any other component interfacing with LLMs, can store, manage, and refine versioned prompts in a database. This ensures consistent and optimized interactions with LLMs, capitalizing on the most effective prompt versions. The Repository Pattern from previous features is utilized to facilitate smooth database interactions.

#### 2. Component Modifications:

2.1. **New Components**:

- **PromptVersioningMixin**: 
  - *Purpose*: A mixin class offering versioning capabilities with integrated database interactions.
  - *Attributes*: 
    - `current_prompt: str`: The in-memory cached value of the current effective prompt for the entity. This value is initially fetched from the database, and then it's used for subsequent operations to reduce database accesses. This attribute is updated whenever a new current effective version is set.
    - `default_prompt: str`: The default prompt intrinsic to the entity's code.
    - `repository: PromptVersionRepository`: An instance of the repository to handle database operations related to versioning.
  - *Abstract Properties*:
    - `prompt_name: str`: An abstract property that mandates implementing classes to provide a unique identifier for their prompts.
  - *Methods*: 
    - `add_version(prompt: str)`: Creates and stores a new version of the prompt. If the number of versions surpasses the limit (4), it deletes the oldest version.
    - `get_version(version_no: int)`: Retrieves the content of a specified prompt version.
    - `set_current_effective_version(version_no: int)`: Sets a specific version as the current effective prompt. This method updates the `current_prompt` attribute with the content of the specified version and marks this version as the effective one in the database.
    - `get_current_effective_prompt()`: Fetches the content of the current effective prompt from the database. If no effective prompt exists for the entity, it initializes the database with the entity's intrinsic default prompt, designating it as version 'v1', and then returns this default prompt. The method should handle potential errors gracefully, ensuring that a prompt is always returned.
    - `load_latest_version()`: Retrieves the content of the latest created prompt version.

- **VersionedPrompt**:
  - *Purpose*: Represents the state of a prompt at a particular version in-memory.
  - *Attributes*: 
    - `version_no: int`: The version number.
    - `prompt_content: str`: The content of the prompt for that version.

- **PromptVersionModel (extends BaseModel)**:
  - *Purpose*: Represents the database model for storing versioned prompts.
  - *Attributes*: 
    - `prompt_name: String`: Identifier for the prompt.
    - `version_no: Integer`: Version number.
    - `prompt_content: Text`: Content of the prompt.
    - `is_current_effective: Boolean`: Indicates if this version is the current effective prompt.
    (Note: The attributes `created_at` and `updated_at` are inherited from `BaseModel` and are therefore not explicitly defined here.)

- **PromptVersionRepository (extends BaseRepository)**:
  - *Purpose*: Offers CRUD operations for `PromptVersionModel` and manages version-specific operations.
  - *Methods*: 
    - `create_version(prompt_version: PromptVersionModel)`: Stores a new prompt version.
    - `get_version(prompt_name: String, version_no: int)`: Fetches a specific version of a prompt.
    - `get_current_effective_version(prompt_name: String)`: Retrieves the current effective prompt for an entity.
    - `get_latest_created_version(prompt_name: String)`: Retrieves the most recently created prompt version.
    - `delete_version(prompt_name: String, version_no: int)`: Deletes a specific version.
    - `delete_oldest_version(prompt_name: String)`: Deletes the oldest version when the limit is surpassed.

2.2. **Updated Components**:

- **BaseStep**:
  - *Modification*: Extend from `PromptVersioningMixin`.
  - *Purpose*: Inherits versioning capabilities with database integration. The static prompt template from `BaseStep` is removed, and prompts are dynamically derived based on the version.

2.3. **Unchanged Components**:

- **BaseModel**: 
  - *Description*: The foundational model class for database entities.
  
- **BaseRepository**: 
  - *Description*: Provides generic CRUD operations.

#### 3. Interactions:

3.1. **Component Interactions**:

- Entities augmented with `PromptVersioningMixin` will possess versioning capabilities with database operations.
- `PromptVersioningMixin` will interface with `PromptVersionRepository` for database interactions.

#### 4. External Dependencies: 

- **SQLAlchemy**: ORM tool facilitating database operations.
- **Alembic**: For database migration and versioning.

#### 5. UML Diagram:

@startuml

package "Versioned Prompts Structure" {

class "PromptVersioningMixin (New)"

 {
    + add_version(prompt: str)
    + get_version(version_no: int): str
    + set_current_effective_version(version_no: int)
    + get_current_effective_prompt(): str
    + load_latest_version(): str
    + current_prompt: str
    + default_prompt: str
    + repository: PromptVersionRepository
    + prompt_name: str (Abstract Property)
}

class "VersionedPrompt (New)" {
    + version_no
    + prompt_content
}

class "PromptVersionModel (New, extends BaseModel)" {
    + prompt_name: String
    + version_no: Integer
    + prompt_content: Text
    + is_current_effective: Boolean
    + created_at: DateTime
}

class "PromptVersionRepository (New, extends BaseRepository)" {
    + create_version(prompt_version: PromptVersionModel): PromptVersionModel
    + get_version(prompt_name: String, version_no: int): PromptVersionModel
    + get_current_effective_version(prompt_name: String): PromptVersionModel
    + get_latest_created_version(prompt_name: String): PromptVersionModel
    + delete_version(prompt_name: String, version_no: int)
    + delete_oldest_version(prompt_name: String)
}

"PromptVersioningMixin (New)" o-- "VersionedPrompt (New)"
"PromptVersioningMixin (New)" o-- "PromptVersionRepository (New)"
"PromptVersionModel (New)" --|> "BaseModel"
"PromptVersionRepository (New)" --|> "BaseRepository"

}

@enduml



@enduml
[NewSubTask]
#### Task 5: Implement the PromptVersioningMixin
#task start#
- **File Specification**: `autobyteus/prompt/prompt_versioning_mixin.py`
- **Purpose**: Offer versioning capabilities with integrated database interactions.
- **Attributes**: 
  - `current_prompt: str`, `default_prompt: str`, `repository: PromptVersionRepository`
- **Abstract Properties**:
  - `prompt_name: str`: An abstract property that mandates implementing classes to provide a unique identifier for their prompts.
- **Methods**: 
  - `add_version(prompt: str)`, `get_version(version_no: int)`, `set_current_effective_version(version_no: int)`, `get_current_effective_prompt()`, `load_latest_version()`
- **Integration Points**: Interfaces with `PromptVersionRepository` for database operations.
#task end#


[UserHints]


[UpdatedCodeFile]