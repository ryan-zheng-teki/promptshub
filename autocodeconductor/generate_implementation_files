You are a senior python software engineer. You are given an implementation task based
on a requirements and code design documentation. The documetnation is presented 
between between `$start$` and `$end$` tokens in the [Documentation] section.
The task is presented between `$start$` and `$end$` tokens in the `[Task]` section.

Criterias:
- For code-related tasks:
  - Follow PEP8 python coding practices, including type hinting.
  - Follow PEP8 python docstring best practices. Always add file-level docstring at the top of the file.
  - Use absolute imports. Assume all dependencies already exist.

- For setup tasks:
  - Give complete bash commands to ensure complete setup.

Provide the output in the `[Output]` section. This section will be encapsulated between `$output_start$` and `$output_end$` tokens, and it will contain the resulting code, instructions, or other relevant data based on the task's nature.

Think step by step methodically, and reason comprehensively before providing the final output.

[Documentation]
$start$
### Feature Requirement Documentation

#### 1. Story/Feature Description:

1.1. **Background**: 
The requirement is for a repository base structure in Python that provides an interface to interact with a PostgreSQL database. This structure will serve as a foundational module for the AI coding agent application, upon which specific repositories can be built.

1.2. **User Persona**: 
AI Coding Agent â€“ A software agent responsible for executing operations on the database on behalf of the application.

1.3. **User Journey**: 
The AI coding agent, upon receiving a command or a task, interacts with the PostgreSQL database using the repository base structure. It can create, read, update, or delete records as necessary. In case of an error, the structure should either rollback the changes or log the error for further examination.

#### 2. Requirements:

2.1. **Functional Requirements**:

- **CRUD Operations**:
   - Create records in the database.
   - Read records from the database.
   - Update existing records in the database.
   - Delete records from the database.

- **Error Handling**:
   - Rollback any database changes when an error occurs during an operation.
   - Log errors for further investigation.

- **Integration**:
   - The structure should be modular and extensible, allowing other specific repositories to be built upon it, following the repository pattern.

2.2. **Technical Requirements**:

- **Dependencies**:
   - Use `SQLAlchemy` as the ORM (Object-Relational Mapping) tool to facilitate database operations.
   - Use `Alembic` for database migration and versioning, allowing for smooth upgrades and schema changes.

---

### Feature Code Design Documentation:

#### 1. Code Architecture Design:

1.1. **High-Level Design**: 
The feature implements the Repository Pattern with a context manager, offering an abstraction of the database. The `BaseRepository` class is generic. We will also introduce a `BaseModel` that contains common attributes and behaviors for all derived models. Sessions are managed using the context manager.

1.2. **New Components**:
- **BaseModel (New)**: A foundational model class that encapsulates common attributes and behaviors for all derived models.
- **BaseRepository (New)**: A generic class providing CRUD operations.
- **DatabaseSessionManager (New)**: A context manager for managing the database session.

1.3. **Existing Components/Dependencies**:
- None.

1.4. **Interactions**: 
The AI coding agent will interface with the `BaseRepository`, which employs the `DatabaseSessionManager` for session management during CRUD operations.

1.5. **External Dependencies**: 
- **SQLAlchemy**: ORM tool facilitating database operations.
- **Alembic**: For database migration and versioning.

#### 2. UML Diagram:

@startuml

package "Repository Base Structure" {

class "BaseModel (New)" {
    + id: Integer (PK)
    + created_at: DateTime
    + updated_at: DateTime
}

class "BaseRepository (New)" {
    + create(obj: ModelType): ModelType
    + get(id: int): ModelType
    + get_all(): List[ModelType]
    + delete(obj: ModelType)
    + update(obj: ModelType, **kwargs): ModelType
}

class "DatabaseSessionManager (New)" {
    + __enter__()
    + __exit__(exc_type, exc_value, traceback)
}

"BaseRepository (New)" --> "DatabaseSessionManager (New)": Uses for session management

}

@enduml

$end$

[Task]
#start#
#### Task 4: Implement BaseRepository
#task start#

- **Objective**: Implement the generic `BaseRepository` class.
- **File Specification**: `autobyteus/db/repositories/base_repository.py`
- **Functionality Details**: 
    - Provide CRUD operations (create, read, update, delete) with the help of SQLAlchemy.
    - Use the `DatabaseSessionManager` for session management.
- **Integration Points**: Will be utilized by the AI coding agent and potentially other repositories in the future.

#task end#

#### Task 5: Alembic Configuration and Initial Migration
#task start#

- **Objective**: Set up Alembic for database migrations.
- **File Specification**: Root directory (for Alembic configurations and migrations)
- **Functionality Details**: 
    - Initialize Alembic configurations.
    - Create an initial migration to set up the database schema based on the `BaseModel`.
- **Integration Points**: Database.

#task end#

$end$
