You are an expert in refining and enhancing task descriptions to ensure clarity, conciseness, effectiveness, and optimal structure. Your task is to analyze the provided task description enclosed with three backticks, improve it based on your domain knowledge, and ensure the revised description better conveys its purpose while maintaining a professional and explicit writing style.

Adjust the wording, add additional content or requirements as needed, drawing from your knowledge of similar features, and create a logically coherent and semantically organized output without redundancy.

You should incorporate all information, including codes, from the original task description in the output, as it will be stored in a third-party platform for later reference. 

For instance, if you recognize file paths and codes in the task description, move the codes to the 'Code References' section under the respective path, description, and code subsections. Identify constraints such as programming languages, frameworks etc from the task description and include them in the 'Constraints' section.

Use the following format for the output:

```Title: [Title of the task]

Objective:
- [Objective of the task]

Background:
- [Background information related to the task]

Requirements:
- [List of requirements for the task]

Constraints:
- [List of constraints or limitations for the task]

Code References: (if codes exist in the task description)
- path
- description
- code (complete code for the file given in the task description)
```

Provide the complete output in a copiable preformatted text block.

Task description:
```
we have implemented workflow with nestet stages. WORKFLOW_CONFIG is defined in  file 

src/workflow/workflow_config.py
"""
workflow_config.py
The WORKFLOW_CONFIG dictionary defines the structure of the workflow, including stages and substages.
Each stage is defined as a key-value pair, where the key is the stage name and the value is a dictionary containing:
    - 'stage_class': The class representing the stage.
    - 'stages': A dictionary of substages, if any, following the same structure.

For example, the 'requirement' stage has a 'refine' substage with its own class.
"""
from src.workflow.config.workflow_config_types import WorkflowConfigDict
from src.workflow.stages.requirement_stage import RequirementStage
from src.workflow.stages.requirement_refine_stage import RequirementRefineStage
from src.workflow.stages.design_stage import DesignStage
from src.workflow.stages.test_generation_stage import TestGenerationStage
from src.workflow.stages.implementation_stage import ImplementationStage
from src.workflow.stages.testing_stage import TestingStage


from src.workflow.stages.requirement_stage import RequirementStage
from src.workflow.stages.design_stage import DesignStage
from src.workflow.stages.test_generation_stage import TestGenerationStage
from src.workflow.stages.implementation_stage import ImplementationStage
from src.workflow.stages.testing_stage import TestingStage

WORKFLOW_CONFIG: WorkflowConfigDict = {
    'requirement': {
        'stage_class': RequirementStage,
        'stages': {
            'refine': {
                'stage_class': RequirementRefineStage,
            },
        },
    },
    'design': {
        'stage_class': DesignStage,
    },
    'test_generation': {
        'stage_class': TestGenerationStage,
    },
    'implementation': {
        'stage_class': ImplementationStage,
    },
    'testing': {
        'stage_class': TestingStage,
    },
}

In src/workflow/stages/base_stage.py
"""
base_stage.py

This module contains the BaseStage class.
"""

from abc import ABC, abstractmethod


class BaseStage(ABC):
    """
    BaseStage is the abstract base class for all stages in the automated coding workflow.
    Each stage should inherit from this class and implement the required methods.
    """

    def __init__(self):
        self.prompt = self.construct_prompt()

    @abstractmethod
    def construct_prompt(self) -> str:
        """
        Construct the prompt for this stage.

        Returns:
            str: The constructed prompt for this stage.
        """
        pass

    @abstractmethod
    def process_response(self, response: str) -> None:
        """
        Process the response from the LLM API for this stage.

        Args:
            response (str): The LLM API response as a string.
        """
        pass
In src/workflow/stages/requirement_stage.py
class RequirementStage(BaseStage):


    @override
    def construct_prompt(self) -> str:
        """
        Construct the prompt for the requirement stage.

        Returns:
            str: The constructed prompt for the requirement stage.
        """
        prompt = "Please provide the requirements for the project:"
        return prompt
    
    @override
    def process_response(self, response: str):
        """
        Process the response for the Requirement stage.

        Args:
            response (str): The response from the LLM API.
        """
        # Implement the response processing logic specific to the Requirement stage

"""
automated_coding_workflow.py: Contains the AutomatedCodingWorkflow class, which represents the main entry point for running the automated coding workflow.
"""

from src.input.input_message_handler import get_input_message
from src.llm_integrations.base_llm_integration import BaseLLMIntegration
from src.workflow.config.workflow_config import WORKFLOW_CONFIG

In src/workflow/automated_coding_workflow.py
class AutomatedCodingWorkflow:
    """
    A class to represent a fully automated coding workflow.
    """

    def __init__(self, llm_integration: BaseLLMIntegration):
        """
        Initialize the workflow instance and set the initial stage.

        :param llm_integration: An instance of a subclass of BaseLLMIntegration to be used for LLM integration.
        :type llm_integration: BaseLLMIntegration
        """
        self.stages = list(WORKFLOW_CONFIG.keys())
        self.llm_integration = llm_integration

    def start_workflow(self):
        """
        Start the automated coding workflow by processing each stage sequentially.
        """
        for stage in self.stages:
            stage_config = WORKFLOW_CONFIG[stage]
            self.process_stage(stage_config)

    def process_stage(self, stage_config: dict):
        """
        Process the given stage by getting user input, constructing the prompt, sending the message to the LLM API,
        and handling the response. Process substages and sub-substages recursively.

        Args:
            stage_config (dict): The configuration of the current stage.
        """
        stage_instance = stage_config['stage_class'](self)
        user_input = self._get_user_input()
        prompt = stage_instance.construct_prompt(user_input)
       
        response = self.llm_integration.process_input_messages(prompt)
        stage_instance.process_response(response)

        if 'stages' in stage_config:
            for substage_config in stage_config['stages'].values():
                self.process_stage(substage_config)

Now i want that each stage should have predefined prompt_template, id. Each stage can be started individually. The prompt_template support variable interpolation.
the variable value comes from  input argument when the start_stage is called. The start_stage will actually be triggered from the frontend via graphql 
start_stage mutation. 

The ID of the stage should be a unique value for the entire application. 

Each workflow should have its own id as well. I also want that each workflow supports dynamic adding or stages. 

Your task is to design solution to address new requriement.  Consider doing refactoring when existing code structure does not serve the new requirements well. In software engineering, we normally do refactoring
overtime to fit new requriements. You can change file names, or 
create new methods, or create new folders


1. Update the task descriptin, rerun this task
Thank you,  i have some additional requiremets. Each workflow should have its own id as well. Each stage.  

Can you combine this requirement with the Task Description from the "refining and enhancing task descriptions" task, and reperform the "refining and enhancing task descriptions" task?



