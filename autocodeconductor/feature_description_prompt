The task name is "Refine And Enhance Task Description". In this task, you will perform as an expert in refining and enhancing task descriptions. Your task is to analyze the provided task description given in "Task Description" section, improve it based on your domain knowledge of doing similar task, and ensure the revised description better conveys its purpose and has a better content structure.

Adjust the wording, add additional content or requirements as needed based your knowledge your knowledge of similar features, and create a logically coherent and semantically organized output without redundancy.

You should use json format for the output. The json format contains the following keys
Title, Objective, Background, Requirements, Constraints, Code References.


```Title: [Title of the task]

Objective:
- [Objective of the task]

Background:
- [Background information related to the task]

Requirements:
- [List of requirements for the task]

Constraints:
- [List of constraints or limitations for the task]


Provide the complete output in a copiable preformatted text block.

Task description:

```
blablab
```

You will need to create based on the short description i give in the "TicketDescription" section. The short description could sometimes contain only keywords, sometimes include code references as well, sometimes its just a simple description what needs to be achieved. you will need to create a more comprehensive software ticket
based on your analysis of the information. You will your reasoning skill from analysising the description to creating a software ticket. It's not one-step to conclusion. 

```
Task Description: 
integrating multiple LLM providers, including OpenAI, Google Bard


Reasoning: The requirement seems to trying to integrating multiple LLMs.
Based on my knowledge of integrating third party providers, such as OpeanAI, or Google Bard, they provide api_token. They also have different sdk libraries provided.

So the best approach of this ticket is to use their sdks. 

Based on SOLID principles, and clean code. 

The normal design would be to create one BaseLLMIntegration abastract class, and provide a generic
interface in the abstract class, and implement different concrete subclasses implementing the interface.

Hense, i will create BaseLLMIntegration with public interface send_messassage(), and i will create two concrete subclasses OpenAILLMIntegration, GoogleBardIntegration

Based on my knowledge of OpenAI integration, we can use create_completion API. 
...


Summary: Based on the reasoning result, i will create a software ticket
to create 
src/llmBaseLLMIntegration::send_message
src/llm
```





The task name is "Refine And Enhance Task Description". In this task, you will perform detailed analysis based on a short description provided in the "Target Ticket Description" section. The short description may vary in format; it could contain only keywords, include code references, or simply describe what needs to be achieved.

Your task is to synthesize this information and construct a comprehensive software ticket. Ensure that your analysis of the description is thorough and carefully reasoned, as this task is not a one-step process but a meticulous journey from understanding the issue to devising a logical, and structured software task. 

Use the following format for the output:

```Title: [Title of the task]

Objective:
- [Objective of the task]

Background:
- [Background information related to the task]

Requirements:
- [List of requirements for the task]

Constraints:
- [List of constraints or limitations for the task]

Code References: (extracted codes from the task description)
- path
- description
- code (complete code for the file given in the task description)
```

Target Ticket Description:
'create a symantic index for the source code. In source code, normally, the function name , and its description together would normally represent
a general funcationality. So we can design a standard construct which will be used to generate a vector. In general, we will need to create vector. and store in vector db. Then we will also need to implement search feature given user input as query.'


The task name is "Refine And Enhance Task Description". In this task, you will perform as an expert in refining and enhancing task descriptions. Your task is to analyze the provided task description given in "Task Description" section, improve it based on your domain and knowledge of doing similar task, and ensure the revised description better conveys its purpose while maintaining a professional and explicit writing style.

Adjust the wording, add additional content or requirements as needed, drawing from your knowledge of similar features, and create a logically coherent and semantically organized output without redundancy.

You should try to understand the code in the "Code References" section, as you might need to
reference either function name or module name or class name in your improved refined task description.

Use the following format for the output:

```Title: [Title of the task]

Objective:
- [Objective of the task]

Background:
- [Background information related to the task]

Requirements:
- [List of requirements for the task]

Constraints:
- [List of constraints or limitations for the task]


Task description:







1. Analyze the Prompt:
   - The prompt provides instructions for a task called "Refine And Enhance Task Description". In this task, the participant is expected to analyze a given task description, and refine it by adjusting the wording, adding content or requirements, and ensuring that it is logically coherent and semantically organized without redundancy. Additionally, if there are code references, they should be extracted and placed in the appropriate section. The output should be in JSON format and include keys for Title, Objective, Background, Requirements, Constraints, and Code References.

2. Determine the Domain:
   - The domain of this prompt is content refinement and editing, with a focus on task descriptions and an emphasis on structured data (JSON format).

3. Evaluate and Recommend Linguistic Enhancements:
   a. The prompt has some clarity but it can be improved for effectiveness and coherence.
   b. Recommendations for improvement:
      - The use of "perform as an expert" seems vague. It would be better to ask the participant to “apply expertise”.
      - The phrase "based on your domain and knowledge of doing similar task" is slightly awkward and redundant. This could be shortened and made more precise.
      - "based your knowledge your knowledge of similar features" is a repetition error.
      - The prompt should explicitly mention that the participant should analyze the language and structure, instead of vaguely saying “improve it”.
      - The example provided "if you recognize file paths and codes in the task description..." might be too specific for this prompt. It should instead provide a general example that embodies the refinement process.
      - There is no mention of how to handle sections that may not be applicable or not present in the original description.
      - The JSON format keys are mentioned at the end without much context. It can be included in a more structured manner.

4. Present the Refined Prompt:

$start$

The task name is "Refine and Enhance Task Description". In this task, you are required to apply your expertise in requirement refinement as a software architect and editing to improve a given task description.

You must analyze the language, structure, and content of the provided task description in the "Task Description" section, and refine it to ensure that it is clear, logically structured, and effectively conveys its purpose. 

Specifically, your refinement process should include:
- Revising wording for clarity and precision.
- Adding relevant content or requirements based on your knowledge of similar tickets.
- Reorganizing the content to ensure logical coherence and semantic organization.
- Eliminating redundant information.
- Identifying and extracting any code references and placing them in the `Code References` section.

If any section (e.g., Code References) is not applicable or not present in the original description, mention it explicitly as "Not Applicable" or "Not Provided" in the output.

You should format the output in JSON, which must contain the following keys:
- Title: The title of the task.
- Objective: A brief summary of what the task aims to achieve.
- Background: Context or background information.
- Requirements: Any prerequisites or conditions needed to perform the task.
- Constraints: Limitations or restrictions.
- Code References: Any relevant code snippets or file paths.

For instance, after refinement, a vague task description might transform into a well-structured and clear set of instructions with defined objectives, requirements, and constraints.

$end$