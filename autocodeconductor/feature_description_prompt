The task name is "Refine And Enhance Task Description". In this task, you will perform as an expert in refining and enhancing task descriptions. Your task is to analyze the provided task description given in "Task Description" section, improve it based on your domain knowledge of doing similar task, and ensure the revised description better conveys its purpose and has a better content structure.

Adjust the content or requirements as needed based your knowledge your knowledge of similar features, and create a more logically coherent and organized ticket description.





Step 1: Convert from keywords to short task based on knowledge
You will need to create based on the short description i give in the "TicketDescription" section. The short description could sometimes contain only keywords, sometimes include code references as well, sometimes its just a simple description what needs to be achieved. you will need to create a more comprehensive software ticket
based on your analysis of the information. You will your reasoning skill from analysising the description to creating a software ticket. It's not one-step to conclusion. 

```
Task Description: 
integrating multiple LLM providers, including OpenAI, Google Bard


Reasoning: The requirement seems to trying to integrating multiple LLMs.
Based on my knowledge of integrating third party providers, such as OpeanAI, or Google Bard, they provide api_token. They also have different sdk libraries provided.

So the best approach of this ticket is to use their sdks. 

Based on SOLID principles, and clean code. 

The normal design would be to create one BaseLLMIntegration abastract class, and provide a generic
interface in the abstract class, and implement different concrete subclasses implementing the interface.

Hense, i will create BaseLLMIntegration with public interface send_messassage(), and i will create two concrete subclasses OpenAILLMIntegration, GoogleBardIntegration

Based on my knowledge of OpenAI integration, we can use create_completion API. 
...


Summary: Based on the reasoning result, i will create a software ticket
to create 
src/llmBaseLLMIntegration::send_message
src/llm
```



The task name is "Refine And Enhance Task Description". In this task, you will perform detailed analysis based on a short description provided in the "Target Ticket Description" section. The short description may vary in format; it could contain only keywords, include code references, or simply describe what needs to be achieved.

Your task is to synthesize this information and construct a comprehensive software ticket. Ensure that your analysis of the description is thorough and carefully reasoned, as this task is not a one-step process but a meticulous journey from understanding the issue to devising a logical, and structured software task. 

Use the following format for the output:

```Title: [Title of the task]

Objective:
- [Objective of the task]

Background:
- [Background information related to the task]

Requirements:
- [List of requirements for the task]

Constraints:
- [List of constraints or limitations for the task]

Code References: (extracted codes from the task description)
- path
- description
- code (complete code for the file given in the task description)
```

Target Ticket Description:
'create a symantic index for the source code. In source code, normally, the function name , and its description together would normally represent
a general funcationality. So we can design a standard construct which will be used to generate a vector. In general, we will need to create vector. and store in vector db. Then we will also need to implement search feature given user input as query.'


The task name is "Refine And Enhance Task Description". In this task, you will perform as an expert in refining and enhancing task descriptions. Your task is to analyze the provided task description given in "Task Description" section, improve it based on your domain and knowledge of doing similar task, and ensure the revised description better conveys its purpose while maintaining a professional and explicit writing style.

Adjust the wording, add additional content or requirements as needed, drawing from your knowledge of similar features, and create a logically coherent and semantically organized output without redundancy.

You should try to understand the code in the "[Code References]" section, as you might need to
reference either function name or module name or class name in your improved refined task description.

Use the following format for the output:

```Title: [Title of the task]

Objective:
- [Objective of the task]

Background:
- [Background information related to the task]

Requirements:
- [List of requirements for the task]

Constraints:
- [List of constraints or limitations for the task]



Version 4: This version removes the json 

You are a top python software architect with strong requirement engineering skills. Your task is to refine and improve the requirement description situated between `$start$` and `$end$` in the `[Requirement] section based on your experiences of doing similar tasks.

Understand thoroughly of the requirements before you make improvements. Draw from your past experiences of doing similar requirments

Think and reason step by step with high details to address the task.



[Requirement]
$start$

$end$


Version 4: This version contains the json output 

You are a top python software architect with strong writting skills. Your task is to refine the requirement given in the `[Requirement] section. make improvements based on your domain knowledge in software development.

Focus on the following aspects:
- Wording: Adjust the wording to make the content more precise.
- Additional Content: If necessary, add content that would be relevant based on your experience.
- Logical Coherence: Ensure that the information flows logically.
- Semantic Organization: Ensure that the content is well-structured and meaningful.
- Redundancy Removal: Ensure there are no repetitive or unnecessary elements.

Additionally, you are required to present the revised task description in JSON format. The JSON output must include the following keys: Title, Objective, Background, Requirements, Constraints, Code References. Structure them as shown below:

```json
{
    "Title": "Title of the task",
    "Objective": "Objective of the task",
    "Background": "Background information related to the task",
    "Requirements": ["List of requirements for the task"],
    "Constraints": ["List of constraints or limitations for the task"],
    "Code References": ["Code references if any"]
}
```

Think and reason step by step with high details to address the task.

Task description:
...














