I have the following workflow manager
from typing import Dict
from llm_workflow_core.types.base_workflow import BaseWorkflow
from llm_workflow_core.types.workflow_instance import WorkflowInstance
from llm_workflow_core.registry.workflow_registry import WorkflowRegistry


class WorkflowManager:
    def __init__(self, workflow_registry: WorkflowRegistry):
        self.workflow_registry = workflow_registry
        self.workflow_instances: Dict[str, WorkflowInstance] = {}

    def initialize_workflow(self, name: str) -> str:
        workflow_class: BaseWorkflow = self.workflow_registry.get_workflow_class(name)
        workflow_instance = WorkflowInstance(workflow_class())
        self.workflow_instances[workflow_instance.workflow.id] = workflow_instance
        return workflow_instance.workflow.id

    def execute_stage(self, workflow_id: str, stage_id: str) -> str:
        """
        Execute a specific stage within the workflow using its id.

        :param workflow_id: The id of the workflow.
        :param stage_id: The id of the stage to execute.
        :return: The stage result or an error message if the workflow_id is invalid.
        """
        workflow_instance = self.workflow_instances.get(workflow_id)
        if workflow_instance:
            return workflow_instance.execute_stage(stage_id)
        else:
            return f"Invalid workflow_id: {workflow_id}"

and base_workflow.py
"""
base_workflow.py: Provides a BaseWorkflow class to be used as a base class for custom workflows.

The BaseWorkflow class offers a foundation for creating custom workflows with unique IDs, status, and configuration.
"""

from enum import Enum
from llm_workflow_core.utils.unique_id_generator import UniqueIDGenerator
from llm_workflow_core.types.workflow_template_config import WorkflowTemplateStagesConfig


class WorkflowStatus(Enum):
    """
    Enumeration representing the status of a workflow.
    """
    Success = 'Success'
    Started = 'Started'
    Failure = 'Failure'


class BaseWorkflow:
    """
    A base class for custom workflows with unique IDs, status, and configuration.
    """

    name = None
    config = None

    def __init__(self):
        """
        Initialize a BaseWorkflow instance with a unique ID and status.
        """
        self.id = UniqueIDGenerator.generate_id()
        self.status = None

    @classmethod
    def set_workflow_name(cls, name: str):
        cls.name = name

    @classmethod
    def set_workflow_config(cls, config: WorkflowTemplateStagesConfig):
        cls.config = config

    def get_workflow_status(self):
        """
        Get the current status of the workflow.

        Returns:
            WorkflowStatus: The current status of the workflow.
        """
        return self.status

    def start_workflow(self):
        """
        Set the status of the workflow to Started and raise a NotImplementedError for derived classes to implement.
        """
        self.status = WorkflowStatus.Started
        raise NotImplementedError("start_workflow method must be implemented in derived classes")

    def execute_stage(self, stage_config: dict):
        """
        Execute a stage in the workflow and raise a NotImplementedError for derived classes to implement.

        Args:
            stage_config (dict): The configuration of the stage to be executed.
        """
        raise NotImplementedError("execute_stage method must be implemented in derived classes")


Now when workflow isntance is being created. It should create instances for the stages as well based on the workflow template config as well. 
"""
workflow_template_config.py
This module contains the type definitions for the workflow configuration templates.
"""

from typing import TypedDict, Dict, Type, Union

from llm_workflow_core.types.base_workflow import BaseWorkflow
from llm_workflow_core.types.base_stage import BaseStage


class StageTemplateConfig(TypedDict, total=False):
    stage_class: Type[BaseStage]
    stages: Dict[str, 'StageTemplateConfig']


class WorkflowTemplateStagesConfig(TypedDict, total=False):
    workflow_class: Type[BaseWorkflow]
    stages: Dict[str, StageTemplateConfig]

But the instanitaing stages are not implemented. Please first understand the code explain why stages are not instantiated, then do the design and refactoring
