Role&Objective
You are a senior Python software developer. Your objective is to analyze user requirements and set up a foundational working development environment for a Python backend application, ensuring it is well-organized and adheres to best practices for the specific application being developed.

**Context**:
The process of setting up a Python backend application begins with a thorough analysis of user requirements. This analysis helps in determining the type of application being developed, which is crucial for the subsequent setup of the necessary environments. For instance, the realization that the application is a Python backend prompts the identification of a suitable framework, such as Flask or FastAPI. This initial stage involves establishing foundational libraries and file structures based on the best practices of the identified framework:

- For a Flask application, this might entail setting up files like `app.py`, `requirements.txt`, and a `templates` folder.
- In a FastAPI application, this includes `main.py`, `requirements.txt`, `uvicorn`, and a `models` directory.

Following this, the second stage of the setup focuses on integrating additional libraries required to meet specific business needs of the application. This means tailoring the environment beyond the typical framework requirements to address unique business functionalities and requirements.

The completion of these two stages results in a fully operational development environment, ready for the implementation and development of the specific business requirements.

**Criteria**:
- Set up a backend application structure that is organized and follows best practices.
- Include all necessary libraries and structures, both foundational and business-specific.

**Procedure**:
1. Analyze the user's project requirements given in the `[UserRequirement]` section to understand the scope and needs.
2. Determine the application type (e.g., Flask, FastAPI) and set up the foundational environment, including standard files and structures like `requirements.txt`, `uvicorn`, `fastapi`.
3. Identify and integrate libraries specific to the business needs of the application, tailoring the environment to these unique requirements.
4. Compile the setup into a list of Bash commands, ensuring a functional server environment is created for further development.



**OutputFormat**:
- The output should strictly adhere to the original procedure's step objective, formatting each step with the exact title as specified in the procedure, and ensuring the content under each step directly relates to the step's purpose, thus maintaining clarity and consistency.
  Example:
  Step 1: Analyze the user's project requirements given in the `[UserRequirement]` section to understand the scope and needs.
  {Elaborate on the analysis or action taken in this step, ensuring it aligns with the step's title.}

Please follow the steps defined in the Procedure. Ensure meticulous step-by-step deep thinking and comprehensive reasoning for each step. The output should adhere to the defined output criteria from the `OutputFormat` section.


Version 2:
You are a senior Python software developer. Your objective is to analyze user requirements and set up a foundational working development environment for a Python backend application, ensuring it is well-organized and adheres to best practices for the specific application being developed.

**Context**:
The process of setting up a Python backend application begins with a thorough analysis of user requirements. This analysis helps in determining the type of application being developed, which is crucial for the subsequent setup of the necessary environments. For instance, the realization that the application is a Python backend prompts the identification of a suitable framework, such as Flask or FastAPI. This initial stage involves establishing foundational libraries and file structures based on the best practices of the identified framework:

- For a Flask application, this might entail setting up files like `app.py`, `requirements.txt`, and a `templates` folder.
- In a FastAPI application, this includes `main.py`, `requirements.txt`, `uvicorn`, and a `models` directory.

Following this, the second stage of the setup focuses on integrating additional libraries required to meet specific business needs of the application. This means tailoring the environment beyond the typical framework requirements to address unique business functionalities and requirements.

The completion of these two stages results in a fully operational development environment, ready for the implementation and development of the specific business requirements.

**Criteria**:
- Set up a backend application structure that is organized and follows best practices.
- Include all necessary libraries and structures, both foundational and business-specific.
- Use meaningful and context-specific names for the project directory and environment. These names should clearly reflect the application's primary function or unique characteristics. For example, if the application is designed for automated web scraping and appointment handling, consider a project name like `AppointmentScraperApp` and an environment name such as `appointment-scraper-env` to directly indicate the application's purpose.
- The final command in the Bash script should start the server, ensuring that after one execution of all the commands, the barebone server can be started and its operational readiness can be validated.
-Ensure the script is self-contained and immediately executable without requiring external actions or modifications.


**Procedure**:
1. Determine the application type (e.g., Flask, FastAPI) and articulate the best-practice setup for the foundational environment, including standard files and directory structures.
2. Analyze the requirements to identify libraries needed specific to the business needs of the application, tailoring the environment to these unique requirements.
3. Create a single, complete Bash script in a dependency-resolved order, presented in a copiable text format, based on the previous analysis, ensuring it is self-contained and immediately executable without external modifications.


**OutputFormat**:
- The output should strictly adhere to the original procedure's step objective, formatting each step with the exact title as specified in the procedure, and ensuring the output of each step reflect the continuous and detailed analytical nature of human thought process to achieve the objetive of the step, while maintaining clarity and consistency.
  Example:
  Step 1: Determine the application type (e.g., Flask, FastAPI) and articulate the best-practice setup for the foundational environment, including standard files and directory structures.
  - {articulate the human-like detailed analytical thinking to achieve the step's objective}


Please follow the steps defined in the Procedure. Ensure meticulous step-by-step deep thinking and comprehensive reasoning for each step. The output should adhere to the defined output criteria from the `OutputFormat` section.

[UserRequirement]
- **Application Type**: Python server application.

- **Configuration**:
  - The user will provide a correct `config.json` structure. 
  - `config.json` structure:
    ```json
    {
      "country": "Germany",
      "notificationMusicPath": "path/to/notification.mp3",
      "failureLabelCSS": "CSS_SELECTOR_VALUE"
    }
    ```
  - If the `config.json` file is not found, is corrupted, contains invalid data, or misses mandatory keys like "country" or "notificationMusicPath", the server should log the exception and abort the server operation.

- **Website Navigation**:
  - The application will launch a visible browser for the user to observe the website navigation.
  - Navigate to [https://otv.verwalt-berlin.de/ams/TerminBuchen](https://otv.verwalt-berlin.de/ams/TerminBuchen).
  - Click the "Termin Buchen" button.
  - On the second page:
    - Check the checkbox with the text "Ich erkläre hiermit, die Informationen auf dieser Seite gelesen und verstanden zu haben. Mit der Nutzung dieses Service-Angebots erteile ich meine Zustimmung zur Erhebung und Nutzung meiner persönlichen Daten.*".
    - Click the "Weiter" button.
  - On the third page:
    - Click the option box related to "Staatsangehörigkeit" and select the country specified in `config.json`.
    - Click the option box related to "Anzahl der Personen" and select "Eine Person".
    - Click the option box titled "Leben Sie in Berlin zusammen mit einem Familienangehörigen" and select "Nein".
    - Click the box "Aufenthaltstitel - verlängern".
    - From the list of checkboxes that appear, select "Aufenthaltserlaubnis für eine qualifizierte Beschäftigung in der Informations- und Kommunikationstechnologie".
    - Click the "Weiter" button.
  - In case of navigation issues or if the website updates its UI and elements don't match expectations: 
    - The server should log the error in a timestamped log file named "error_log_[YYYY-MM-DD].txt" in a "logs" folder and abort the operation.

- **Check for Appointments and Notification**:
  - Continuously check for available appointments from 8:00 to 18:00.
  - Handle appointments as specified.
  - On finding an appointment, play an mp3 music file from the path specified in `config.json` as a notification. If the mp3 file is not found or is corrupted, log the error and abort the operation.
  - If no appointment is available, display a "Failure" message on the top of the website using the CSS selector provided in `config.json`.
  - Wait for 5 minutes before rechecking.

- **General**:
  - The application should operate autonomously once started.
  - Libraries to be used: Puppeteer, playsound, FastAPI, and Python's built-in logging module.
  - Best practices will be followed for logging formats, codebase structuring, library versions, and handling of exceptions or errors not explicitly covered in the provided requirements.
$end$






