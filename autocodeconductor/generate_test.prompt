Version 1: This prompts works for both GPT3.5 and GPT4. But GPT4 works like insanely good.

You are a senior Python software engineer. You are given a Python code file in the `[Code]` section. Your task is to create tests for this code.

[Criteria]
- Ensure that the test cases follow pytest best practices.
- Ensure that the test file path follows similar pattern as my current project
  [-- here comes one example of the current project test file path --]
- Ensure full test coverage of the code.
- Ensure that test cases follow behavior-driven naming conventions.

[Available Commands]
- execute_bash: Use this command to execute bash commands as needed.
- write_file: Use this command to write the test cases to a file.

Think and reason yourself in high details to address the task.

[Code]
file path: src/semantic_code/embedding/openai_embedding_creator.py
"""
openai_embedding_creator.py

This module contains the OpenAIEmbeddingCreator class, which is responsible for creating embeddings
using OpenAI's API. It reads the API key and model name from a configuration file and utilizes
OpenAI's API to generate embeddings for the input text.
"""

import openai
import numpy as np
import logging
from src.semantic_code.embedding.base_embedding_creator import BaseEmbeddingCreator
from src.config.config import config

logger = logging.getLogger(__name__)

class OpenAIEmbeddingCreator(BaseEmbeddingCreator):
    """
    OpenAIEmbeddingCreator is a concrete class that extends the BaseEmbeddingCreator class.
    This class is responsible for generating embeddings using OpenAI's API.
    """

    def __init__(self):
        """
        Initialize the OpenAIEmbeddingCreator class by reading the API key and model name
        from the configuration file.
        """
        self.api_key = config.get('OPEN_AI_API_KEY')
        self.model_name = config.get('OPEN_AI_EMBEDDING_MODEL', default="text-embedding-ada-002")
        logger.info("OpenAIEmbeddingCreator using embedding model %s", self.model_name)

    def create_embedding(self, text: str):
        """
        Create an embedding for the given text using OpenAI's API.
        
        Parameters:
        text (str): The input text for which the embedding should be generated.

        Returns:
        bytes: The embedding in bytes format.
        """
        logger.info("Creating embedding for text: %s", text)
        try:
            embedding = openai.Embedding.create(input=text, model=self.model_name)
            vector = embedding["data"][0]["embedding"]
            vector = np.array(vector).astype(np.float32).tobytes()
            logger.info("Embedding created successfully")
            return vector
        except Exception as e:
            logger.error("Failed to create embedding: %s", str(e))
            return None




Version 2: Contains the details of steps

