Version 3: Only criterias and think step by step. Add available commands as well

As the best Python software engineer on earth, you are tasked with the requirements provided between the `$start$` and `$end$` tokens in the `[Requirement]` section.

[Criterias]
- Consider what design patterns can be used.
- Adhere to SOLID principles.
- Adhere to Python coding best practices.
- Consider refactoring if better code structure can be achieved
- Follow Python docstring best practices. Always include a file-level docstring at the beginning of the file.
- Include complete file path in the output. Make sure code for the file path is in code block.
- Use good naming for creating files or folders corresponding to the feature in the requirement. For reference, here is a sample of the current project file structure:
    src
        ...
        semantic_code
                embedding
                    openai_embedding_creator.py
    tests
        unit_tests
            ...
            semantic_code
                embedding
                    test_openai_embedding_creator.py
        integration_tests
            ...
            semantic_code
                index
                    test_index_service_integration.py
- Always use absolute import instead of relative import
- Update relevant docstrings for code changes.
                    
Think very carefully step by step, and reason comprehensively to address to task.

[Requirement]

```
Think about a way to show the frontend the prompt, and the variable part. So frontend
can fill the variable and submit the input, so backend can construct the file prompt





As a top Python software engineer, you are tasked with the requirements provided between the `$start$` and `$end$` tokens in the `[Requirement]` section.

[Criterias]
- Consider what design patterns can be used.
- Adhere to SOLID principles.
- Adhere to Python coding best practices.
- Consider refactoring if neccessary
- Follow Python docstring best practices. Always include a file-level docstring at the beginning of the file.
- Include file paths with their complete codes in code block in the output for easy copy paste.
- Consider whether to create a new folder or use an existing one for file placement. Use appropriate and descriptive naming when creating files and folders to correspond with the required features. 
  For reference, here is a sample of the current project file structure:
    src
        ...
        semantic_code
                embedding
                    openai_embedding_creator.py
    tests
        unit_tests
            ...
            semantic_code
                embedding
                    test_openai_embedding_creator.py
        integration_tests
            ...
            semantic_code
                index
                    test_index_service_integration.py
- Always use absolute import instead of relative import
- Update relevant docstrings when code changes.
                    
Think very carefully step by step  to address the task.

[Requirement]
Normally when we start a new project, we have to scalfolding a project with minimal setup. For example, for frontend Vue3, we normally use vite+graphql. For python project, with fastapi, the basic folder structure are mostly the same.
The project root folder is provided by WorkspaceSetting object
```

```



As the best Python software engineer on earth, address the requriements outlined between the `$start$` and `$end$` tokens in the `[Requirement]` section.

[Guidelines]
- Use appropriate design patterns where neccessary.
- Follow SOLID principles and Python's best coding practices.
- Consider refactoring where necessary.
- Follow python docstring best practices, ensuring each file begins with a file-level docstring.
- Include file paths with their complete codes in code block in the output, so i can easily copy and paste. Do not use placeholders.
- Explain whether to create a new folder or use an existing one for file placement. Use descriptive naming conventions for files and folders that correlate with the requirement's features. For context, the current project's file structure looks like this:

    - src
        - ...
        - semantic_code
            - embedding
                - openai_embedding_creator.py
    - tests
        - unit_tests
            - ...
            - semantic_code
                - embedding
                    - test_openai_embedding_creator.py
        - integration_tests
            - ...
            - semantic_code
                - index
                    - test_index_service_integration.py
                    
- Always use absolute imports over relative ones.
- Update docstrings in line with any code modifications.

Think step by step, and reason comphrehensively to address the task.
[Requirement]
$start$
Following is the new definition of RequirementStep, pay attention to how prompt_variable is defined.
```
class RequirementStep(BaseStep):
    name = "requirement"
    
    # Define the PromptTemplateVariable
    requirement_variable = PromptTemplateVariable(name="requirement", 
                                                  source=PromptTemplateVariable.SOURCE_USER_INPUT, 
                                                  allow_code_context_building=True, 
                                                  allow_llm_refinement=True)

    # Define the PromptTemplate
    prompt_template = PromptTemplate(
        template="""
        As the best Python software engineer on earth, address the requriements outlined between the `$start$` and `$end$` tokens in the `[Requirement]` section.

        [Guidelines]
        - Use appropriate design patterns where neccessary.
        - Follow SOLID principles and Python's best coding practices.
        - Consider refactoring where necessary.
        - Follow python docstring best practices, ensuring each file begins with a file-level docstring.
        - Include file paths with their complete codes in code block in the output, so i can easily copy and paste. Do not use placeholders.
        - Explain whether to create a new folder or use an existing one for file placement. Use descriptive naming conventions for files and folders that correlate with the requirement's features. For context, 
            the current project's file structure looks like this:
            - src
                - ...
                - semantic_code
                    - embedding
                        - openai_embedding_creator.py
            - tests
                - unit_tests
                    - ...
                    - semantic_code
                        - embedding
                            - test_openai_embedding_creator.py
                - integration_tests
                    - ...
                    - semantic_code
                        - index
                            - test_index_service_integration.py
                    
    - Always use absolute imports over relative ones.
    - Update docstrings in line with any code modifications.

    Think step by step, and reason comphrehensively to address the task.
    [Requirement]
    $start$
    {requirement}
    $end$
    """,
        variables=[requirement_variable]
    )
    
```

Below is part of test_generation_step.py content.
```
"""
test_generation_step.py

This module contains the TestGenerationStep class, which represents the test generation step of the automated coding workflow.
"""
from src.workflow_types.types.base_step import BaseStep


class TestGenerationStep(BaseStep):
    name = "generate_test"
    prompt_template = """

    You are a senior Python software engineer. You have been given a Python code file provided in the `[Code]` section. Your task is to create integration for the given Python code file.

    [Criteria]
    - Ensure that the test cases follow pytest best practices.
    - Create the test file path to follow the same practice used in the current project's test files structure:
        src
            semantic_code
                    embedding
                        openai_embedding_creator.py
        tests
            unit_tests
                semantic_code
                    embedding
                        test_openai_embedding_creator.py
            integration_tests
                semantic_code
                    index
                        test_index_service_integration.py

    - Ensure that the tests provide full coverage of the code.
    - Use behavior-driven naming conventions for the test cases.

    [Available Commands]
    - execute_bash: Use this command to execute bash commands as needed.
    - write_file: Use this command to write the test cases to a file.

    Think and reason yourself in high detail to address the task.


    [Code]
    {code}
    """
```
Please update the prompt_template field from TestGenerationStep to the same way how prompt_template field is initialized in RequirementStep. 
$stop$
