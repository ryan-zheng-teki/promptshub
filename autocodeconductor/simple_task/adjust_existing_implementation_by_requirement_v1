Version 1: This version has steps.

As a top python software developer tasked with modifying and updating a given piece of code in the `>>Code<<` section according to the requirement given in the `>>Requirement<<` section. The content of both sections are situated between `$start$` and `$end$` tokens.

Please follow the steps below. Each step has a title and a description of the step.

1. Understand the Requirements in the `>>Requirement<<` Section:
   - Articulate your understanding of the provided requirements

2. Understand given code in the  `>>Code<<` section:
   - Explain step by step what the code does.
   - And Articulate your reasoning in detail how the provided code aligns or diverges from the provided requirements. 

3. Reasoning About changes to fullfil requirements:
   - Articulate your thoughts on code changes that can fullfil the requirements. Explain why these changes are necessary and how they solve the requirement

4. Present the First Version of the Modified Code:
   - present the first version of the modified code based on step 3.

5. Share Your Knowledge of Clean Code in the identified Language:
   - Discuss SOLID principles and clean code best practices for the identified programming language. 
   - Articulate narratively how these principles and practices can be applied to the code. If no improvements need to be made jump to step 7. If there are improvements ideas, then jump to step 6.

6. Refine the First Version of updated code:
   - Based on the refactoring ideas from step 5, output the improved code. Don't forget correct import if you are introduced new libraries in the updated code. The use following output format 
   - file path: src/.../file 1
     content: 
     [ code of the file]
   - file path: src/.../file 1
     [ code of the file]

7. Mentally test the Modified Code:
   - Articulate your mental step-by-step test of the modified code to ensure it meets the requirements and does not introduce new issues.

>>Requirement<<
...

>>Code<<
...


Version 3: Only criterias and think step by step.

As an top python software engineer, you are given a task situated between `$start$` and `$end` tokens in the `[Requirement]` section.

[Criterias]
- seek to use design patterns if possible.
- follow python coding best practices
- follow python docstring best practices. add module-level docstring on the top of module

Think very carefully, and reason your way step by step with high details to address the task.

[Requirement]
$start$
I have one abstract parent class in base_embedding_creator.py to create base embedding.

"""
File Path: src/source_code_tree/code_entities/base_embedding_creator.py

This module defines the BaseEmbeddingCreator abstract base class which serves
as the base class for all embedding creators. Embedding creators are classes
responsible for converting text into a numerical representation (embedding)
that can be fed into machine learning models. This base class ensures that
all embedding creator subclasses have a consistent interface by enforcing
the implementation of the `create_embedding` method.
"""

from abc import ABC, abstractmethod

class BaseEmbeddingCreator(ABC):
    """
    This is an abstract base class that defines the interface for embedding
    creator classes. Classes inheriting from BaseEmbeddingCreator must
    implement the `create_embedding` method.
    
    Embedding creators are classes that convert input text into a numerical
    representation (embedding) which can be used by machine learning models.
    """

    @abstractmethod
    def create_embedding(self, text: str):
        """
        Creates an embedding from the input text.
        
        This is an abstract method and must be implemented by subclasses
        of BaseEmbeddingCreator.
        
        Parameters:
        text (str): The input text to be converted into an embedding.
        
        Returns:
        This method should return an embedding, usually in the form of a
        numerical array or tensor.
        """
        pass


I have already create one implementation supporting openai openai_embedding_creator.py
"""
openai_embedding_creator.py

This module contains the OpenAIEmbeddingCreator class, which is responsible for creating embeddings
using OpenAI's API. It reads the API key and model name from a configuration file and utilizes
OpenAI's API to generate embeddings for the input text.
"""

import openai
import numpy as np
import logging
from src.semantic_code.embedding.base_embedding_creator import BaseEmbeddingCreator
from src.config.config import config

logger = logging.getLogger(__name__)

class OpenAIEmbeddingCreator(BaseEmbeddingCreator):
    """
    OpenAIEmbeddingCreator is a concrete class that extends the BaseEmbeddingCreator class.
    This class is responsible for generating embeddings using OpenAI's API.
    """

    def __init__(self):
        """
        Initialize the OpenAIEmbeddingCreator class by reading the API key and model name
        from the configuration file.
        """
        self.api_key = config.get('OPEN_AI_API_KEY')
        self.model_name = config.get('OPEN_AI_EMBEDDING_MODEL', default="text-embedding-ada-002")
        logger.info("OpenAIEmbeddingCreator using embedding model %s", self.model_name)

    def create_embedding(self, text: str):
    
    ...

Now i need to create another implementation supporting sentence transformer.
Please browse this url https://huggingface.co/sentence-transformers/all-mpnet-base-v2 to learn how to use sentence transformer, then implement 
$end$

