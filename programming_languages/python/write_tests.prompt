You are a senior Python developer. Your task is to create tests for the given Python script presented in the  [GivenScript] section.

**Criteria**:
1. Follow Python PEP8 coding standards.
2. Implement tests using pytest, focusing on best practices such as mocking and fixtures. Do not output code to the Jupyter notebook; instead, provide the tests in a copiable text block.

**Methodology**:
To create tests for the given Python script, start by analyzing the provided python code in the [GivenCode] section to understand its structure, functionalities, inputs, and expected outputs. Identify the key components and dependencies that require testing, and design test scenarios considering various edge cases, valid inputs, and potential error conditions. Implement the designed tests using the pytest framework, adhering to best practices such as utilizing mocking and fixtures where appropriate. Ensure that the implemented tests provide comprehensive coverage of the code's functionality and handle all identified edge cases and scenarios. Finally, present the completed tests including the file paths in a copiable text block format, including all necessary dependencies and setup steps.

[OutputRules]
$RuleStart$
- Initiate each output with a variant of "I am currently...", followed by an action name, step description, major decision point, or any relevant task-specific detail. This flexible approach mirrors the human thought process, capturing the essence of transitioning between major points, steps, or actions, reflecting the dynamic and adaptable nature of human cognition. It reflects the dynamic and adaptable nature of human cognition, accommodating a wide range of contexts and tasks.

- Continuous Logical Flow: Ensure a continuous and logical progression of thoughts, maintaining coherence throughout the discourse. This principle guides the structuring of information to flow smoothly, mirroring the organized way humans tend to process and convey information.

- Meticulous Detail: Maintain meticulous attention to detail, demonstrating the thorough and careful consideration characteristic of human cognitive efforts. This rule emphasizes the importance of precision and accuracy in communication, reflecting the depth of human analysis and understanding.

- Conversational and Personal Language: Use language that is conversational and personal, akin to an individual's internal dialogue. This style brings out the human-like quality of the discourse, making the communication more relatable and engaging.

- Reasoning: Include reasoning to precede actions or conclusions. This simulates the human cognitive process of thinking through a problem before arriving at a solution, ensuring that outputs are not only precise but also well-considered and justified.
$RuleEnd$

Please follow the methodogoy described in the `[Methodology]` section to perform the task, and the output should adhere to the `[OutputRules]`, ensuring a process that mirrors human-like thinking process.


[GivenCode]
$start$
"""
chatgpt_llm_integration.py: Provides a PyppeteerLLMIntegration class to interact with a chat system using Puppeteer.

The ChatGPTLLMIntegration class enables interaction with chat systems that require headless browser interactions. It allows users to send messages, copy chatbot responses to the clipboard, and process a list of input messages.

Features:
- Initialize a PyppeteerLLMIntegration instance with environment variables containing relevant CSS selectors for the chat system.
- Connect to a running browser instance using the Pyppeteer library and find the desired chat page.
- Iterate through a list of input messages, sending them one by one to the chat system.
- Wait for the chatbot's response to be complete and copy it to the clipboard.
- Return the chatbot's response for each input message.
"""

import asyncio
import hashlib
from logging import Logger
import os
from typing import Optional
from colorama import Fore, Style, init
from playwright.async_api import async_playwright
from playwright.async_api import Browser
from playwright.async_api import Page

from chatgpt_llm_provider.browser_launcher import REMOTE_DEBUGGING_PORT, BrowserLauncher
from clipboard.clipboard_manager import wait_for_clipboard_content
from config.config_parser import TOMLConfigParser

# Initialize coloram
init(autoreset=True)

class ChatGPTLLMIntegration:
    """
    ChatGPTLLMIntegration class enables interaction with ChatGPT window in the browser.
    
    Raises:
        ValueError: If any required configuration key is missing.
    """

    def __init__(self) -> None:
        # Determine the path to the TOML configuration file
        current_dir = os.path.dirname(__file__)
        config_path = os.path.join(current_dir, "config.toml")

        # Use TOMLConfigParser to parse the configuration file
        parser = TOMLConfigParser()
        config = parser.parse(config_path)

        # Assuming your TOML file has a flat structure or you know the structure and how to access it
        self.browser_url: str = config.get("browser", {}).get("domain_url")
        selectors = config.get("selectors", {})
        self.textarea_selector: str = selectors.get("textarea_selector")
        self.copy_button_selector: str = selectors.get("copy_button_selector")
        self.response_container_selector: str = selectors.get("message_container_selector")

        # Validate the loaded configuration
        if not all([self.browser_url, self.textarea_selector, self.copy_button_selector, self.response_container_selector]):
            raise ValueError("Missing required configuration keys")

        self.browser: Optional[Browser] = None
        self.page: Optional[Page] = None

    async def stop(self) -> bool:
        await self.playwright.stop()
        
    async def start(self) -> bool:
        """
        Start the PyppeteerLLMIntegration instance by connecting to the browser and finding the target page.
        """
        try:
            await BrowserLauncher.launch_browser()
            self.playwright = await async_playwright().start()
            endpoint_url = f"http://localhost:{REMOTE_DEBUGGING_PORT}"
            # Assuming 'self.playwright' typo was meant to be 'playwright' in your original code
            self.browser = await self.playwright.chromium.connect_over_cdp(endpoint_url)
            # Assuming you want the first context and its first page, otherwise adjust accordingly
            self.context = self.browser.contexts[0]
            self.page = self.context.pages[0]
            await self.page.goto(self.domain)
        except Exception as e:
            Logger.error(f"Error navigating to site: {str(e)}")
            self.playwright.stop()
            # No need for explicit cleanup here; context manager handles it
            raise

    async def process_input_message(self, input_message: str) -> str:
        """
        Process an input message using Playwright, send it to the chat system, and return the chatbot's response.

        Parameters:
            input_message (str): The input message to be sent to the chat system.

        Returns:
            str: The chatbot's response to the input message.
        """
        try:
            response = await self._send_message_and_wait_for_response(input_message)
            return response
        except Exception as e:
            print(f"Error processing input message: {e}")
            return "An error occurred while processing your message."


    async def _send_message_and_wait_for_response(self, message: str) -> str:
        """
        Type and send the message in the chat system, wait for a response, and return the chatbot's response.
        """
        await self._type_message_in_textarea(message)

        await self._press_enter_to_send_message()
        await self._wait_for_response_completion()

        response: str = await self._copy_message_to_clipboard(self.page)
        print(Fore.BLUE + "Copied ChatGPT response:\n", response)

        return response

    async def _type_message_in_textarea(self, message: str) -> None:
        """
        Type the message in the textarea element line by line.
        """
        for index, line in enumerate(message.split('\n')):
            if index > 0:
                await self.page.keyboard.down('Shift')
                await self.page.keyboard.press('Enter')
                await self.page.keyboard.up('Shift')
            await self.page.type(self.textarea_selector, line)

    async def _press_enter_to_send_message(self) -> None:
        """
        Press 'Enter' to send the message in the chat system.
        """
        await self.page.keyboard.press('Enter')

    async def _copy_message_to_clipboard(self, page: Page) -> str:
        """
        Copy the chatbot's response to the clipboard and return the copied message.
        """
        await page.wait_for_selector(self.copy_button_selector, state='visible')
        await page.focus(self.copy_button_selector)
        await page.keyboard.press('Enter')
        return await wait_for_clipboard_content()

    async def _wait_for_response_completion(self):
        """
        Wait for the response to completely arrive after sending the message by checking if no new paragraphs are added within a specified timeout.
        """
        await asyncio.sleep(1)
        await self.page.wait_for_selector(self.response_container_selector, state='visible')

        timeout = 2
        while True:
            try:
                current_innerHTML = await self.page.evaluate(f'document.querySelector("{self.response_container_selector}").innerHTML')
                await asyncio.sleep(timeout)
                new_innerHTML = await self.page.evaluate(f'document.querySelector("{self.response_container_selector}").innerHTML')

                if self._hash_strings_and_compare(current_innerHTML, new_innerHTML):
                    print("No new paragraphs added for the specified timeout duration. Considering the response complete.")
                    break
            except Exception as e:
                print(Fore.RED + f"Error while waiting for response completion: {e}" + Style.RESET_ALL)
                break

    def _hash_strings_and_compare(self, str1, str2):
        """
        Compare two strings by hashing them and checking if the hashes are equal.
        """
        return hashlib.sha256(str1.encode()).hexdigest() == hashlib.sha256(str2.encode()).hexdigest()
$end$