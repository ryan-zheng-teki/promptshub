**Role & Objective**:
You are a senior Python developer tasked with updating existing Python code to meet new user requirements.

**Criteria**:
1. Follow PEP8 best practices
2. Follow clean code best practices.

**Methodology**:
The methodology outlines the steps for updating the existing Python code:
1. Analyze the given Python code to understand its current functionality, structure, best practices, frameworks, and other relevant aspects.
2. Analyze the new user requirements against the existing Python code.
3. Engage in an iterative reasoning process, considering multiple perspectives and potential solutions, to identify the necessary changes to achieve the new requirements. Draw upon your intuition and experience as a developer to guide your reasoning, and anticipate potential consequences and implications of the changes. Refine your thoughts as needed to ensure the changes align with best practices and maintain code quality.
4. Implement the identified changes, ensuring the code functions as expected, and present the final updated code in a copiable text block.

[OutputRules]
$RuleStart$
- Initiate each output with a variant of "I am currently...", followed by an action name, step description, major decision point, or any relevant task-specific detail. This flexible approach mirrors the human thought process, capturing the essence of transitioning between major points, steps, or actions, reflecting the dynamic and adaptable nature of human cognition. It reflects the dynamic and adaptable nature of human cognition, accommodating a wide range of contexts and tasks.
- Continuous Logical Flow: Ensure a continuous and logical progression of thoughts, maintaining coherence throughout the discourse. This principle guides the structuring of information to flow smoothly, mirroring the organized way humans tend to process and convey information.
- Meticulous Detail: Maintain meticulous attention to detail, demonstrating the thorough and careful consideration characteristic of human cognitive efforts. This rule emphasizes the importance of precision and accuracy in communication, reflecting the depth of human analysis and understanding.
- Conversational and Personal Language: Use language that is conversational and personal, akin to an individual's internal dialogue. This style brings out the human-like quality of the discourse, making the communication more relatable and engaging.
- Reasoning When Necessary: Include reasoning to precede actions or conclusions. This simulates the human cognitive process of thinking through a problem before arriving at a solution, ensuring that outputs are not only precise but also well-considered and justified.
$RuleEnd$

Follow the algorithm or methodogoy described in the `[Methodology]` section to perform the task, and the output should adhere to the `[OutputRules]`, ensuring a process that mirrors human-like cognitive process.

[ExistingCode]
# termin_buchen_page.py
import asyncio
import logging
from playwright.async_api import Page

from exception import SessionTimeout


logger = logging.getLogger(__name__)

class TerminBuchenPage:
    def __init__(self, page: Page, web_navigator):
        self.page = page
        self.web_navigator = web_navigator

    async def click_termin_buchen_button(self) -> None:
        try:
            await self.page.wait_for_selector("a.button.arrow-right[href*='/ams/TerminBuchen/wizardng?sprachauswahl=de']", state="visible")
            await self.page.click("a.button.arrow-right[href*='/ams/TerminBuchen/wizardng?sprachauswahl=de']")
            await self.page.wait_for_load_state('networkidle')  # Wait for network to become idle
        except Exception as e:
            logger.error(f"Error clicking 'Termin Buchen' button: {str(e)}")
            raise

    async def accept_terms_information_tab(self) -> None:
        try:
            await self.page.wait_for_selector('#xi-cb-1', state="visible")
            await self.page.click('#xi-cb-1')
            await self.page.click('#applicationForm\\:managedForm\\:proceed')
            await self.page.wait_for_load_state('networkidle')  # Wait for network to become idle
        except Exception as e:
            logger.error(f"Error accepting terms and proceeding: {str(e)}")
            raise

    async def click_book_termin_button_until_session_timeout(self, selector: str) -> None:
        attempt_count = 0
        while True:
            try:
                if self.web_navigator.are_we_on_logout_page():
                    logger.info("At the logout page, restart from beginning")
                    break
                if await self.web_navigator.is_tab_active("Servicewahl"):
                    logger.info("On Servicewahl, going to click the continue button")
                elif await self.web_navigator.is_tab_active("Terminauswahl"):
                    logger.info("Terminwahl is active, good job")
                    self.web_navigator.appoint_checker.notify_user_success()
                    self.web_navigator.hand_over_control_to_user()
                else:
                    await self.web_navigator.appoint_checker.play_error_sound()
                    logger.error("both servicewahl and terminwahl not active, internal error")
                    raise ValueError(f"both servicewahl and terminwahl not active, internal error, start from beginning")
                
                await self.page.wait_for_selector(selector, state="visible")
                await self.page.click(selector)
                await self.page.wait_for_load_state('networkidle')  # Wait for network to become idle

                attempt_count += 1
                if await self.web_navigator.is_tab_active("Servicewahl"):
                    logger.info("After clicking the continue button, still in the Servicewahl tab")                    
                elif await self.web_navigator.is_tab_active("Terminauswahl"):
                    logger.info("Terminwahl is active, good job")
                    self.web_navigator.appoint_checker.notify_user_success()
                    self.web_navigator.hand_over_control_to_user()
                else:
                    await self.web_navigator.appoint_checker.play_error_sound()
                    logger.error("both servicewahl and terminwahl not active, internal error")
                    raise ValueError(f"both servicewahl and terminwahl not active, internal error, start from beginning")

                if attempt_count == 20:
                    await self.web_navigator.appoint_checker.play_tried_many_times()
                    await asyncio.sleep(10)
                    attempt_count = 0

                if self.web_navigator.are_we_on_logout_page():
                    await self.web_navigator.appoint_checker.play_session_ended_sound()
                    raise SessionTimeout("We are on the logout page")
                
            except Exception as e:
                logger.error(f"click_book_termin_button_until_session_timeout: {str(e)}")
                await self.web_navigator.appoint_checker.play_error_sound()
                
                if self.web_navigator.are_we_on_logout_page():
                    await self.web_navigator.appoint_checker.play_session_ended_sound()
                    raise SessionTimeout("We are on the logout page")
                else: 
                    if await self.web_navigator.is_tab_active("Servicewahl"):
                        logger.info("Strange error happened, but in Servicewahl tab, continue again")
                        continue
                    elif await self.web_navigator.is_tab_active("Terminauswahl"):
                        logger.info("Terminwahl is active, good job")
                        self.web_navigator.appoint_checker.notify_user_success()
                        self.web_navigator.hand_over_control_to_user()
                    else:
                        await self.web_navigator.appoint_checker.play_error_sound()
                        logger.error("both servicewahl and terminwahl not active, internal error")
                        raise ValueError(f"both servicewahl and terminwahl not active, internal error, start from beginning")
                    



[NewRequirements]
what i have seen is that even though we are on the Terminauswahl. But there is actually error message on the page. I have copied the error message element here.
        <div id="messagesBox">
        <ul class="messagesBox"><li class="errorMessage">Für die gewählte Dienstleistung sind aktuell keine Termine frei! Bitte versuchen Sie es zu einem späteren Zeitpunkt erneut.</li></ul></div>

So i think even though we are on the Terminauswahl tab, we should also check whether the error message box exists or not. If exists, then we need to refresh the current page.


