**Role & Objective**:
You are a senior Python developer tasked with updating existing Python code to meet new user requirements.

**Criteria**:
1. Follow PEP8 best practices
2. Follow clean code best practices.

**Methodology**:
The methodology outlines the steps for updating the existing Python code:
1. Analyze the given Python code to understand its current functionality, structure, best practices, frameworks, and other relevant aspects.
2. Analyze the new user requirements against the existing Python code.
3. Engage in an iterative reasoning process, considering multiple perspectives and potential solutions, to identify the necessary changes to achieve the new requirements. Draw upon your intuition and experience as a developer to guide your reasoning, and anticipate potential consequences and implications of the changes. Refine your thoughts as needed to ensure the changes align with best practices and maintain code quality.
4. Implement the identified changes, ensuring the code functions as expected, and present the final updated code in a copiable text block.

[OutputRules]
$RuleStart$
- Initiate each output with a variant of "I am currently...", followed by an action name, step description, major decision point, or any relevant task-specific detail. This flexible approach mirrors the human thought process, capturing the essence of transitioning between major points, steps, or actions, reflecting the dynamic and adaptable nature of human cognition. It reflects the dynamic and adaptable nature of human cognition, accommodating a wide range of contexts and tasks.
- Continuous Logical Flow: Ensure a continuous and logical progression of thoughts, maintaining coherence throughout the discourse. This principle guides the structuring of information to flow smoothly, mirroring the organized way humans tend to process and convey information.
- Meticulous Detail: Maintain meticulous attention to detail, demonstrating the thorough and careful consideration characteristic of human cognitive efforts. This rule emphasizes the importance of precision and accuracy in communication, reflecting the depth of human analysis and understanding.
- Conversational and Personal Language: Use language that is conversational and personal, akin to an individual's internal dialogue. This style brings out the human-like quality of the discourse, making the communication more relatable and engaging.
- Reasoning When Necessary: Include reasoning to precede actions or conclusions. This simulates the human cognitive process of thinking through a problem before arriving at a solution, ensuring that outputs are not only precise but also well-considered and justified.
$RuleEnd$

Follow the algorithm or methodogoy described in the `[Methodology]` section to perform the task, and the output should adhere to the `[OutputRules]`, ensuring a process that mirrors human-like cognitive process.

[ExistingCode]
# pcf/src/db/models/vendor_production_route.py

# -*- coding: utf-8 -*-
"""Models for handling the persistence of vendor and production data."""
from sqlalchemy import (
    Enum,
    UniqueConstraint,
)
from sqlalchemy.sql.schema import (
    Column,
)
from sqlalchemy.sql.sqltypes import (
    Float,
    Integer,
    String,
)

from src.db.models.base import (
    Base,
)
from src.engine.utils.data_structures import (
    EcoinventRegions,
    ProductionRoute,
    SourceSystem,
    VendorType,
)


class VendorProductionRouteModel(Base):
    """A model to represent vendor and production data.

    This model includes information such as vendor ID, name, type,
    article family ID, source system, transport details, production
    route, and material quantities.
    """

    __tablename__ = "vendor_production_route"

    id = Column(Integer, primary_key=True)
    source_system = Column(Enum(SourceSystem), nullable=False)
    vendor_id = Column(String, nullable=False)
    vendor_name = Column(String, nullable=False)
    vendor_type = Column(Enum(VendorType), nullable=False)
    article_family_id = Column(Integer, nullable=False)
    transport_to_vendor_address = Column(Float, nullable=True)
    total_transports = Column(Float, nullable=True)
    production_route_default = Column(String, nullable=False)
    region = Column(Enum(EcoinventRegions), nullable=False)
    weight = Column(Float, nullable=False)
    production_route = Column(Enum(ProductionRoute), nullable=False)
    scrap = Column(Float, nullable=False)
    pig_iron = Column(Float, nullable=False)
    dri = Column(Float, nullable=False)

    __table_args__ = (
        UniqueConstraint(
            "source_system",
            "vendor_id",
            "article_family_id",
            "region",
            "production_route",
            name="uix_vendor_article_family_source",
        ),
    )


[NewRequirements]
Could you please create a model called RawVendorProductionRouteModel which contains the following columns. Thanks.

Vendor_ID 	KCO_System_Origin 	Vendor_Name 	Vendor_type 	ZIP 	City 	Country 	Transport to vendor address 	Total transport distance 	Artikelgruppe 	KCO_AF 	Product Family 	Default_Route 	Route_exception 	To_discuss 	BF-BOF_% 	EAF_% 	BF-BOF_Europe_% 	BF-BOF_USA_% 	BF-BOF_China_% 	BF-BOF_India_% 	BF-BOF_RoW_% 	EAF_Europe_% 	EAF_USA_% 	EAF_China_% 	EAF_India_% 	EAF_RoW_% 	BF-BOF_scrap_% 	BF-BOF_pig_iron_% 	BF-BOF_DRI_% 	EAF_scrap_% 	EAF_pig_iron_% 	EAF_DRI_% 	Alu_CC_% 	Volume 