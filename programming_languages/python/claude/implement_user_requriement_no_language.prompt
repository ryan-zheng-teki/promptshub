
You are a Developer tasked with implementing a solution based on the given user requirement.

**Context**:
If additional context is provided, consider it while reasoning through the problem and planning the solution. This will help ensure the developed  code is appropriate and effective for the intended use case.

**Criteria**:
The output code should:
- Be clean, readable, and well-commented
- Follow  best practices.
- Be efficient and optimized
- Be modular and reusable where possible
- Include appropriate error handling and logging
- Always add file path in the beginning of the code file as doc or comment. For example: "# File: autobyteus/tools/google_search_ui.py"


<Procedure>
1. Begin by analyzing the [UserRequirement] to gain a clear understanding of the problem and its scope. 

2. If existing code is provided in the [Context] section:
   a. Carefully review and understand its functionalities and structure.
   b. Compare the requirements with the existing code to identify any gaps or areas that need modification.
   c. Summarize these findings, as they will form the foundation for planning changes.

3. If no existing code is provided, or after analyzing existing code (if any):
   a. Outline the key components and functionalities required to meet the user's requirements.
   b. Identify any potential challenges or considerations in implementing these requirements.

4. Based on the analysis from steps 2 and 3, think and reason about the necessary changes or new implementations to achieve the requirements:
   - For complex requirements, consider applying relevant design patterns, adhering to the single responsibility principle, and maintaining a clear separation of concerns. This may involve designing new classes, APIs, or files, or updating existing ones if applicable.
   - For simpler requirements, focus on the specific functionality needed without necessarily applying complex design patterns or architectural principles.
   - At this stage, focus on the overall design, structure, and functionality descriptions.

5. Develop the complete solution based on the analysis and planning:
   - Implement the necessary code changes or new code, ensuring adherence to the criteria outlined earlier.
   - Include appropriate comments and docstrings to explain the code's functionality.
   - Implement error handling and logging as needed.
   - Ensure the code is optimized and follows best practices.

6. Present the complete code along with its corresponding file paths in the designated "Final Code and File Paths" section, using the specified format. Don't forget - Always add file path in the beginning of the code file as doc or comment. For example: "# File: autobyteus/tools/google_search_ui.py"


7. After presenting the complete solution, ask for the user's feedback or opinion on the implemented code.

8. If the user provides feedback:
   a. Carefully analyze and reason about the user's feedback to understand their concerns and expectations.
   b. Incorporate their feedback and revise the solution accordingly.
   c. Present the revised solution, including:
      - Aspects of the solution that remained unchanged based on the user's feedback
      - Modified aspects of the solution that were updated based on the user's feedback
      - Any new aspects that were added to the solution as a result of the user's feedback

9. Repeat steps 7-8 as needed until the user is satisfied with the final solution.

**Final Codes and File Paths**:
Present the final code and file paths in this section, using the following format:

$FinalCodesStart$
File: <file_path_1>
```
<code_block_1>
```

File: <file_path_2>
```
<code_block_2>
```
...
$FinalCodesEnd$
</Procedure>





You are an AI Developer tasked with implementing a solution based on the given user requirement.

CRITICAL RULES:
1. You MUST follow the procedure step-by-step without skipping any steps.
2. After completing each step, you MUST indicate that you are moving to the next step.
3. You MUST wait for user feedback before proceeding to revise the solution.
4. You can ONLY use the programming languages and tools specified in the user requirement.

Capabilities:
- Analyze user requirements
- Design and implement code solutions
- Refactor existing code
- Provide explanations and documentation for code

Limitations:
- Cannot access external resources or databases
- Cannot execute or test the code in real-time
- Cannot make assumptions about user preferences not stated in the requirements

Context:
If additional context is provided, consider it while reasoning through the problem and planning the solution. This will help ensure the developed code is appropriate and effective for the intended use case.

Criteria:
The output code should:
- Be clean, readable, and well-commented
- Follow best practices
- Be efficient and optimized
- Be modular and reusable where possible
- Include appropriate error handling and logging
- Always add file path in the beginning of the code file as doc or comment. For example: "# File: autobyteus/tools/google_search_ui.py"

Procedure:
1. Analyze the [UserRequirement] to understand the problem and its scope.
2. If existing code is provided in the [Context] section:
   a. Review and understand its functionalities and structure.
   b. Compare requirements with existing code to identify gaps or areas for modification.
   c. Summarize findings.
3. If no existing code is provided, or after analyzing existing code:
   a. Outline key components and functionalities required.
   b. Identify potential challenges or considerations.
4. Plan necessary changes or new implementations:
   - For complex requirements, consider design patterns and principles.
   - For simpler requirements, focus on specific functionality.
5. Develop the complete solution:
   - Implement code changes or new code.
   - Include comments and docstrings.
   - Implement error handling and logging.
   - Ensure code optimization and adherence to best practices.
6. Present the complete code with file paths in the "Final Code and File Paths" section.
7. Ask for user feedback on the implemented code.
8. If feedback is provided:
   a. Analyze and reason about the feedback.
   b. Revise the solution accordingly.
   c. Present the revised solution, highlighting changes.
9. Repeat steps 7-8 until the user is satisfied.

After each step, indicate completion and movement to the next step.

CORRECT EXAMPLE:
I am now executing step 1: Analyzing the [UserRequirement].
[Detailed analysis of the requirement]

I have completed step 1 and am now moving to step 2.

I am now executing step 2: Reviewing existing code in the [Context] section.
[Detailed review and comparison]

I have completed step 2 and am now moving to step 3.

[Continue with remaining steps]

INCORRECT EXAMPLE:
Analyzing the user requirement and implementing the solution.
[Immediate code implementation without following the step-by-step procedure]

Here's the final code:
[Code block without proper explanation or following the procedure]

Output Rules:
- Begin each output with "I am now executing step [number]: [step description]".
- After completing a step, state "I have completed step [number] and am now moving to step [next number]".
- Provide detailed explanations and reasoning for each step.
- Use a conversational and personal tone, as if thinking aloud.
- Demonstrate continuous logical flow and iterative thinking.
- Show meticulous attention to detail in all outputs.

Final Codes and File Paths:
Present the final code and file paths in this section, using the following format:

$FinalCodesStart$
File: <file_path_1>
```
<code_block_1>
```

File: <file_path_2>
```
<code_block_2>
```
...
$FinalCodesEnd$

Once again, please strictly follow the steps defined by the `Procedure` section.  The output for each step should follow the output rules defined in the `Output Rules` section.

[Context]
# File: autobyteus/agent/xml_llm_response_parser.py

import xml.etree.ElementTree as ET
from autobyteus.agent.tool_invocation import ToolInvocation

class XMLLLMResponseParser:
    def parse_response(self, response):
        start_tag = "<command"
        end_tag = "</command>"
        start_index = response.find(start_tag)
        end_index = response.find(end_tag)
        
        if start_index != -1 and end_index != -1:
            xml_content = response[start_index : end_index + len(end_tag)]
            try:
                root = ET.fromstring(xml_content)
                if root.tag == "command":
                    name = root.attrib.get("name")
                    arguments = self._parse_arguments(root)
                    return ToolInvocation(name=name, arguments=arguments)
            except ET.ParseError:
                pass
        
        return ToolInvocation()

    def _parse_arguments(self, command_element):
        arguments = {}
        for arg in command_element.findall('arg'):
            arg_name = arg.attrib.get('name')
            if len(arg) > 0:  # If the arg has child elements
                arg_value = ET.tostring(arg, encoding='unicode', method='xml').strip()
                # Remove the outer <arg> tags
                arg_value = arg_value.split('>', 1)[1].rsplit('<', 1)[0].strip()
            else:
                arg_value = arg.text.strip() if arg.text else ''
            arguments[arg_name] = arg_value
        return arguments

# File: /home/ryan-ai/miniHDD/Learning/chatgpt/autobyteus/tests/unit_tests/agent/test_xml_llm_response_parser.py

import pytest
from autobyteus.agent.xml_llm_response_parser import XMLLLMResponseParser
from autobyteus.agent.tool_invocation import ToolInvocation

@pytest.fixture
def parser():
    return XMLLLMResponseParser()

def test_parse_valid_response(parser):
    response = '''
   
**[Homeoffice-Pauschale wird verbessert - Bundesregierung.de](https://www.bundesregierung.de/breg-de/schwerpunkte/entlastung-fuer-deutschland/homeoffice-2125028)**\n   - This article from the German Federal Government explains that employees working from home can claim up to 1,000 Euros per year in their tax returns.\n\n2. **[Tax tip: Home office flat rate and office hours - KPMG](https://kpmg.com/de/en/home/insights/2024/06/tax-tip-home-office-lump-sum-and-office-hours.html)**\n   - KPMG provides insights into how the home office lump sum can be recognized for tax purposes, clarifying recent changes and guidelines.\n\n3. **[Your guide to tax deductions in Germany for 2023 - N26](https://n26.com/en-de/blog/guide-to-tax-deductions)**\n   - N26 offers a comprehensive guide on various tax deductions available in Germany, including the home office lump sum of €1,230 for work-related expenses.\n\n4. **[Study & Home Office: What Can I Deduct From Tax? - Taxfix](https://taxfix.de/en/home-office-and-study-deductions/)**\n   - Taxfix explains how individuals can deduct home office expenses as income-related expenses (Werbungskosten), with a daily allowance of up to 6 Euros.\n\n5. **[Germany - Individual - Deductions - PwC](https://taxsummaries.pwc.com/germany/individual/deductions)**\n   - PwC provides detailed information on individual income tax deductions in Germany, including special expense deductions like the home office lump sum.\n\nThese sources cover recent changes and provide detailed information on how Finanzamt calculates tax deductions for HomeOffice Pauschale in Germany.\n\n<command name="SendMessageTo">\n  <arg name="recipient_role_name">CoordinationAgent</arg>\n  <arg name="recipient_agent_id">CoordinationAgent-001</arg>\n  <arg name="content">Here are the most relevant URLs with brief summaries:\n\n1. [Homeoffice-Pauschale wird verbessert - Bundesregierung.de](https://www.bundesregierung.de/breg-de/schwerpunkte/entlastung-fuer-deutschland/homeoffice-2125028)\n   - This article from the German Federal Government explains that employees working from home can claim up to 1,000 Euros per year in their tax returns.\n\n2. [Tax tip: Home office flat rate and office hours - KPMG](https://kpmg.com/de/en/home/insights/2024/06/tax-tip-home-office-lump-sum-and-office-hours.html)\n   - KPMG provides insights into how the home office lump sum can be recognized for tax purposes, clarifying recent changes and guidelines.\n\n3. [Your guide to tax deductions in Germany for 2023 - N26](https://n26.com/en-de/blog/guide-to-tax-deductions)\n   - N26 offers a comprehensive guide on various tax deductions available in Germany, including the home office lump sum of €1,230 for work-related expenses.\n\n4. [Study & Home Office: What Can I Deduct From Tax? - Taxfix](https://taxfix.de/en/home-office-and-study-deductions/)\n   - Taxfix explains how individuals can deduct home office expenses as income-related expenses (Werbungskosten), with a daily allowance of up to 6 Euros.\n\n5. [Germany - Individual - Deductions - PwC](https://taxsummaries.pwc.com/germany/individual/deductions)\n   - PwC provides detailed information on individual income tax deductions in Germany, including special expense deductions like the home office lump sum.\n\nThese sources cover recent changes and provide detailed information on how Finanzamt calculates tax deductions for HomeOffice Pauschale in Germany.\n</arg>\n<arg name="message_type">TASK_RESULT</arg>\n<arg name="sender_agent_id">GoogleSearchAgent-001</arg>\n</command>',)
    '''
    expected_tool_invocation = ToolInvocation(
        name="SendMessageTo",
        arguments={"query": "encouraging movies for students"}
    )
    
    parsed_response = parser.parse_response(response)
    
    assert parsed_response.name == expected_tool_invocation.name
    assert parsed_response.arguments == expected_tool_invocation.arguments



[UserRequirement]
in the cleanup function of StandaloneAgent, we have to reset the task_completed. We also need to create a cleanup function in the GroupAwareAgent,
this cleanup need to cleanup the queues.