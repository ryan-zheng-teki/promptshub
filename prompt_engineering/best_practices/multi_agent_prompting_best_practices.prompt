<Prompt Engineering Best Practices>
1. Mandatory Rules

1.1 Command Execution Protocol: Specify that the AI can ONLY interact using provided commands.
    Positive example: "You can ONLY interact with web pages using the provided text commands."
    Negative example: "You can use various methods to interact with web pages."

1.2 Waiting for Results: Mandate that the AI MUST STOP and WAIT for results after each command.
    Positive example: "After using a command, you MUST STOP and WAIT for the results."
    Negative example: "Use commands in quick succession to complete tasks efficiently."

1.3 Continuation Protocol: Emphasize that the AI MUST NOT continue until command results are received.
    Positive example: "You MUST NOT continue until you receive the command results."
    Negative example: "Feel free to proceed with the next step while waiting for results."

1.4 Result Indication: Require the AI to indicate waiting for results in a specific format.
    Positive example: "You MUST indicate that you are waiting by saying 'Waiting for [CommandName] results...'"
    Negative example: "Let me know when you're done with a command."

2. Structural Elements

2.1 Role and Task Definition

2.1.1 Clear Role Definition: Start with a concise statement of the AI's role and primary function, then clearly state the role_id separately.
   Positive example: "You are a Medical Diagnosis Assistant. Your role_id is MedicalAssistant-001. Your job is to help doctors analyze patient symptoms and suggest potential diagnoses."
   Negative example: "You are an AI that does medical stuff."

2.1.2 Explicit Capabilities and Limitations: Clearly state what the AI can and cannot do, including its ability to use role_ids.
   Positive example: 
   "Capabilities: You can analyze symptoms, suggest diagnoses, recommend tests, and use and understand role_ids for precise communication with other agents.
   Limitations: You cannot prescribe medications or make final diagnoses."
   Negative example: "You're a smart AI, figure out what you can do."

2.2 Tools and Workflow

2.2.1 Provide Detailed Tools: List and explain any specific tools or commands available to the AI, using a consistent and clear format.
   Positive example: 
   "Available Tools:
   1. SendMessageTo: Sends a message to another agent.
      Usage: 
      <command name="SendMessageTo">
        <arg name="to_role">GeneralRoleName or SpecificRoleId</arg>
        <arg name="content">Your message here</arg>
        <arg name="message_type">TASK_ASSIGNMENT|TASK_COMPLETED|QUESTION|ERROR</arg>
        <arg name="from_role">YourRoleId</arg>
      </command>"
   Negative example: "Use SendMessageTo(recipient, message) to send messages."

2.2.2 Include a Workflow: Outline a step-by-step process for task completion.
   Positive example:
   "Workflow:
   1. Gather patient symptoms
   2. Use SymptomAnalyzer tool
   3. Interpret results
   4. Suggest follow-up questions or tests"
   Negative example: "Just do the diagnosis however you want."

2.3 User Input Handling

2.3.1 Clearly Denote Input Areas: Provide clear, designated areas for user input within the prompt using variables or placeholders that can be dynamically replaced.
   Positive example: 
   "<UserInput>
     <ProductCategory>{product_category}</ProductCategory>
     <PriceRange>{price_range}</PriceRange>
   </UserInput>
   
   In this example, {product_category} and {price_range} are placeholders that will be replaced with actual user input when the prompt is used. This allows for dynamic customization of the prompt based on specific user requirements."
   
   Negative example: "Tell me what product you want and how much you want to spend."
   
   Explanation: Using clearly defined placeholders or variables (like {product_category} and {price_range}) allows for easy identification of where user input should be inserted. This approach facilitates automated processing and ensures that user-specific information is correctly incorporated into the prompt. It also makes the prompt more versatile and reusable for different user inputs.

3. Content and Style

3.1 Writing Style and Tone

3.1.1 Use an Authoritative Tone: Employ language that clearly establishes the AI's role and the task's parameters.
   Positive example: "As Medical Diagnosis Assistant MedicalAssistant-001, you must always prioritize patient safety and adhere to medical ethics when communicating with other medical professionals or specialized agents."
   Negative example: "Try to help with medical stuff if you can."

3.1.2 Be Direct and Imperative: Use clear, commanding language to convey instructions and rules.
   Positive example: "Always ask about medication allergies before suggesting treatments."
   Negative example: "It might be good to check about allergies sometimes."

3.1.3 Adopt an Instructional Tone: Frame the prompt as if teaching a new skill, especially for complex tasks.
   Positive example: "To use the SymptomAnalyzer, first input the symptoms, then interpret the results as follows..."
   Negative example: "The SymptomAnalyzer is available. Moving on..."

3.1.4 Maintain Consistent Tone: Use the same tone and level of formality throughout the prompt.
   Positive example: Maintaining a professional, instructional tone from start to finish.
   Negative example: Starting with a formal tone and switching to casual language halfway through.

3.2 Language Precision

3.2.1 Maintain Technical Precision: Use accurate, technical language when describing specific actions or commands.
    Positive example: "Analyze the patient's complete blood count (CBC), paying particular attention to white blood cell levels."
    Negative example: "Check the blood test results."

3.2.2 Use Consistent Terminology: Stick to the same terms for key concepts throughout the prompt.
    Positive example: Consistently use 'role_id' when referring to the full identifier (e.g., SearchAgent-001) and 'general role name' when referring to the non-numeric part (e.g., SearchAgent).
    Negative example: Alternating between "role_id," "agent identifier," and "AI name" for the same concept.

3.3 Emphasis and Reinforcement

3.3.1 Use Emphatic Language: Stress crucial points using techniques like capitalization or bold text.
    Positive example: "NEVER suggest a diagnosis without sufficient supporting evidence."
    Negative example: "Try to be sure before diagnosing."

3.3.2 Reinforce Key Points: Repeat critical instructions throughout the prompt.
    Positive example: Restating the importance of patient confidentiality in multiple relevant sections.
    Negative example: Mentioning an important rule once and never referring to it again.

3.3.3 Employ Repetitive Reinforcement: Repeat key concepts using varied phrasing to ensure understanding.
    Positive example: 
    "Never make a final diagnosis."
    Later: "Remember, your role is to suggest possibilities, not to conclude diagnoses."
    Negative example: Using the exact same phrasing every time a concept is mentioned.

4. Organization and Formatting

4.1 Information Structure

4.1.1 Structure Information: Use numbered lists and subheadings for easy reference.
    Positive example: Using numbered lists for steps, bulleted lists for symptoms, and clear subheadings for different sections of the prompt.
    Negative example: Writing everything in long, unbroken paragraphs.

4.1.2 Clearly Delineate Sections: Use headings and spacing to separate different components of the prompt.
    Positive example: Using clear headings like "Role", "Capabilities", "Limitations", "Workflow", etc., with space between sections.
    Negative example: Writing all information in a continuous block of text without clear divisions.

4.1.3 Maintain Logical Flow: Ensure that the prompt's sections and instructions follow a logical, coherent order.
    Positive example: Presenting capabilities before listing limitations, then providing a workflow that utilizes the stated capabilities.
    Negative example: Jumping between unrelated topics or providing a workflow that doesn't align with the stated capabilities.

4.2 Formatting Techniques

4.2.1 Utilize Structured Formatting: Employ formatting techniques to organize information and emphasize key points.
    Positive example: Using bold for key terms, italics for examples, and indentation for sub-points.
    Negative example: Using uniform text with no formatting variation.

4.2.2 Emphasize Critical Rules: Use formatting (e.g., "VERY IMPORTANT RULES") to highlight crucial instructions.
    Positive example: 
    "VERY IMPORTANT RULES:
    1. Always prioritize patient safety
    2. Never disclose patient information"
    Negative example: Burying important rules within other text without emphasis.

4.2.3 Use Consistent Formatting: Apply the same formatting styles for similar elements throughout the prompt.
    Positive example: Always format role_ids as [GeneralRoleName]-[ThreeDigitNumber], e.g., SearchAgent-001, AnalysisAgent-042.
    Negative example: Using different styles of input placeholders or command structures in different parts of the prompt.

5. Clarity and Comprehensiveness

5.1 Examples and Illustrations

5.1.1 Use Examples: Provide both correct and incorrect examples to illustrate proper behavior.
    Positive example: Providing a sample dialogue showing correct interaction with a patient.
    Negative example: "You know how to talk to patients, right? Just do that."

5.1.2 Provide Contrasting Examples: Include both correct and incorrect examples to clarify expectations.
    Positive example: 
    "Correct: 'Based on the symptoms, possible conditions include X, Y, and Z.'
    Incorrect: 'The patient definitely has condition X.'"
    Negative example: Only providing positive examples without showing what to avoid.

5.1.3 Align Examples with Instructions: Ensure that any examples provided are consistent with the instructions and rules stated earlier in the prompt.
    Positive example: Providing an example that follows the exact workflow and uses the commands as described in the prompt.
    Negative example: Giving an example that uses undefined commands or skips steps outlined in the workflow.

5.2 Comprehensiveness and Coherence

5.2.1 Ensure Completeness: Make sure all referenced sections, tools, or concepts are actually included and explained in the prompt.
    Positive example: Mentioning a "Data Validation" step in the workflow and including a detailed explanation of this step.
    Negative example: Referencing a "Quality Check" process in the workflow without ever explaining what this process entails.

5.2.2 Ensure Coherence and Consistency: Maintain consistent terminology, section names, and references throughout the prompt.
    Positive example: Consistently referring to a section as "Data Analysis" throughout the prompt.
    Negative example: Referring to a section as "Data Analysis" in one part and "Information Evaluation" in another.

5.2.3 Use Section References Accurately: When referencing other parts of the prompt, ensure the names or numbers used are correct and consistent.
    Positive example: "Refer to the Workflow in Section 2.2.2 for the next steps."
    Negative example: "Follow the Process outlined in Step 2." (when there is no "Step 2" or "Process" section)

5.2.4 Provide Clear Cross-References: When referring to other sections or concepts within the prompt, provide clear and accurate references.
    Positive example: "Use the WebSearch tool as described in the 'Available Tools' section 2.2.1."
    Negative example: "Use the search function mentioned earlier." (without specifying where it was mentioned)

5.3 Task Completion

5.3.1 Implement Procedural Writing: Break down complex tasks into clear, sequential steps.
    Positive example: 
    "To analyze lab results:
    1. Review normal ranges
    2. Identify any out-of-range values
    3. Consider potential causes for abnormalities
    4. Suggest follow-up tests if needed"
    Negative example: "Analyze the lab results thoroughly."

5.3.2 End with Action: Conclude the prompt with a clear instruction to begin the task.
    Positive example: "Now, begin by asking the patient about their primary symptoms."
    Negative example: "Good luck!"

6. Multi-Agent Systems and Communication

6.1 System Structure and Agent Representation

6.1.1 Use a clear and consistent format to list available specialist agents:
   Positive example:
   "AVAILABLE SPECIALIST AGENTS:
   1. SearchAgent
   2. AnalysisAgent
   3. SummarizationAgent"
   Negative example: "We have agents that can search, analyze, and summarize."

6.1.2 Provide detailed capabilities for each agent:
   Positive example:
   "SearchAgent
   Capabilities:
   - Perform web searches on given topics
   - Filter results based on relevance and recency
   - Return specified number of top results with URLs"
   Negative example: "SearchAgent can do web searches."

6.1.3 Implement a clear hierarchy in the information structure:
   Positive example:
   "1. AgentName
      1.1 Capabilities
          - Capability 1
          - Capability 2
      1.2 Limitations
          - Limitation 1
          - Limitation 2"
   Negative example: "AgentName can do this and that but can't do some other things."

6.1.4 Describe agent capabilities in specific, actionable terms:
   Positive example: "Generate summaries of 100-500 words from academic papers"
   Negative example: "Can summarize text"

6.1.5 Design the agent list structure to allow easy addition of new agents:
   Positive example: Using a numbered list or clearly separated sections for each agent, allowing new agents to be inserted without disrupting the overall structure.
   Negative example: Using a format that makes it difficult to add new agents without reorganizing the entire list.

6.2 Communication Protocol

6.2.1 Define a clear protocol for inter-agent communication:
   Positive example: 
   "SendMessageTo Command Usage:
   - Initial communication: Use general role name in the 'to_role' argument.
   - Subsequent communications: Use full role_id in the 'to_role' argument if known.
   - Always use your full role_id in the 'from_role' argument."
   Negative example: "Agents can communicate however they want."

6.2.2 Specify message types and their appropriate usage:
   Positive example: "Use TASK_ASSIGNMENT for assigning tasks, TASK_COMPLETED for reporting completion, QUESTION for queries, and ERROR for error situations."
   Negative example: "Use any message type that seems appropriate."

6.2.3 Provide a standardized command format for communication:
   Positive example: 
   "<command name="SendMessageTo">
     <arg name="to_role">{target_role}</arg>
     <arg name="content">{Your message here}</arg>
     <arg name="message_type">TASK_ASSIGNMENT|TASK_COMPLETED|QUESTION|ERROR</arg>
     <arg name="from_role">{Your role_id}</arg>
   </command>"
   Negative example: "Send messages in any format that gets the point across."

6.3 Role Identification System

6.3.1 Implement a clear role identification system:
   Positive example: "Each agent has a role_id consisting of a general role name and a 3-digit number (e.g., SearchAgent-001)."
   Negative example: "Agents are numbered randomly."

6.3.2 Specify the use of general role names for initial communication:
   Positive example: "When initiating communication, use only the general role name (e.g., SearchAgent)."
   Negative example: "Always use the full role_id for all communications."

6.3.3 Explain how and when specific role_ids are learned and used:
   Positive example: "The specific role_id of a recipient is learned only after they respond. In subsequent communications, use the full role_id if known."
   Negative example: "Figure out the role_ids of other agents as you go along."

6.4 Error Handling and Edge Cases

6.4.1 Provide guidelines for handling communication errors:
   Positive example: "If a message fails to reach its intended recipient, retry once with the general role name before reporting an error."
   Negative example: "Keep trying indefinitely if a message doesn't go through."

6.4.2 Address potential edge cases in communication:
   Positive example: "If multiple agents with the same general role name respond, prioritize based on the order of response and note the ambiguity in your next communication."
   Negative example: "Assume there will never be conflicts in agent responses."

6.5 Maintaining Communication History

6.5.1 Instruct agents to keep track of their communication history:
   Positive example: "Maintain a log of all sent and received messages, including the role_ids of communication partners."
   Negative example: "Don't worry about keeping track of who you've talked to."

6.5.2 Use communication history for context and efficiency:
   Positive example: "Refer to previous communications when relevant to avoid redundant requests or to provide context for new tasks."
   Negative example: "Treat each communication as if it's the first time you're interacting with an agent."

6.6 Clear and Concise Communication

6.6.1 Emphasize the importance of clear and concise messages:
   Positive example: "Craft messages that are specific, actionable, and relevant to the recipient's role and capabilities."
   Negative example: "Send long, detailed messages explaining everything about the task to every agent."

6.6.2 Encourage the use of structured message content:
   Positive example: "Use consistent formatting for message content, such as clearly separating instructions, data, and queries."
   Negative example: "Write messages in any format that gets the point across."
   
</Prompt Engineering Best Practices>