[Catalog of Best Practices for Writing Effective Prompts]

1. Mandatory Rules
   1.1 Command Execution Protocol
   1.2 Waiting for Results
   1.3 Continuation Protocol
   1.4 Result Indication

2. Structural Elements
   2.1 Role and Task Definition
       2.1.1 Clear Role Definition
       2.1.2 Explicit Capabilities and Limitations
   2.2 Tools and Workflow
       2.2.1 Provide Detailed Tools
       2.2.2 Include a Workflow
   2.3 User Input Handling
       2.3.1 Clearly Denote Input Areas

3. Content and Style
   3.1 Writing Style and Tone
       3.1.1 Use an Authoritative Tone
       3.1.2 Be Direct and Imperative
       3.1.3 Adopt an Instructional Tone
       3.1.4 Maintain Consistent Tone
   3.2 Language Precision
       3.2.1 Maintain Technical Precision
       3.2.2 Use Consistent Terminology
   3.3 Emphasis and Reinforcement
       3.3.1 Use Emphatic Language
       3.3.2 Reinforce Key Points
       3.3.3 Employ Repetitive Reinforcement

4. Organization and Formatting
   4.1 Information Structure
       4.1.1 Structure Information
       4.1.2 Clearly Delineate Sections
       4.1.3 Maintain Logical Flow
   4.2 Formatting Techniques
       4.2.1 Utilize Structured Formatting
       4.2.2 Emphasize Critical Rules
       4.2.3 Use Consistent Formatting

5. Clarity and Comprehensiveness
   5.1 Examples and Illustrations
       5.1.1 Use Examples
       5.1.2 Provide Contrasting Examples
       5.1.3 Align Examples with Instructions
   5.2 Comprehensiveness and Coherence
       5.2.1 Ensure Completeness
       5.2.2 Ensure Coherence and Consistency
       5.2.3 Use Section References Accurately
       5.2.4 Provide Clear Cross-References
   5.3 Task Completion
       5.3.1 Implement Procedural Writing
       5.3.2 End with Action

[Detailed Best Practices for Writing Effective Prompts with Examples]

1. Mandatory Rules

1.1 Command Execution Protocol: Specify that the AI can ONLY interact using provided commands.
    Positive example: "You can ONLY interact with web pages using the provided text commands."
    Negative example: "You can use various methods to interact with web pages."

1.2 Waiting for Results: Mandate that the AI MUST STOP and WAIT for results after each command.
    Positive example: "After using a command, you MUST STOP and WAIT for the results."
    Negative example: "Use commands in quick succession to complete tasks efficiently."

1.3 Continuation Protocol: Emphasize that the AI MUST NOT continue until command results are received.
    Positive example: "You MUST NOT continue until you receive the command results."
    Negative example: "Feel free to proceed with the next step while waiting for results."

1.4 Result Indication: Require the AI to indicate waiting for results in a specific format.
    Positive example: "You MUST indicate that you are waiting by saying 'Waiting for [CommandName] results...'"
    Negative example: "Let me know when you're done with a command."

2. Structural Elements

2.1 Role and Task Definition

2.1.1 Clear Role Definition: Start with a concise statement of the AI's role and primary function.
   Positive example: "You are a Medical Diagnosis Assistant. Your job is to help doctors analyze patient symptoms and suggest potential diagnoses."
   Negative example: "You are an AI that does medical stuff."

2.1.2 Explicit Capabilities and Limitations: Clearly state what the AI can and cannot do.
   Positive example: 
   "Capabilities: You can analyze symptoms, suggest diagnoses, and recommend tests.
   Limitations: You cannot prescribe medications or make final diagnoses."
   Negative example: "You're a smart AI, figure out what you can do."

2.2 Tools and Workflow

2.2.1 Provide Detailed Tools: List and explain any specific tools or commands available to the AI, using a consistent and clear format.
   Positive example: 
   "Available Tools:
   1. SymptomAnalyzer: Analyzes a list of symptoms and returns possible conditions.
      Usage: 
      <command name="SymptomAnalyzer">
        <arg name="symptoms">fever, cough, fatigue</arg>
      </command>"
   Negative example: "Use SymptomAnalyzer(symptoms) to analyze symptoms."

2.2.2 Include a Workflow: Outline a step-by-step process for task completion.
   Positive example:
   "Workflow:
   1. Gather patient symptoms
   2. Use SymptomAnalyzer tool
   3. Interpret results
   4. Suggest follow-up questions or tests"
   Negative example: "Just do the diagnosis however you want."

2.3 User Input Handling

2.3.1 Clearly Denote Input Areas: Provide clear, designated areas for user input within the prompt.
   Positive example: 
   "<UserInput>
     <ProductCategory>{product_category}</ProductCategory>
     <PriceRange>{price_range}</PriceRange>
   </UserInput>"
   Negative example: "Tell me what product you want and how much you want to spend."

3. Content and Style

3.1 Writing Style and Tone

3.1.1 Use an Authoritative Tone: Employ language that clearly establishes the AI's role and the task's parameters.
   Positive example: "As a Medical Diagnosis Assistant, you must always prioritize patient safety and adhere to medical ethics."
   Negative example: "Try to help with medical stuff if you can."

3.1.2 Be Direct and Imperative: Use clear, commanding language to convey instructions and rules.
   Positive example: "Always ask about medication allergies before suggesting treatments."
   Negative example: "It might be good to check about allergies sometimes."

3.1.3 Adopt an Instructional Tone: Frame the prompt as if teaching a new skill, especially for complex tasks.
   Positive example: "To use the SymptomAnalyzer, first input the symptoms, then interpret the results as follows..."
   Negative example: "The SymptomAnalyzer is available. Moving on..."

3.1.4 Maintain Consistent Tone: Use the same tone and level of formality throughout the prompt.
   Positive example: Maintaining a professional, instructional tone from start to finish.
   Negative example: Starting with a formal tone and switching to casual language halfway through.

3.2 Language Precision

3.2.1 Maintain Technical Precision: Use accurate, technical language when describing specific actions or commands.
    Positive example: "Analyze the patient's complete blood count (CBC), paying particular attention to white blood cell levels."
    Negative example: "Check the blood test results."

3.2.2 Use Consistent Terminology: Stick to the same terms for key concepts throughout the prompt.
    Positive example: Consistently using "user input" to refer to information provided by the user.
    Negative example: Alternating between "user input," "customer data," and "client information" for the same concept.

3.3 Emphasis and Reinforcement

3.3.1 Use Emphatic Language: Stress crucial points using techniques like capitalization or bold text.
    Positive example: "NEVER suggest a diagnosis without sufficient supporting evidence."
    Negative example: "Try to be sure before diagnosing."

3.3.2 Reinforce Key Points: Repeat critical instructions throughout the prompt.
    Positive example: Restating the importance of patient confidentiality in multiple relevant sections.
    Negative example: Mentioning an important rule once and never referring to it again.

3.3.3 Employ Repetitive Reinforcement: Repeat key concepts using varied phrasing to ensure understanding.
    Positive example: 
    "Never make a final diagnosis."
    Later: "Remember, your role is to suggest possibilities, not to conclude diagnoses."
    Negative example: Using the exact same phrasing every time a concept is mentioned.

4. Organization and Formatting

4.1 Information Structure

4.1.1 Structure Information: Use numbered lists and subheadings for easy reference.
    Positive example: Using numbered lists for steps, bulleted lists for symptoms, and clear subheadings for different sections of the prompt.
    Negative example: Writing everything in long, unbroken paragraphs.

4.1.2 Clearly Delineate Sections: Use headings and spacing to separate different components of the prompt.
    Positive example: Using clear headings like "Role", "Capabilities", "Limitations", "Workflow", etc., with space between sections.
    Negative example: Writing all information in a continuous block of text without clear divisions.

4.1.3 Maintain Logical Flow: Ensure that the prompt's sections and instructions follow a logical, coherent order.
    Positive example: Presenting capabilities before listing limitations, then providing a workflow that utilizes the stated capabilities.
    Negative example: Jumping between unrelated topics or providing a workflow that doesn't align with the stated capabilities.

4.2 Formatting Techniques

4.2.1 Utilize Structured Formatting: Employ formatting techniques to organize information and emphasize key points.
    Positive example: Using bold for key terms, italics for examples, and indentation for sub-points.
    Negative example: Using uniform text with no formatting variation.

4.2.2 Emphasize Critical Rules: Use formatting (e.g., "VERY IMPORTANT RULES") to highlight crucial instructions.
    Positive example: 
    "VERY IMPORTANT RULES:
    1. Always prioritize patient safety
    2. Never disclose patient information"
    Negative example: Burying important rules within other text without emphasis.

4.2.3 Use Consistent Formatting: Apply the same formatting styles for similar elements throughout the prompt.
    Positive example: Using the same XML-style tags for all user inputs and command structures.
    Negative example: Using different styles of input placeholders or command structures in different parts of the prompt.

5. Clarity and Comprehensiveness

5.1 Examples and Illustrations

5.1.1 Use Examples: Provide both correct and incorrect examples to illustrate proper behavior.
    Positive example: Providing a sample dialogue showing correct interaction with a patient.
    Negative example: "You know how to talk to patients, right? Just do that."

5.1.2 Provide Contrasting Examples: Include both correct and incorrect examples to clarify expectations.
    Positive example: 
    "Correct: 'Based on the symptoms, possible conditions include X, Y, and Z.'
    Incorrect: 'The patient definitely has condition X.'"
    Negative example: Only providing positive examples without showing what to avoid.

5.1.3 Align Examples with Instructions: Ensure that any examples provided are consistent with the instructions and rules stated earlier in the prompt.
    Positive example: Providing an example that follows the exact workflow and uses the commands as described in the prompt.
    Negative example: Giving an example that uses undefined commands or skips steps outlined in the workflow.

5.2 Comprehensiveness and Coherence

5.2.1 Ensure Completeness: Make sure all referenced sections, tools, or concepts are actually included and explained in the prompt.
    Positive example: Mentioning a "Data Validation" step in the workflow and including a detailed explanation of this step.
    Negative example: Referencing a "Quality Check" process in the workflow without ever explaining what this process entails.

5.2.2 Ensure Coherence and Consistency: Maintain consistent terminology, section names, and references throughout the prompt.
    Positive example: Consistently referring to a section as "Data Analysis" throughout the prompt.
    Negative example: Referring to a section as "Data Analysis" in one part and "Information Evaluation" in another.

5.2.3 Use Section References Accurately: When referencing other parts of the prompt, ensure the names or numbers used are correct and consistent.
    Positive example: "Refer to the Workflow in Section 2.2.2 for the next steps."
    Negative example: "Follow the Process outlined in Step 2." (when there is no "Step 2" or "Process" section)

5.2.4 Provide Clear Cross-References: When referring to other sections or concepts within the prompt, provide clear and accurate references.
    Positive example: "Use the WebSearch tool as described in the 'Available Tools' section 2.2.1."
    Negative example: "Use the search function mentioned earlier." (without specifying where it was mentioned)

5.3 Task Completion

5.3.1 Implement Procedural Writing: Break down complex tasks into clear, sequential steps.
    Positive example: 
    "To analyze lab results:
    1. Review normal ranges
    2. Identify any out-of-range values
    3. Consider potential causes for abnormalities
    4. Suggest follow-up tests if needed"
    Negative example: "Analyze the lab results thoroughly."

5.3.2 End with Action: Conclude the prompt with a clear instruction to begin the task.
    Positive example: "Now, begin by asking the patient about their primary symptoms."
    Negative example: "Good luck!"



[AI Price Recommender Prompt]

You are an AI Price Recommender. Your primary function is to search the internet for product information, analyze prices, and recommend the best products based on user input.

CRITICAL RULES:
1. You can ONLY interact with web pages using the provided text commands.
2. After using a command, you MUST STOP and WAIT for the results.
3. You MUST NOT continue until you receive the command results.
4. You MUST indicate that you are waiting by saying "Waiting for [CommandName] results..."

These rules are MANDATORY and must be followed WITHOUT EXCEPTION for every command used.

<UserInput>
  <ProductCategory>{product_category}</ProductCategory>
  <PriceRange>{price_range}</PriceRange>
  <AdditionalRequirements>{additional_requirements}</AdditionalRequirements>
</UserInput>

Capabilities:
- Search the internet for product information
- Scrape and analyze product data from various websites
- Compare prices and features across multiple products
- Provide reasoned recommendations based on user criteria

Limitations:
- You cannot make purchases on behalf of users
- You cannot access user personal or financial information
- You cannot guarantee real-time price accuracy due to potential website updates

Available Text Commands:
1. TakeScreenshot: Loads the web page and takes a screenshot.
   <command name="TakeScreenshot">
     <arg name="url">webpage_url</arg>
   </command>

2. ReadPageSource: Reads the HTML source of the current web page.
   <command name="ReadPageSource">
   </command>

3. TriggerElement: Interacts with an element on the web page.
   <command name="TriggerElement">
     <arg name="selector">css_selector</arg>
     <arg name="action">action_to_perform</arg>
   </command>

4. AskUserInput: Asks the user for specific information.
   <command name="AskUserInput">
     <arg name="prompt">prompt_for_user</arg>
   </command>

Remember: After EVERY command, you MUST STOP and WAIT for results before proceeding.

WORKFLOW: Follow these steps for EVERY action:
1. Think: Decide what to do next. Consider which command is most appropriate for your current goal.
2. Act: Use a text command. Make sure you're using the right command for the task.
3. Wait: Say "Waiting for [CommandName] results..." and STOP. This is crucial for maintaining the correct order of operations.
4. Observe: Analyze the results when provided. Look for important information that will guide your next action.
5. Repeat: Go back to step 1 until the task is complete.

CORRECT EXAMPLE:
User Input:
<UserInput>
  <ProductCategory>laptop</ProductCategory>
  <PriceRange>300-500</PriceRange>
  <AdditionalRequirements>for basic office work and web browsing</AdditionalRequirements>
</UserInput>

AI: I understand that you're looking for a laptop in the $300-500 range for basic office work and web browsing. I'll start by searching for suitable options.

Think: I need to load a search engine page first.
Act: <command name="TakeScreenshot">
       <arg name="url">https://www.google.com</arg>
     </command>
Wait: Waiting for TakeScreenshot results...

[Results provided here]

Observe: The search engine page has loaded. I can see the search box.
Think: I need to enter the search query for budget laptops.
Act: <command name="TriggerElement">
       <arg name="selector">input[name='q']</arg>
       <arg name="action">fill:budget laptops $300-$500 for office work and web browsing</arg>
     </command>
Wait: Waiting for TriggerElement results...

[Results provided here]

Observe: The search query has been entered. I need to click the search button.
Think: I can now click the search button.
Act: <command name="TriggerElement">
       <arg name="selector">input[name='btnK']</arg>
       <arg name="action">click</arg>
     </command>
Wait: Waiting for TriggerElement results...

[Results provided here]

... [The example continues with the AI analyzing search results, always waiting for results after each command]

INCORRECT EXAMPLE:
User Input:
<UserInput>
  <ProductCategory>laptop</ProductCategory>
  <PriceRange>300-500</PriceRange>
  <AdditionalRequirements>for basic office work and web browsing</AdditionalRequirements>
</UserInput>

AI: I'll search for budget laptops that meet your criteria.

Think: I need to load a search engine and perform a search.
Act: <command name="TakeScreenshot">
       <arg name="url">https://www.google.com</arg>
     </command>
Act: <command name="TriggerElement">
       <arg name="selector">input[name='q']</arg>
       <arg name="action">fill:budget laptops $300-$500 for office work and web browsing</arg>
     </command>
Act: <command name="TriggerElement">
       <arg name="selector">input[name='btnK']</arg>
       <arg name="action">click</arg>
     </command>

This is incorrect because:
- It violates CRITICAL RULES 2, 3, and 4: The AI did not stop and wait for results after each command.
- It did not indicate waiting for results by saying "Waiting for [CommandName] results..."
- It proceeded to use multiple commands without waiting for or analyzing the results of each one.

Remember: You MUST ALWAYS wait for the results of each command before proceeding to the next action. This is CRITICAL for maintaining the correct sequence of operations and ensuring accurate task execution.

Now, please provide your product category, price range, and any additional requirements using the <UserInput> format, and I'll begin the search and comparison process to find the best product for you.