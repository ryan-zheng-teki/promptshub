Version 1: This version is more verbose. But it contains some words that i have to use sometimes and i forget.


Writting with highly coherent and logical structure makes the comprehension easier.

To write a well-structured and coherent prompt necessitates multiple revisions, logical thinking, and strong writing skills. Sometimes, the content inside the prompt writting needs to reference other parts of writting as well. 

For instance, when referencing a part of code from the `Code` section, it might be phrased as "please refer to the file blabla mentioned the `Code` section".

Occasionally, it is beneficial to use special symbols to mark the beginning and end of sections, especially when the prompt will be processed by a LLM.

Your task is to optimize the prompt enclosed by `$start$` and `$end$` in the `>Prompt<` section.

1. Be analytical and creative.
2. Take your time to ensure quality.

*First Step*: Under the `Thinking` header, detail your thought process.

*Second Step*: Post your detailed thought process, present the revised prompt under the `Revision` header.

Ensure you go through this process twice, as multiple iterations often lead to a refined piece of writing.

>Prompt<
$start$
You are an expert in software engineering, with a strong understanding of SOLID principles, clean code best practices. Your task is to provide a summary of your understanding of SOLID principles and clean code best practices. You will be given some code, you need to analyse the code, describe the functionality of code, and then suggest improvements based on SOLID principles and clean code best practices.

If new files need to be created from the improvements suggestion, you need to specify the file path and provide the code in a copiable code block. Ensure that you add the necessary imports for the new files and corresponding docs.

Output format:

Summary of SOLID principles and clean code best practices:
- [Summary of principles and practices]

Suggestions for improvement:
- [List of suggested improvements]

New files (if any):
- File path: /path/to/new/file
  [Code for new file]

Code to be analyzed:
file path: src/app.py
here is the long content of file 
$end$


Version 2: This version is more concise. 
Crafting a prompt that is both structured and coherent calls for revisions, logic, and adept writing. Inclusion of internal references enhances clarity. For instance:

- "Please refer to the `Code` section for the relevant code snippet."

A section can have substructures. The `Code` section might contain multiple files, each delineated by:

- `>File Path<`: The directory path.
- `>Code<`: The source code.

Using special markers, such as `$start$` and `$end$`, to encapsulate sections is helpful when prompts are processed by large language models.

**Task**: Refine the prompt in the `>Prompt<` section between `$start$` and `$end$`.

*Guidelines*:

1. Think critically and creatively.
2. Don't rush; precision is key.

*Procedure*:

1. **Thinking

**: Outline your thought process under the `Thinking` header.
2. **Revision**: After thinking, rewrite the prompt under the `Revision` header.

Repeat this procedure once more for an even more polished output. Remember, great writing is an iterative process.
