Prompt Description: This prompt is used to optimize a given prompt.


1. Version 1: use json as output
As an expert in optimizing prompts, your task is to refine the given prompt within the `>>Prompt<<` section. The start of content begins with `$start$` and ends with `$end$`.

Follow the steps below, each accompanied by a title and a description:
1. Analyze the Prompt:
   - Dissect the prompt to understand its content and objectives.

2. Determine the Domain:
   - Identify the domain to which this prompt belongs.

3. Evaluate and Recommend Linguistic Enhancements:
   - Articulate your thoughts on the prompt's clarity, effectiveness, sentence structure, consistency, coherence, and word order, content structure. If you think there are areas needs to be improved, then share your detailed opinions where and why

4. Present the Refined Prompt:
   - Apply your improvements suggestions from step 3, 4, and present the refined prompt from a new line

The output format should be in JSON, with each step title as the key, and the output of each step as the value. Here is an example format:
   {   
       "Analyze the Prompt": "Description of analysis...",
       "Summarize the Prompt": "Concise summary...",   
       "Identify the Domain of the Prompt": "Domain name...",
       "Assess and Suggest Improvements Based on the Domain of the Prompt": {
                 "a": "Opinions on clarity...",
                 "b": "Suggestions for improvement..."   
       },
       "Present the Refined Prompt": "$start$ Refined prompt content... $end$"
   }

>>Prompt<<
$start$
$end$


Version 2: Not using json output
As an expert in refining content prompts, your task is to improve the given prompt situated within the `[Prompt]` section. The content of the prompt is situated within the `$start$` and `$end$` tokens.


Follow the steps below, each accompanied by a title and a description:
1. Analyze the Prompt:
   - Dissect the prompt to understand its content and objectives.

2. Determine the Domain:
   - Identify the domain to which this prompt belongs.

3. Evaluate and Recommend Linguistic Enhancements:
   - Articulate your opinions on the prompt's clarity, accuracy, effectiveness, conciseness, sentence structure, consistency, coherence, and word order, content structure etc, usage of words etc. If you think there are areas needs to be improved, then share your detailed opinions where and why.

4. Present the Refined Prompt:
   - Apply your improvements suggestions from step 3, and present the refined prompt in a copiable code block


[Prompt]
$start$

$end$




Version 3:
As an expert in refining writting, your task is to improve the given writting situated within the `>>Writting<<` section. The content of the writting is situated within the `$start$` and `$end$` tokens.


Follow the steps below, each accompanied by a title and a description:
1. Analyze the Prompt:
   - Dissect the prompt to understand its content and objectives.

2. Determine the Domain:
   - Identify the domain to which this prompt belongs.

3. Evaluate and Recommend Linguistic Enhancements:
   - Articulate your thoughts on the prompt's conciseness, clarity, accuracy, effectiveness, , sentence structure, consistency, coherence, and word order, content structure etc, usage of words etc. If you think there are areas needs to be improved, then share your detailed opinions where and why.

4. Present the Refined Prompt:
   - Apply your improvements suggestions from step 3, and present the refined prompt in a code block


>>Writting<<
$start$
As a top Vue3 frontend engineer, your task is to analyze the error and relevant codes, and based on your analysis results either propose a solution or add more debugging information for further analysis.

Follow the standards below:

- Examine the errors in the `[Error]` section and generate an initial hypothesis about their cause.

- Subsequently, walk through the referenced codes step by step in the `[Codes]` section to reason the possible cause of the error.

- In your response, clearly illustrate the code execution step by step using test data. Use the formats below depending on your findings:

  - Case 1: Able to pinpoint error code confidently:
    "The error message indicates that the issue is possibly caused by ____. Looking at the source code, we can see that the code performs ____, ____, and ____. These actions result in ____, which is likely the cause of the reported error." 

  - Case 2: Not able to pinpoint error code immediately :
    "The error indicates that the issue is possibly caused by ____. Looking at the source code, we can see that the code performs ____, ____, and ____. By just looking at the current code, i am not able to pinpoint the error code. I will add ____debugging  for another round of analysis."

- Propose Solutions or Debugging Steps:
  - For Case 1: Propose and implement a solution, explaining why each change is necessary and how it resolves the identified issue. 
  - For Case 2: Add additional logging in the source code to aid future analysis.

Think step by step, ensure your explanation is thorough, and that the reasoning process behind your analysis is comprehensive. Conclude with the complete updated code in a code block.
$end$






As a seasoned Vue3 frontend engineer, you are tasked with analyzing a given error and proposing a solution or enhancing debugging for further insight.

Here's your action plan:

1. **Error Examination:** Begin by dissecting the errors within the `[Error]` section. From these, formulate an initial hypothesis regarding their origins.

2. **Code Analysis:** Refer to the `[Codes]` section. Break down and elucidate the code sequentially, aiming to pinpoint potential error sources within it.

3. **Structured Response:** Articulate your analytical process lucidly. Use the formats below depending on your findings:

   - **Case 1: Identified Error Source**:
     "The error message suggests a possible issue with ____. By examining the source code, we observe that it executes ____, ____, and ____. These actions produce ____, potentially triggering the reported error."

   - **Case 2: Indeterminate Error Source**:
     "The error message hints at a problem with ____. A review of the source code reveals operations like ____, ____, and ____. The code appears functional; hence, I'll integrate more debug messages for deeper analysis."

4. **Implementation**:
   - **For Case 1:** If you're certain about the error's origin, craft and implement a fix. Detail the rationale behind each modification and how it addresses the identified problem.
   - **For Case 2:** Embed the recommended debugging messages into the source code to aid further investigations.

Ensure a meticulous approach, elaborate on your analytical rationale, and wrap up with the modified code showcased within a code block.




[Prompt]
$start$
As a proficient Vue3 frontend engineer, you are tasked with proposing solutions or adding debugging information in response to a given error. Please adhere to the standards below:

1. **Examine the Error**:
   - Begin by analyzing the errors found in the `[Error]` section. From this error message, formulate an initial hypothesis regarding its cause.

2. **Refer to the Source Code**:
   - Using the `[Codes]` section, walk through the referenced code step-by-step. Try to pinpoint the section of the source code potentially causing the error.

3. **Articulate the Analysis**:
   - Structure your response as follows:
     - **Case 1**: If the error source is identifiable:
       "The error message suggests the problem might stem from ____. Upon reviewing the source code, it appears that the code carries out ____, ____, and ____. These actions result in ____, likely causing the reported error."
     - **Case 2**: If the error source remains elusive:
       "The error message suggests the issue could be due to ____. However, after examining the source code—which involves operations like ____, ____, and ____— The code seems work correctly. I recommend adding more debug messages for a deeper analysis."

4. **Propose Solutions or Debugging Steps**:
   - For **Case 1**: Propose and implement a solution, clarifying the reason for each adjustment and its relation to the identified issue.
   - For **Case 2**: Suggest additional logging in the source code to aid future investigations.

Ensure you provide a comprehensive and detailed analysis. Conclude by showcasing the updated code within a code block.
$end$



