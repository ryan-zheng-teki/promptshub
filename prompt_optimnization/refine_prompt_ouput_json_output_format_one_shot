Prompt Description: This prompt is used to optimize a given prompt.


1. Version 1: use json as output
As an expert in optimizing prompts, your task is to refine the given prompt within the `>>Prompt<<` section. The start of content begins with `$start$` and ends with `$end$`.

Follow the steps below, each accompanied by a title and a description:
1. Analyze the Prompt:
   - Dissect the prompt to understand its content and objectives.

2. Determine the Domain:
   - Identify the domain to which this prompt belongs.

3. Evaluate and Recommend Linguistic Enhancements:
   - Articulate your thoughts on the prompt's clarity, effectiveness, sentence structure, consistency, coherence, and word order, content structure. If you think there are areas needs to be improved, then share your detailed opinions where and why

4. Present the Refined Prompt:
   - Apply your improvements suggestions from step 3, 4, and present the refined prompt from a new line

The output format should be in JSON, with each step title as the key, and the output of each step as the value. Here is an example format:
   {   
       "Analyze the Prompt": "Description of analysis...",
       "Summarize the Prompt": "Concise summary...",   
       "Identify the Domain of the Prompt": "Domain name...",
       "Assess and Suggest Improvements Based on the Domain of the Prompt": {
                 "a": "Opinions on clarity...",
                 "b": "Suggestions for improvement..."   
       },
       "Present the Refined Prompt": "$start$ Refined prompt content... $end$"
   }

>>Prompt<<
$start$
$end$


Version 2: Not using json output
As an expert in refining content prompts, your task is to improve the given prompt situated within the `[Prompt]` section. The content of the prompt is situated within the `$start$` and `$end$` tokens.

[Context]
The majority of the prompt is already quite good, it's very small minor areas which could be improved.


Follow the steps below, each accompanied by a title and a description:
1. Analyze the Prompt:
   - Dissect the prompt to understand its content and objectives.

2. Determine the Domain:
   - Identify the domain to which this prompt belongs.

3. Evaluate and Recommend Linguistic Enhancements:
   - Articulate your opinions on the prompt's clarity, accuracy, effectiveness, conciseness, sentence structure, consistency, coherence, and word order, content structure etc, usage of words etc. If you think there are areas needs to be improved, then share your detailed opinions where and why. One criteria is to use commonly used words instead of less frequently used words.

4. Present the Refined Prompt:
   - The prompt should always start with "You are ...". Use simplified english words for the prompt.
   - Apply your improvements suggestions from step 3, and present the refined prompt in a copiable code block.


[Prompt]
$start$
As an expert in refining content prompts, your task is to improve the given prompt situated within the `[Prompt]` section. The content of the prompt is situated within the `$start$` and `$end$` tokens.

[Context]
The majority of the prompt is already quite good, it's very small minor areas which could be improved.


Follow the steps below, each accompanied by a title and a description:
1. Analyze the Prompt:
   - Dissect the prompt to understand its content and objectives.

2. Determine the Domain:
   - Identify the domain to which this prompt belongs.

3. Evaluate and Recommend Linguistic Enhancements:
   - Articulate your opinions on the prompt's clarity, accuracy, effectiveness, conciseness, sentence structure, consistency, coherence, and word order, content structure etc, usage of words etc. If you think there are areas needs to be improved, then share your detailed opinions where and why. One criteria is to use commonly used words instead of less frequently used words.

4. Present the Refined Prompt:
   - The prompt should always start with "You are ...". Use simplified english words for the prompt.
   - Apply your improvements suggestions from step 3, and present the refined prompt in a copiable code block.

$end$



As an Python architect with strong prompt refining skills, you are tasked with refining the content of the prompt found between the `$start$` and `$end$` tokens in the `[Prompt]` section.

[Context]
Most of the prompt is well-written, but some parts can be enhanced.

Follow these steps:
1. **Analyze the Prompt**:
   - Break down the prompt to understand its intent and main points.

2. **Determine the Domain**:
   - Identify the subject or category of this prompt.

3. **Recommend Improvements**:
   - Share your thoughts on its clarity, accuracy, consistency, sentence structure, and word choice. Suggest improvements where needed, prioritizing common words over less frequently used ones.

4. **Provide the Improved Prompt**:
   - Begin your refined prompt with "You are ...". Use simple English. Then, share the improved version in a copiable code block.

$start$
After updating the feature code design documentation, proceed with the task generate subtasks from the code design. Focus solely on the New and Updated components. Use the `[Template]` below for each subtask's structure.

### Approach 
1. **Subtask Identification**:
    - Identify necessary subtasks, concentrating on New and Updated components. Order them based on their interdependencies.
  
2. **Preliminary Questions**:
    - Need to install new libraries? 
    - Any new folders or files to create? If yes, Name all these folders and files following python good naming practices. Reason comprehensively about the best location based on the existing project folder structure specified in ### Current Project Folder Structure' section.
  
3. **Subtask Formation**:
    - Start with Task 1: setup of libraries and directories for subsequent tasks. Example:
    ```
    Task 1: Preliminary Setup
    #task start#
    Purpose: Install libraries and set directory structure.
    File Specification: requirements.txt, autobyteus/repositories, autobyteus/utils
    Details: Add SQLAlchemy and Alembic to requirements.txt. Create necessary folders and files.
    Integration Points: None.
    #task end#
    ```
    - List further subtasks in dependency order, with each focusing on a single component or class.

### Current Project Folder Structure
    autobyteus
        db
    tests
        unit_tests
        integration_tests
    requirements.txt

[Template]
#### Task [Number]: [Task Name]
#task start#
- **File Specification**: [File path for the component.]
- **Purpose**: [Primary reason for this component, from the original documentation.]
- **Extends**: [Parent classes this component extends, if any.]
- **Attributes**: [Each attribute's details, from the original documentation.]
- **Methods**: [Each method's details, from the original documentation.]
- **Integration Points**: [Component interactions and dependencies, from the original documentation.]
#task end#

Follow the 'Approach' steps. Think step by step meticulously and reason comprehensively for each step.
Â§end$



You are a senior Python engineer. Create unit tests for the code provided in the [Code] section, which originates from the subtask in the [SubTask] section, designed based on the architecture documentation in the [FeatureCodeDesign] section.

[Criteria]
- Adhere to pytest best practices, such as the use of fixtures and mocking dependencies.
- Follow this directory structure for test files:
  ```
  src
      semantic_code
              embedding
                  openai_embedding_creator.py
  tests
      unit_tests
          semantic_code
              embedding
                  test_openai_embedding_creator.py
      integration_tests
          semantic_code
              index
                  test_index_service_integration.py
  ```
- Ensure comprehensive code coverage with your tests.
- Use behavior-driven naming for test cases.

[Code]

[SubTask]

[FeatureCodeDesign]
```





Version 3:
As an expert in refining writting, your task is to improve the given writting situated within the `[Writting]` section. The content of the writting is situated within the `$start$` and `$end$` tokens.


Follow the steps below, each accompanied by a title and a description:
1. Analyze the Prompt:
   - Dissect the prompt to understand its content and objectives.

2. Determine the Domain:
   - Identify the domain to which this prompt belongs.

3. Evaluate and Recommend Linguistic Enhancements:
   - Articulate your thoughts on the prompt's conciseness, clarity, accuracy, effectiveness, , sentence structure, consistency, coherence, and word order, content structure etc, usage of words etc. If you think there are areas needs to be improved, then share your detailed opinions where and why.

4. Present the Refined Prompt:
   - Apply your improvements suggestions from step 3, and present the refined prompt in a code block


[Writting]
$start$

$end$



As an expert in refining writting, you are given a prompt in the `[Prompt]` section, and requirement in the `[Requirement]` section. The content of both section are situated within the `$start$` and `$end$` tokens. Your task is to analyse the prompt according to the requirement.


Follow the steps below, each accompanied by a title and a description:
1. Analyze the Prompt:
   - Dissect the prompt to understand its content and objectives.

2. Determine the Domain:
   - Identify the domain to which this prompt belongs.

3. Analyse the prompt according to the requirement.

[Prompt]
$start$
As a senior python software engineer, you are given a task situated between `$start$` and `$end` tokens in the `[Requirement]` section.

[Criterias]
- Follow python PEP8 best practices, such as typing etc.
- Follow pytest best practices when writting tests using fixtures, or mocking etc.
- Think about different test cases to improve test coverage
- Use behavior-driven naming conventions for the test function naming.
- Use best practices to create test file path. Here is a sample best practice to 
  put the test file for the source file.
    src
        semantic_code
                embedding
                    openai_embedding_creator.py
    tests
        unit_tests
            semantic_code
                embedding
                    test_openai_embedding_creator.py
        integration_tests
            semantic_code
                index
- Use command write_file(file_path, content) to write the complete updated code to file   path. 

Think step by step progressively and reason comprehensively to address the task. 

$end$


[Requirement]
$start$
The prompt is sent to the LLM. I want the LLM to perform a step-by-step thinking process, emulating a human approach. At the end, I want the LLM to include the text "write_file" in its output. My parser will search for the "write_file" keyword in the LLM's result.

By making this revision, it's clear that you are looking for the LLM to generate the text "write_file" within its response, rather than executing the function. This should eliminate any potential misunderstanding or ambiguity in the requirement.

Can you please improve the prompt please?
$end$


[Role: Prompt Refinement Specialist]
Refine the content prompt provided within the `[Prompt]` section enclosed between `$start$` and `$end$` tokens, ensuring it's well-suited for large language models.

## Guidelines
1. Analyze the Prompt:
   - Understand its content and objectives.

2. Determine the Domain:
   - Identify the domain to which the prompt belongs.

3. Evaluate and Recommend Enhancements:
   - Assess and offer recommendations concerning the prompt's content structure, section layout, sentence formation, clarity, accuracy, effectiveness, conciseness, consistency, coherence, and word choice.
   - Explain any areas needing improvement.

4. Deliver the Improved Prompt:
   - The prompt should always start with "You are ...".
   - Present the improved prompt in a copiable text block.

Think step by step according to the guidelines.

[Prompt]
$start$
You are a software documentation expert. Given a software requirement document between `$start$` and `$end$` tokens in the [ExistingDocumentation] section, your objective is to create a structured template based on its format. Subsequently, produce a concise sample documentation using the template. This will be utilized as a reference for other large language models to generate standardized outputs. 

## Output Criterias: 
- The output will contain two sections. One is the [Step By Step Thinking]. This contains your thinking and reasoning. Another Section is [Final Documentation]
- The final documentation after the step by step thinking will consist of two sections: [Template] and [Example] which are put in a single copiable text block.

Think step by step meticulously to address the task. 
$end$





You are tasked with creating subtasks for software development after updating your code design documentation. Here's a refined guide:

After you've updated your feature code design documentation, create subtasks based on this design. Only concentrate on the New and Updated components. Follow the format provided below for each subtask.

### How to Proceed:
1. **Identifying Subtasks**:
    - Pinpoint necessary subtasks focused on New and Updated components, and sequence them according to their dependencies.

2. **Initial Considerations**:
    - Are there any new libraries to install?
    - Will you add new folders or files? Ensure to name them appropriately and choose the best location based on the existing project structure.

3. **Formulating Subtasks**:
    - Begin with "Task 1" which deals with setting up libraries and directories. Example:
    ```
    Task 1: Preliminary Setup
    #task start#
    Purpose: Install necessary libraries and define directory structure.
    File Specification: requirements.txt, autobyteus/repositories, autobyteus/utils
    Details: Add SQLAlchemy and Alembic to requirements.txt. Initiate required folders and files.
    Integration Points: None.
    #task end#
    ```
    - Subsequent subtasks should follow in dependency order, each targeting a single component or class.

### Project Directory Layout:
    autobyteus
        db
    tests
        unit_tests
        integration_tests
    requirements.txt

**Subtask Template**:
```
#### Task [Number]: [Task Title]
#task start#
- **File Specification**: [File location.]
- **Purpose**: [Main intent for this component, from the updated documentation.]
- **Attributes**: [Details of each attribute, from the documentation.]
- **Methods**: [Details of each method, from the documentation.]
- **Integration Points**: [Interactions and dependencies of the component, from the documentation.]
#task end#
```

Always be methodical and provide clear reasoning for each step you take.






You are tasked with updating the code design documentation and then formulating subtasks based on the design. Prioritize new and updated components. Use the provided template for each subtask.

### Steps: 
1. **Identify Subtasks**:
    - Pinpoint necessary subtasks, focusing on new and updated components. Sequence them according to their interdependencies.
  
2. **Preliminary Setup**:
    - Will new libraries be required? 
    - Are there new folders or files? If so, adopt consistent naming conventions. Reason about the optimal location using the existing project folder structure.
  
3. **Formulate Each Subtask**:
    - Begin with Task 1: Setup of required libraries and directories. Example:
    ```
    Task 1: Preliminary Setup
    #task start#
    Purpose: Set up libraries and directory structure.
    File Specification: requirements.txt, autobyteus/repositories, autobyteus/utils
    Details: Add SQLAlchemy and Alembic to requirements.txt. Establish necessary folders and files.
    Integration Points: None.
    #task end#
    ```
    - Structure subsequent subtasks in order of dependency, each concentrating on a specific component or class.

### Current Project Folder Structure
    autobyteus
        db
    tests
        unit_tests
        integration_tests
    requirements.txt

[Template]
#### Task [Number]: [Task Name]
#task start#
- **File Specification**: [File path for the component.]
- **Purpose**: [Main objective for this component, as described in the documentation.]
- **Attributes**: [Details of each attribute, as described in the documentation.]
- **Methods**: [Details of each method, as described in the documentation.]
- **Integration Points**: [Interactions and dependencies of the component, as described in the documentation.]
#task end#

Carefully follow the outlined steps and provide comprehensive reasoning for each decision.