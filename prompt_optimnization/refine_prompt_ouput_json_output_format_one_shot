Prompt Description: This prompt is used to optimize a given prompt.


1. Version 1: use json as output
As an expert in optimizing prompts, your task is to refine the given prompt within the `>>Prompt<<` section. The start of content begins with `$start$` and ends with `$end$`.

Please follow the steps below. Each step has a title, and description of the step.
1. Analyze the Prompt:
   - Break down the prompt and articulate your understanding of its content and intentions.

2. Summarize the Prompt:
   - Condense your analysis into a brief summary highlighting the main points and purpose of the prompt.

3. Identify the Domain of the Prompt:
   - Predict the domain of this prompt.

4. Assess and Suggest Improvements Based on the Domain of the Prompt:
   a. Articulate your opinions on the prompt's clarity, effectiveness and completeness
   b. Articulate specific areas where the prompt can be improved in terms of content and structure

5. Present the Refined Prompt:
   - Present the final refined prompt, based on the assessments and suggestions from step 4. 

The output format should be in JSON, with each step title as the key, and the output of each step as the value. Here is an example format:
   {   
       "Analyze the Prompt": "Description of analysis...",
       "Summarize the Prompt": "Concise summary...",   
       "Identify the Domain of the Prompt": "Domain name...",
       "Assess and Suggest Improvements Based on the Domain of the Prompt": {
                 "a": "Opinions on clarity...",
                 "b": "Suggestions for improvement..."   
       },
       "Present the Refined Prompt": "$start$ Refined prompt content... $end$"
   }

>>Prompt<<
$start$

$end$


Version 2: Not using json output
As an expert in refining content prompts, your task is to improve the given prompt situated within the `>>Prompt<<` section, which starts with `$start$` and ends with `$end$`.

Follow the steps below, each accompanied by a title and a description:
1. Analyze the Prompt:
   - Dissect the prompt to understand its content and objectives.

2. Determine the Domain:
   - Identify the domain to which this prompt belongs.

3. Evaluate and Recommend Linguistic Enhancements:
   a. Share your thoughts on the prompt's clarity, effectiveness, sentence structure, consistency, coherence, and word order, content structure, and propose improvements.

4. Utilize Domain Expertise for Refinement:
   a. Recall your expertise in the identified domain and outline your typical refinement steps.
   b. Compare your approach with the existing steps and provide your insights on improvements.

5. Present the Refined Prompt:
   - Apply your improvements suggestions from step 4, and present the refined prompt from a new line


>>Prompt<<
$start$
As a Senior Software Engineer, you are tasked with augmenting the documentation of the provided source code to improve its readability and facilitate ease of maintenance.

The source code in need of enhanced documentation is presented in a dedicated section labeled `>Source Code<`.

The `>Source Code<` section may encompass multiple files, each delineated with the following elements:
- `>File Path<`: Signifies the directory path to the file within the workspace.
- `>Code<`: contains the source code from the file, which starts with `$start$` and ends with `$end$`

>Source Code<
>File Path<: src/semantic_code/index/document/entities.py
>Code<: here is the source code of entities.py

You will articulate your understanding of  the code first. then share your knowledge of 
best practice of code documentation for the language of the code. Don't forget to add file doc 
at the beginning of the file as well. Then present the 
enhanced version of code in copiable code block.
$end$









