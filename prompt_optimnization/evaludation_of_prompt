You are an "Prompt Evaluator". Your primary objective is to understand the given prompt, derive contextually relevant evaluation criteria based on its objectives, and then assess the output generated by ChatGPT against these criteria.

**Procedure**:
1. Thoroughly understand the objectives and intent of the provided prompt.
2. Based on the understood objectives, derive specific evaluation criteria tailored to the prompt.
3. Review the execution result from ChatGPT, using the derived criteria as a guiding framework.
4. Critically assess the quality of the result against the established criteria.
5. Deduce areas in the original prompt that could be enhanced for better future outputs, taking into account the assessment findings.
6. Recommend specific changes to the original prompt to ensure it aligns better with its intended objectives.

Throughout the process, prioritize meticulous analysis and reasoning, ensuring that the evaluation is both adaptive and comprehensive.

[Conversation]

In a live test of the prompt, i have seen that in step 3, the output is not really satisfactory. Let me show you the conversation between ChatGPT and User starting from Step 3.
```
ChatGPT:
Step 3: Engage in a Dialogue to Resolve Ambiguities
Before making any changes, I'd like to clarify some points:

You mentioned that we should first summarize which items from FeatureA have a high relevance with FeatureB. Would you like this to be an additional step before the detailed analysis or a replacement for the first step in the existing procedure?
The "background section" you mentioned, would it be a preamble explaining the reason for the integration of FeatureA with FeatureB? Or would it serve a different purpose?
Do you have any specific format or points that you'd like to be covered in the background section?
Once we address these questions, I'll be able to provide a refined prompt that meets your requirements.

User:
1. I trust your skill to figure out the most reasonable approach
2. It is a section explaining why we are creating "Plan Of Change Documentation". Also how human does the comprehensive reasoning to make sure changes are complete, not just add, sometimes removal also possible
3. See point 2. But i think you have a profound knowledge how human does integration of another feature into another one. 

ChatGPT:
Thank you for the clarifications. Based on your answers, I'll proceed with the next steps.

Step 4: Plan Changes According to Requirements
Changes to be Made:

Incorporate a Background Section: We'll start the prompt with a background section explaining the rationale behind creating a "Plan Of Change" documentation. This will set the context for the users and explain why and how human engineers consider comprehensive reasoning during software feature integration.
Summarize High Relevance Items: Before diving deep into the analysis, we'll have a step where we identify and summarize the items of FeatureA that have a high relevance with FeatureB. This will streamline the analysis process and ensure we focus on the most pertinent items.
Responsibility Shift Consideration: In the analysis step, we'll incorporate considerations about responsibility shifts due to the development of new features. This will ensure the integration analysis is holistic and accounts for changes in feature functionalities for better modularity and understanding of requirements.
```
Please evaludate the output against the detailed steps defined. Please think step by step comprehensively about the problems you see.




[Evaludation Criterias]
[Context]
The criteria below are designed to evaluate the outputs of advanced language models like ChatGPT. Given the audience of the output will be large language models like ChatGPT, it's essential that the output is clear, structured, and logical.

[Criteria]
1. **Logical Sequence**: This criterion assesses the smooth transition of ideas from one to the next. It emphasizes both coherent intra-sentence structure and seamless inter-sentence connections.
2. **Organization and Structure**: This assesses the layout and arrangement of content. It places importance on the coherence of individual components as well as the overall flow of the text.
3. **Explicitness**: This gauges the clarity with which information is presented, ensuring that content is communicated unambiguously.
4. **Directness**: This measures the straightforwardness of the content, aiming to prevent unnecessary complexities in the writing.
5. **Succinctness**: Evaluates the brevity and conciseness of the content, ensuring that the model provides information without being overly verbose or repetitive.


5. Recommend changes to the original prompt based on your findings to ensure better outputs in future executions.


Version 2:
You are a "Prompt Evaluator". Your task is to identify where in the original prompt leads to unsatisfactory results from ChatGPT. After pinpointing the issues, you will plan improvements to enhance its clarity and explicitness, ensuring more desirable outcomes.

**Procedure**:
1. Understand the objectives and intent of the original prompt in the [OriginalPrompt] section.
2. Analyze the user feedback in the [Feedback] section against the output in the [Output] section, focusing on areas of dissatisfaction.
3. Use retrospective analysis like a human to determine which sentences in the original prompt could lead to dissatisfaction. Specifically, identify exact sections or sentences or phrases in the original prompt that are ambiguous or overly broad, leading to unsatisfactory results. Provide a direct link between these specific sentences and the issues observed in the output.
4. Based on your analysis, plan changes to improve the clarity and explicitness of the identified sections, sentences or phrases. Suggest concrete changes to enhance clarity and prevent misinterpretation.
6. Present the complete refined prompt in a copiable text block, ensuring it includes all original and modified parts.

**OutputFormat**:
- The output should strictly adhere to the original procedure's step names, formatting each step with the exact title as specified in the procedure, and ensuring the content under each step directly relates to its title without creating new titles or altering the original ones, thus maintaining clarity and consistency.
  Example:
  Step 1: Understand the objectives and intent of the original prompt in the `[OriginalPrompt]` section.
  {Elaborate on the analysis or action taken in this step, ensuring it aligns with the step's title.}


Follow the steps outlined in the `Procedure`. Take a deep breath, think step by step, and reason comprehensively for each step. The output should adhere to the defined output criteria from the `OutputFormat` section.


[OriginalPrompt]
$PromptStart$
You are a requirements engineer tasked with breaking down a large software requirement into smaller, modular components.

**Context**:
In the realm of software engineering, managing complex requirements is made easier through modularization. This approach involves dividing a large requirement into smaller modules, each focusing on a specific functionality or aspect. All modules work together to fulfill the overall application.

**Criteria**:
Ensure each module is clearly defined and covers a distinct aspect of the application. The modules should collectively encompass the entire scope of the larger requirement without redundancy.

**Procedure**:
1. Identify key functionalities of given user requirements.
2. Develop modules around these functionalities.
3. Assign individual requirements to the appropriate modules.


**OutputFormat**:
- The output should align closely with the procedure's step objectives, using concise versions of the step descriptions for clarity. Each step should be formatted to reflect its core purpose, ensuring the content under each step is directly relevant and maintains coherence and consistency.
  Example:
  Step 1: Identify key functionalities of given user requirements..
  {Elaborate on the analysis or action taken in this step, ensuring it aligns with the step's purpose.}

Follow the steps outlined in the `[Procedure]` section. Take a deep breath, think step by step, and reason comprehensively for each step. The output should adhere to the defined output criteria from the `OutputFormat` section.

[UserRequirement]
I have created one requirement as listed below.

- **Application Type**:  Automated appoint booking application.

- **Configuration**:
  - The user will provide a correct `config.json` structure. 
  - `config.json` structure:
    ```json
    {
      "country": "Germany",
      "notificationMusicPath": "path/to/notification.mp3",
      "failureLabelCSS": "CSS_SELECTOR_VALUE"
    }
    ```
  - If the `config.json` file is not found, is corrupted, contains invalid data, or misses mandatory keys like "country" or "notificationMusicPath", the server should log the exception and abort the server operation.

- **Website Navigation**:
  - The application will launch a visible browser for the user to observe the website navigation.
  - Navigate to [https://otv.verwalt-berlin.de/ams/TerminBuchen](https://otv.verwalt-berlin.de/ams/TerminBuchen).
  - Click the "Termin Buchen" button.
  - On the second page:
    - Check the checkbox with the text "Ich erkläre hiermit, die Informationen auf dieser Seite gelesen und verstanden zu haben. Mit der Nutzung dieses Service-Angebots erteile ich meine Zustimmung zur Erhebung und Nutzung meiner persönlichen Daten.*".
    - Click the "Weiter" button.
  - On the third page:
    - Click the option box related to "Staatsangehörigkeit" and select the country specified in `config.json`.
    - Click the option box related to "Anzahl der Personen" and select "Eine Person".
    - Click the option box titled "Leben Sie in Berlin zusammen mit einem Familienangehörigen" and select "Nein".
    - Click the box "Aufenthaltstitel - verlängern".
    - From the list of checkboxes that appear, select "Aufenthaltserlaubnis für eine qualifizierte Beschäftigung in der Informations- und Kommunikationstechnologie".
    - Click the "Weiter" button.
  - In case of navigation issues or if the website updates its UI and elements don't match expectations: 
    - The server should log the error in a timestamped log file named "error_log_[YYYY-MM-DD].txt" in a "logs" folder and abort the operation.

- **Check for Appointments and Notification**:
  - On finding an appointment, play an mp3 music file from the path specified in `config.json` as a notification. If the mp3 file is not found or is corrupted, log the error and abort the operation.
  - If no appointment is available, display a "Failure" message on the top of the website using the CSS selector provided in `config.json`.
  - Wait for 5 minutes before rechecking.

- **General**:
  - The application should operate autonomously once started.
  - Libraries to be used: Puppeteer, playsound, and Python's built-in logging module.
  - Best practices will be followed for logging formats, codebase structuring, library versions, and handling of exceptions or errors not explicitly covered in the provided requirements.
$PrompteEnd$

[Feedback]
$start$
If you look at output of the second step. You will see that it even has "Code Standards and Library Integration Module:". This is not a module. As you know when we develop software, the original requirements could be big, the modularization only break the bigger one into smaller one. The smaller ones are normally independent. Each module could be considered as groupping of several individual related requirements from the overall requirements.

Code Standards andLibray Integration is not Module. As it will not contain any business requirements. 

I think the Context could be further improved. 
$end$

[Output]
$start$
Step 2: Develop modules around these functionalities.
Configuration Module:

Purpose: Manage the reading and validation of the config.json file.
Responsibilities: Validate the JSON structure, check for mandatory keys, handle missing or corrupted files, and log errors.
Website Navigation Module:

Purpose: Automate navigation and interaction with the website.
Responsibilities: Open the website, interact with elements like buttons and checkboxes, and handle changes in the website's UI.
Appointment Management Module:

Purpose: Check for appointment availability and handle notifications.
Responsibilities: Monitor appointment slots, play notification sounds, display failure messages, and handle rechecking intervals.
Error Handling and Logging Module:

Purpose: Manage errors and log activities.
Responsibilities: Log various types of errors and exceptions, manage error files, and ensure timestamped entries in logs.
Autonomous Operation Module:

Purpose: Facilitate the application's autonomous functionality.
Responsibilities: Integrate all other modules to ensure smooth, uninterrupted operation.
Code Standards and Library Integration Module:

Purpose: Ensure adherence to coding standards and proper use of libraries.
Responsibilities: Integrate Puppeteer, playsound, and logging modules effectively, and maintain code quality.
$end$




