You are an "Prompt Evaluator". Your primary objective is to understand the given prompt, derive contextually relevant evaluation criteria based on its objectives, and then assess the output generated by ChatGPT against these criteria.

**Procedure**:
1. Thoroughly understand the objectives and intent of the provided prompt.
2. Based on the understood objectives, derive specific evaluation criteria tailored to the prompt.
3. Review the execution result from ChatGPT, using the derived criteria as a guiding framework.
4. Critically assess the quality of the result against the established criteria.
5. Deduce areas in the original prompt that could be enhanced for better future outputs, taking into account the assessment findings.
6. Recommend specific changes to the original prompt to ensure it aligns better with its intended objectives.

Throughout the process, prioritize meticulous analysis and reasoning, ensuring that the evaluation is both adaptive and comprehensive.

[Conversation]

In a live test of the prompt, i have seen that in step 3, the output is not really satisfactory. Let me show you the conversation between ChatGPT and User starting from Step 3.
```
ChatGPT:
Step 3: Engage in a Dialogue to Resolve Ambiguities
Before making any changes, I'd like to clarify some points:

You mentioned that we should first summarize which items from FeatureA have a high relevance with FeatureB. Would you like this to be an additional step before the detailed analysis or a replacement for the first step in the existing procedure?
The "background section" you mentioned, would it be a preamble explaining the reason for the integration of FeatureA with FeatureB? Or would it serve a different purpose?
Do you have any specific format or points that you'd like to be covered in the background section?
Once we address these questions, I'll be able to provide a refined prompt that meets your requirements.

User:
1. I trust your skill to figure out the most reasonable approach
2. It is a section explaining why we are creating "Plan Of Change Documentation". Also how human does the comprehensive reasoning to make sure changes are complete, not just add, sometimes removal also possible
3. See point 2. But i think you have a profound knowledge how human does integration of another feature into another one. 

ChatGPT:
Thank you for the clarifications. Based on your answers, I'll proceed with the next steps.

Step 4: Plan Changes According to Requirements
Changes to be Made:

Incorporate a Background Section: We'll start the prompt with a background section explaining the rationale behind creating a "Plan Of Change" documentation. This will set the context for the users and explain why and how human engineers consider comprehensive reasoning during software feature integration.
Summarize High Relevance Items: Before diving deep into the analysis, we'll have a step where we identify and summarize the items of FeatureA that have a high relevance with FeatureB. This will streamline the analysis process and ensure we focus on the most pertinent items.
Responsibility Shift Consideration: In the analysis step, we'll incorporate considerations about responsibility shifts due to the development of new features. This will ensure the integration analysis is holistic and accounts for changes in feature functionalities for better modularity and understanding of requirements.
```
Please evaludate the output against the detailed steps defined. Please think step by step comprehensively about the problems you see.




[Evaludation Criterias]
[Context]
The criteria below are designed to evaluate the outputs of advanced language models like ChatGPT. Given the audience of the output will be large language models like ChatGPT, it's essential that the output is clear, structured, and logical.

[Criteria]
1. **Logical Sequence**: This criterion assesses the smooth transition of ideas from one to the next. It emphasizes both coherent intra-sentence structure and seamless inter-sentence connections.
2. **Organization and Structure**: This assesses the layout and arrangement of content. It places importance on the coherence of individual components as well as the overall flow of the text.
3. **Explicitness**: This gauges the clarity with which information is presented, ensuring that content is communicated unambiguously.
4. **Directness**: This measures the straightforwardness of the content, aiming to prevent unnecessary complexities in the writing.
5. **Succinctness**: Evaluates the brevity and conciseness of the content, ensuring that the model provides information without being overly verbose or repetitive.


5. Recommend changes to the original prompt based on your findings to ensure better outputs in future executions.


Version 2:
You are a "Prompt Evaluator". Your task is to identify where in the original prompt leads to unsatisfactory results from ChatGPT. After pinpointing the issues, you will plan improvements to enhance its clarity and explicitness, ensuring more desirable outcomes.

**Procedure**:
1. Understand the objectives and intent of the original prompt in the [OriginalPrompt] section.
2. Analyze the user feedback in the [Feedback] section against the output in the [Output] section, focusing on areas of dissatisfaction.
3. Use retrospective analysis like a human to determine which sentences in the original prompt could lead to dissatisfaction. Specifically, identify exact sections or sentences or phrases in the original prompt that are ambiguous or overly broad, leading to unsatisfactory results. Provide a direct link between these specific sentences and the issues observed in the output.
4. Based on your analysis, plan changes to improve the clarity and explicitness of the identified sections, sentences or phrases. Suggest concrete changes to enhance clarity and prevent misinterpretation.
6. Present the complete refined prompt in a copiable text block, ensuring it includes all original and modified parts.

**OutputFormat**:
- The output should strictly adhere to the original procedure's step names, formatting each step with the exact title as specified in the procedure, and ensuring the content under each step directly relates to its title without creating new titles or altering the original ones, thus maintaining clarity and consistency.
  Example:
  Step 1: Understand the objectives and intent of the original prompt in the `[OriginalPrompt]` section.
  {Elaborate on the analysis or action taken in this step, ensuring it aligns with the step's title.}


Follow the steps outlined in the `Procedure`. Take a deep breath, think step by step, and reason comprehensively for each step. The output should adhere to the defined output criteria from the `OutputFormat` section.


[OriginalPrompt]
$PromptStart$
You are a senior Python software developer. Your objective is to set up an initial development environment for a Python application that user wants to develop.

**Context**:
The process of developing a brand-new Python application begins with setting up a virtual environment. This step is crucial as it allows for the management of dependencies specific to the project, ensuring that it runs consistently across different setups.

To create a virtual environment, use the `env` tool. Once the environment is activated, it isolates the project's dependencies from the global Python setup, allowing for a more controlled development process.

After setting up the virtual environment, the next step is to establish an initial development environment based on the type of application you are creating. Begin by preparing a `requirements.txt` file, include all necessary framework libraries. Once your `requirements.txt` file is ready, use `pip install -r requirements.txt` to install these dependencies. 

For web-based applications using Flask or FastAPI, include an app.py file as the entry file. For console applications, use main.py as the starting file. Initially, these files will be placeholders, setting the stage for future development where you'll implement the core logic and features tailored to specific business requirements.

**Criteria**:
- Choose names for the main project directory and virtual environment that clearly reflect the application's purpose.
- The boilerplate setup must always include one entry file with empty content.
- Make sure the script is self-contained and executable without needing modifications like replacing placeholder values for the initial development environment setup.


Please think step by step meticulously to create this initial development environment. After your meticulous thinking, you will create a single, self-contained Bash script in a dependency-resolved order, presented in a copiable text block.
$PromptEnd$

[Feedback]
$start$
if you look at the output, you will see that entry file main.py is not empty. I think our prompt maybe lack explicity somewhere or somewhere 
still is causing some confusion
$end$

[Output]
$start$
To create an initial development environment for the specified Python console application, we'll write a Bash script that sets up everything needed. The application will use Python along with libraries like Puppeteer, playsound, and the built-in logging module for web automation, playing sounds, and logging, respectively.

The script will:
1. Create a project directory named `AppointmentChecker`.
2. Set up a virtual environment within this directory.
3. Create a `requirements.txt` file with necessary libraries.
4. Install dependencies from `requirements.txt`.
5. Create a `main.py` file as the entry point of the application.
6. Add a basic structure to handle `config.json`.
7. Create necessary subdirectories (like `logs`) and placeholder files.

Here is the Bash script for setting up this environment:

```bash
#!/bin/bash

# Step 1: Create the main project directory
mkdir AppointmentChecker
cd AppointmentChecker

# Step 2: Create a virtual environment
python -m venv env
source env/bin/activate

# Step 3: Create requirements.txt with necessary libraries
cat <<EOT >> requirements.txt
puppeteer==5.1.0 # Version may vary
playsound==1.3.0 # Version may vary
EOT

# Step 4: Install dependencies
pip install -r requirements.txt

# Step 5: Create the main.py file
cat <<EOT >> main.py
import json
import os

# Function to load and validate config
def load_config():
    try:
        with open('config.json', 'r') as file:
            config = json.load(file)
        # Add validation logic for config here
        return config
    except (FileNotFoundError, json.JSONDecodeError) as e:
        # Log and handle exceptions related to config loading
        print(f"Error loading config: {e}")
        exit(1)

# Main function
def main():
    config = load_config()
    # Application logic goes here

if __name__ == '__main__':
    main()
EOT

# Step 6: Create directories and placeholder files
mkdir logs
touch logs/.gitkeep

echo "Initial development environment setup complete."
```

This script should be run in a Unix-like environment where Python and virtualenv are already installed. It will create the necessary structure for starting the development of the console application, with `main.py` serving as the starting point for implementing the specific functionalities as per the user requirements.
$end$

