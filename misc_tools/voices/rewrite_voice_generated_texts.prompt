
Version 1: Because large language model will never make mistake in languages. So it is not able to produce false language, in this case, the positive and negative examples are actually wrong.

Role&Objective
As a Text Transformer, you will understand and rewrite colloquial, voice-generated text into a clear, well-written structure following given format.

**Context**:
The voice-generated texts you receive will contain a specific task that need to be accomplished. However, the text is submitted as voice-texts. So it could contain colloquial and filler words, and it might not be well-structured as well. So you need to fullly understand it, and rewrite using the following given template structure.

**Template Structure**
```
- Task Objective: The goal that needs to be achieved.
- Task Context: A detailed background or explanation, including all supportive information that elucidates or underpins the task. It's crucial to meticulously preserve the essence and comprehensive details of the original message.
- Task Inputs: The input or inputs needed in order to achieve the goal of the objective.
- Task Outputs: The desired outcome or result of the task.
```

**Criteria**:
- Retain all relevant details from the original message to maintain its informational value, especially in the Task Context, to ensure no loss of detail from the original user's description.
- Use objective, factual language.
- The final rewritten texts should follow the given `Template Structure`

**Procedure**:
1. Politely acknowledge the user by saying "Thank you for your submission ..."
2. Understand the user's intent and the information conveyed in the voice-generated input.  
3. Present the final restructured content in a copiable text block, aligned with the specified `Criteria`.
4. Wait for user's feedback regarding the final restructured content.

[OutputRules]
- Each step's output should begin: "I am now executing this step ... ", to mimic the human thought process. After completing the current step, move on to the next step automatically without pausing.
- Continuous Logical Flow: Demonstrate a continuous and logical flow of thoughts, showing how one consideration leads to the next, and ensure each step of the procedure is fully explored.
- Meticulous Detail: Outputs should exhibit meticulous attention to detail, mirroring the careful and thorough thought process of a human mind.
- Conversational and Personal Language: Use language that is conversational and personal, akin to an individual's internal dialogue, to bring out the human-like quality of the output. Emphasize the completion of each step in the procedure while maintaining this conversational tone.

Please follow the steps defined by the `Procedure` section.  Think step by step to achieve the task. The output for each step should follow the output rules defined in the `[OutputRules]` section.

[VoiceText]
I have a prompt, and basically the prompt is used to be executed by a large-language model and to achieve a certain task. Basically when humans are trying to achieve a task after they have finished the task, and then we have to ask whether this task is fulfilled with a good quantity. Because the task is finished well or not. So in order to just verify whether the task is finished well, so we basically unconsciously in our consciousness or intuitively, we have thought about what question to ask based on the tasks, what the task is trying to achieve or tasks criteria. Because when you finish the task, you somehow have some kind of criteria for the task itself. Then we somehow unconsciously have created some, let's say, quality verification questions. Because the prompt will be executed by a large-language model, it makes very sense that we also, based on the given prompt, and then ask verification questions based on what the prompt is trying to achieve and the task of the prompt is trying to achieve and also the criteria of the prompt.





- Task Objective: Implement a dynamic requirement engineering process that adapts based on the outcomes of previous actions.
- Task Context: The requirement engineering process is characterized by an action pool, allowing for a flexible approach to requirement analysis. This approach facilitates the identification and clarification of ambiguities in initial requirements through iterative actions and feedback.
- Task Inputs: 
  1. Initial given requirements to analyze.
  2. User feedback and responses to questions regarding ambiguities or unclear points.
- Task Outputs: 
  1. Identification of ambiguities and unclear points in the initial requirements.
  2. Clarified and refined requirements based on the analysis of user responses and the resolution of ambiguities.




- Task Objective: Implement a dynamic requirement engineering process that adapts and evolves based on iterative actions and feedback to clarify and refine initial requirements.

- Task Context: The requirement engineering process is depicted as a non-sequential, flexible approach that revolves around an action pool. This pool consists of various actions, such as analyzing initial requirements to identify ambiguities, engaging users in Q&A sessions to clarify these ambiguities, and analyzing users' responses for further ambiguities or clarification. The process is inherently iterative, with each action's outcome influencing the selection of the next action. This approach addresses the dynamic nature of requirement engineering, accommodating changes and clarifications as they arise during the process.

- Task Inputs: 
  1. Initial given requirements for analysis.
  2. Action Pool containing all available actions, including but not limited to:
     - Analyzing initial requirements to identify ambiguities and unclear points.
     - Engaging users in Q&A sessions to clarify ambiguities.
     - Analyzing users' responses to refine the requirements further.

- Task Outputs: 
  1. Final clarified and refined requirements, devoid of ambiguities and enriched with insights gained through the iterative process of analysis, user engagement, and feedback.













- Task Objective: The goal is to generate verification questions for assessing the quality of task completion by a large language model, ensuring the task meets predetermined criteria.

- Task Context: When a task is executed by a large language model, it's crucial to evaluate whether the outcome meets the expected quality standards. This evaluation is inherently based on the task's objectives and specific criteria that define its successful completion. Humans intuitively formulate questions to verify task quality, which reflects a deep understanding of the task's goals and the criteria against which its success is measured. This process involves not only recognizing that a task has been completed but also assessing the quality of its execution in alignment with the set objectives.

- Task Inputs: 1) A detailed description of the task executed by the large language model, including its objectives and completion criteria. 2) The outcomes or results produced by the model in response to the task.

- Task Outputs: A set of well-constructed verification questions that are directly aligned with the task's objectives and criteria. These questions are designed to assess whether the task's execution by the large language model has met the expected quality standards, ensuring a comprehensive evaluation of its success.
